
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'SleftLPARENRPARENrightINCREMENTDECREMENTPOWMULTIPLICATIONDIVISIONMODULOPLUSMINUSLESSTHANGREATERTHANLESSTHANOREQUALTOGREATERTHANOREQUALTOEQUALTONOTEQUALTOANDORNOTrightUMINUSAND ASSIGN BOOL CHAR COMMA DECREMENT DEF DIVISION DOWHILE ELSE ELSEIF EQUALTO FLOAT GREATERTHAN GREATERTHANOREQUALTO IF INCREMENT INT LCURLY LESSTHAN LESSTHANOREQUALTO LPAREN MINUS MODULO MULTIPLICATION NAME NOT NOTEQUALTO OR PLUS POW PRINT RCURLY RPAREN SEMICOL STRING VARTYPE\n    S : stmt S\n    \n    S :\n    exp : LPAREN exp RPAREN\n    stmt : PRINT exp COMMA exp SEMICOL\n         | PRINT exp SEMICOL\n         | PRINT LPAREN exp RPAREN SEMICOL\n    \n    stmt : VARTYPE NAME ASSIGN exp SEMICOL\n    \n    exp : FLOAT\n    \n    exp : INT\n    \n    exp : BOOL\n    \n    exp : CHAR\n    \n    exp : NAME\n     \n    exp : exp PLUS exp\n        | exp MINUS exp\n        | exp MULTIPLICATION exp\n        | exp DIVISION exp\n        | exp MODULO exp\n        | exp GREATERTHAN exp\n        | exp LESSTHAN exp\n        | exp GREATERTHANOREQUALTO exp\n        | exp LESSTHANOREQUALTO exp\n        | exp EQUALTO exp\n        | exp NOTEQUALTO exp\n        | exp COMMA exp\n        | exp AND exp\n        | exp OR exp\n        | exp POW exp\n        | exp INCREMENT\n        | exp DECREMENT\n        | exp NOT\n        | STRING\n    exp : MINUS exp %prec UMINUS\n    stmt : IF LPAREN exp RPAREN LCURLY S RCURLY block\n    \n    block : ELSEIF LPAREN exp RPAREN LCURLY S RCURLY block\n    \n    block : ELSE LCURLY S RCURLY\n    \n    block : \n    '
    
_lr_action_items = {'$end':([0,1,2,6,19,62,64,66,69,70,78,81,82,],[-2,0,-2,-1,-5,-4,-6,-7,-36,-33,-35,-36,-34,]),'PRINT':([0,2,19,62,64,66,67,69,70,74,78,79,81,82,],[3,3,-5,-4,-6,-7,3,-36,-33,3,-35,3,-36,-34,]),'VARTYPE':([0,2,19,62,64,66,67,69,70,74,78,79,81,82,],[4,4,-5,-4,-6,-7,4,-36,-33,4,-35,4,-36,-34,]),'IF':([0,2,19,62,64,66,67,69,70,74,78,79,81,82,],[5,5,-5,-4,-6,-7,5,-36,-33,5,-35,5,-36,-34,]),'RCURLY':([2,6,19,62,64,66,67,68,69,70,74,76,78,79,80,81,82,],[-2,-1,-5,-4,-6,-7,-2,69,-36,-33,-2,78,-35,-2,81,-36,-34,]),'LPAREN':([3,5,8,14,17,18,20,21,22,23,24,25,26,27,28,29,30,31,32,33,37,40,59,71,73,],[8,17,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,73,37,]),'FLOAT':([3,8,14,17,18,20,21,22,23,24,25,26,27,28,29,30,31,32,33,37,40,59,73,],[9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,]),'INT':([3,8,14,17,18,20,21,22,23,24,25,26,27,28,29,30,31,32,33,37,40,59,73,],[10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,]),'BOOL':([3,8,14,17,18,20,21,22,23,24,25,26,27,28,29,30,31,32,33,37,40,59,73,],[11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,]),'CHAR':([3,8,14,17,18,20,21,22,23,24,25,26,27,28,29,30,31,32,33,37,40,59,73,],[12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,]),'NAME':([3,4,8,14,17,18,20,21,22,23,24,25,26,27,28,29,30,31,32,33,37,40,59,73,],[13,16,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,]),'STRING':([3,8,14,17,18,20,21,22,23,24,25,26,27,28,29,30,31,32,33,37,40,59,73,],[15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,]),'MINUS':([3,7,8,9,10,11,12,13,14,15,17,18,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,63,65,73,75,],[14,21,14,-8,-9,-10,-11,-12,14,-31,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,-28,-29,-30,14,21,-32,14,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,-3,14,21,-3,21,14,21,]),'COMMA':([7,9,10,11,12,13,15,34,35,36,38,39,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,60,63,65,75,],[18,-8,-9,-10,-11,-12,-31,-28,-29,-30,59,-32,59,59,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-25,-26,-27,59,-3,59,-3,59,59,]),'SEMICOL':([7,9,10,11,12,13,15,34,35,36,39,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,58,60,63,65,],[19,-8,-9,-10,-11,-12,-31,-28,-29,-30,-32,62,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-25,-26,-27,-3,66,-3,-24,]),'PLUS':([7,9,10,11,12,13,15,34,35,36,38,39,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,60,63,65,75,],[20,-8,-9,-10,-11,-12,-31,-28,-29,-30,20,-32,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,-3,20,-3,20,20,]),'MULTIPLICATION':([7,9,10,11,12,13,15,34,35,36,38,39,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,60,63,65,75,],[22,-8,-9,-10,-11,-12,-31,-28,-29,-30,22,-32,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,-3,22,-3,22,22,]),'DIVISION':([7,9,10,11,12,13,15,34,35,36,38,39,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,60,63,65,75,],[23,-8,-9,-10,-11,-12,-31,-28,-29,-30,23,-32,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,-3,23,-3,23,23,]),'MODULO':([7,9,10,11,12,13,15,34,35,36,38,39,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,60,63,65,75,],[24,-8,-9,-10,-11,-12,-31,-28,-29,-30,24,-32,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,-3,24,-3,24,24,]),'GREATERTHAN':([7,9,10,11,12,13,15,34,35,36,38,39,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,60,63,65,75,],[25,-8,-9,-10,-11,-12,-31,-28,-29,-30,25,-32,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,-3,25,-3,25,25,]),'LESSTHAN':([7,9,10,11,12,13,15,34,35,36,38,39,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,60,63,65,75,],[26,-8,-9,-10,-11,-12,-31,-28,-29,-30,26,-32,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,-3,26,-3,26,26,]),'GREATERTHANOREQUALTO':([7,9,10,11,12,13,15,34,35,36,38,39,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,60,63,65,75,],[27,-8,-9,-10,-11,-12,-31,-28,-29,-30,27,-32,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,-3,27,-3,27,27,]),'LESSTHANOREQUALTO':([7,9,10,11,12,13,15,34,35,36,38,39,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,60,63,65,75,],[28,-8,-9,-10,-11,-12,-31,-28,-29,-30,28,-32,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,-3,28,-3,28,28,]),'EQUALTO':([7,9,10,11,12,13,15,34,35,36,38,39,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,60,63,65,75,],[29,-8,-9,-10,-11,-12,-31,-28,-29,-30,29,-32,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,-3,29,-3,29,29,]),'NOTEQUALTO':([7,9,10,11,12,13,15,34,35,36,38,39,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,60,63,65,75,],[30,-8,-9,-10,-11,-12,-31,-28,-29,-30,30,-32,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,-3,30,-3,30,30,]),'AND':([7,9,10,11,12,13,15,34,35,36,38,39,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,60,63,65,75,],[31,-8,-9,-10,-11,-12,-31,-28,-29,-30,31,-32,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,-3,31,-3,31,31,]),'OR':([7,9,10,11,12,13,15,34,35,36,38,39,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,60,63,65,75,],[32,-8,-9,-10,-11,-12,-31,-28,-29,-30,32,-32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,-3,32,-3,32,32,]),'POW':([7,9,10,11,12,13,15,34,35,36,38,39,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,60,63,65,75,],[33,-8,-9,-10,-11,-12,-31,-28,-29,-30,33,-32,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,-3,33,-3,33,33,]),'INCREMENT':([7,9,10,11,12,13,15,34,35,36,38,39,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,60,63,65,75,],[34,-8,-9,-10,-11,-12,-31,-28,-29,-30,34,-32,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,-3,34,-3,34,34,]),'DECREMENT':([7,9,10,11,12,13,15,34,35,36,38,39,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,60,63,65,75,],[35,-8,-9,-10,-11,-12,-31,-28,-29,-30,35,-32,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,-3,35,-3,35,35,]),'NOT':([7,9,10,11,12,13,15,34,35,36,38,39,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,60,63,65,75,],[36,-8,-9,-10,-11,-12,-31,-28,-29,-30,36,-32,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,-3,36,-3,36,36,]),'RPAREN':([9,10,11,12,13,15,34,35,36,38,39,41,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,63,65,75,],[-8,-9,-10,-11,-12,-31,-28,-29,-30,58,-32,61,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-25,-26,-27,63,-3,-24,77,]),'ASSIGN':([16,],[40,]),'LCURLY':([61,72,77,],[67,74,79,]),'ELSEIF':([69,81,],[71,71,]),'ELSE':([69,81,],[72,72,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'S':([0,2,67,74,79,],[1,6,68,76,80,]),'stmt':([0,2,67,74,79,],[2,2,2,2,2,]),'exp':([3,8,14,17,18,20,21,22,23,24,25,26,27,28,29,30,31,32,33,37,40,59,73,],[7,38,39,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,60,65,75,]),'block':([69,81,],[70,82,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> S","S'",1,None,None,None),
  ('S -> stmt S','S',2,'p_start','yapl_parser.py',14),
  ('S -> <empty>','S',0,'p_start_empty','yapl_parser.py',21),
  ('exp -> LPAREN exp RPAREN','exp',3,'p_exp_paren','yapl_parser.py',26),
  ('stmt -> PRINT exp COMMA exp SEMICOL','stmt',5,'p_print_stmt','yapl_parser.py',31),
  ('stmt -> PRINT exp SEMICOL','stmt',3,'p_print_stmt','yapl_parser.py',32),
  ('stmt -> PRINT LPAREN exp RPAREN SEMICOL','stmt',5,'p_print_stmt','yapl_parser.py',33),
  ('stmt -> VARTYPE NAME ASSIGN exp SEMICOL','stmt',5,'p_var_assign','yapl_parser.py',45),
  ('exp -> FLOAT','exp',1,'p_exp_float','yapl_parser.py',51),
  ('exp -> INT','exp',1,'p_exp_num','yapl_parser.py',57),
  ('exp -> BOOL','exp',1,'p_exp_bool','yapl_parser.py',63),
  ('exp -> CHAR','exp',1,'p_exp_char','yapl_parser.py',69),
  ('exp -> NAME','exp',1,'p_exp_name','yapl_parser.py',75),
  ('exp -> exp PLUS exp','exp',3,'p_exp_bin','yapl_parser.py',81),
  ('exp -> exp MINUS exp','exp',3,'p_exp_bin','yapl_parser.py',82),
  ('exp -> exp MULTIPLICATION exp','exp',3,'p_exp_bin','yapl_parser.py',83),
  ('exp -> exp DIVISION exp','exp',3,'p_exp_bin','yapl_parser.py',84),
  ('exp -> exp MODULO exp','exp',3,'p_exp_bin','yapl_parser.py',85),
  ('exp -> exp GREATERTHAN exp','exp',3,'p_exp_bin','yapl_parser.py',86),
  ('exp -> exp LESSTHAN exp','exp',3,'p_exp_bin','yapl_parser.py',87),
  ('exp -> exp GREATERTHANOREQUALTO exp','exp',3,'p_exp_bin','yapl_parser.py',88),
  ('exp -> exp LESSTHANOREQUALTO exp','exp',3,'p_exp_bin','yapl_parser.py',89),
  ('exp -> exp EQUALTO exp','exp',3,'p_exp_bin','yapl_parser.py',90),
  ('exp -> exp NOTEQUALTO exp','exp',3,'p_exp_bin','yapl_parser.py',91),
  ('exp -> exp COMMA exp','exp',3,'p_exp_bin','yapl_parser.py',92),
  ('exp -> exp AND exp','exp',3,'p_exp_bin','yapl_parser.py',93),
  ('exp -> exp OR exp','exp',3,'p_exp_bin','yapl_parser.py',94),
  ('exp -> exp POW exp','exp',3,'p_exp_bin','yapl_parser.py',95),
  ('exp -> exp INCREMENT','exp',2,'p_exp_bin','yapl_parser.py',96),
  ('exp -> exp DECREMENT','exp',2,'p_exp_bin','yapl_parser.py',97),
  ('exp -> exp NOT','exp',2,'p_exp_bin','yapl_parser.py',98),
  ('exp -> STRING','exp',1,'p_exp_bin','yapl_parser.py',99),
  ('exp -> MINUS exp','exp',2,'p_exp_uminus','yapl_parser.py',109),
  ('stmt -> IF LPAREN exp RPAREN LCURLY S RCURLY block','stmt',8,'p_IF','yapl_parser.py',122),
  ('block -> ELSEIF LPAREN exp RPAREN LCURLY S RCURLY block','block',8,'p_ELSEIF','yapl_parser.py',128),
  ('block -> ELSE LCURLY S RCURLY','block',4,'p_ELSE','yapl_parser.py',134),
  ('block -> <empty>','block',0,'p_ELSE_EMPTY','yapl_parser.py',140),
]
