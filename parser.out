Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    FUNCTION
    RETURN

Grammar

Rule 0     S' -> S
Rule 1     S -> stmt S
Rule 2     S -> <empty>
Rule 3     exp -> LPAREN exp RPAREN
Rule 4     stmt -> PRINT exp COMMA exp SEMICOL
Rule 5     stmt -> PRINT exp SEMICOL
Rule 6     stmt -> PRINT LPAREN exp RPAREN SEMICOL
Rule 7     stmt -> VARTYPE NAME ASSIGN exp SEMICOL
Rule 8     stmt -> VARTYPE NAME ASSIGN stmt SEMICOL
Rule 9     stmt -> NAME ASSIGN exp SEMICOL
Rule 10    exp -> FLOAT
Rule 11    exp -> INT
Rule 12    exp -> BOOL
Rule 13    exp -> CHAR
Rule 14    stmt -> NAME INCREMENT SEMICOL
Rule 15    stmt -> NAME DECREMENT SEMICOL
Rule 16    exp -> NAME LSQB INT RSQB
Rule 17    exp -> NAME POP LPAREN INT RPAREN
Rule 18    exp -> NAME INDEX LPAREN INT RPAREN
Rule 19    exp -> NAME SLICE LPAREN INT COMMA INT RPAREN
Rule 20    stmt -> NAME PUSH LPAREN exp RPAREN SEMICOL
Rule 21    exp -> NAME
Rule 22    exp -> NOT exp
Rule 23    exp -> exp PLUS exp
Rule 24    exp -> exp MINUS exp
Rule 25    exp -> exp MULTIPLICATION exp
Rule 26    exp -> exp DIVISION exp
Rule 27    exp -> exp MODULO exp
Rule 28    exp -> exp GREATERTHAN exp
Rule 29    exp -> exp LESSTHAN exp
Rule 30    exp -> exp GREATERTHANOREQUALTO exp
Rule 31    exp -> exp LESSTHANOREQUALTO exp
Rule 32    exp -> exp EQUALTO exp
Rule 33    exp -> exp NOTEQUALTO exp
Rule 34    exp -> exp COMMA exp
Rule 35    exp -> exp AND exp
Rule 36    exp -> exp OR exp
Rule 37    exp -> exp POW exp
Rule 38    exp -> STRING
Rule 39    exp -> MINUS exp
Rule 40    stmt -> LIST NAME ASSIGN LSQB exp RSQB SEMICOL
Rule 41    stmt -> LIST NAME ASSIGN LSQB RSQB SEMICOL
Rule 42    stmt -> IF LPAREN exp RPAREN LCURLY S RCURLY block
Rule 43    block -> ELSEIF LPAREN exp RPAREN LCURLY S RCURLY block
Rule 44    block -> ELSE LCURLY S RCURLY
Rule 45    block -> <empty>
Rule 46    stmt -> DO LCURLY S RCURLY block_w
Rule 47    block_w -> WHILE LPAREN exp RPAREN SEMICOL

Terminals, with rules where they appear

AND                  : 35
ASSIGN               : 7 8 9 40 41
BOOL                 : 12
CHAR                 : 13
COMMA                : 4 19 34
DECREMENT            : 15
DIVISION             : 26
DO                   : 46
ELSE                 : 44
ELSEIF               : 43
EQUALTO              : 32
FLOAT                : 10
FUNCTION             : 
GREATERTHAN          : 28
GREATERTHANOREQUALTO : 30
IF                   : 42
INCREMENT            : 14
INDEX                : 18
INT                  : 11 16 17 18 19 19
LCURLY               : 42 43 44 46
LESSTHAN             : 29
LESSTHANOREQUALTO    : 31
LIST                 : 40 41
LPAREN               : 3 6 17 18 19 20 42 43 47
LSQB                 : 16 40 41
MINUS                : 24 39
MODULO               : 27
MULTIPLICATION       : 25
NAME                 : 7 8 9 14 15 16 17 18 19 20 21 40 41
NOT                  : 22
NOTEQUALTO           : 33
OR                   : 36
PLUS                 : 23
POP                  : 17
POW                  : 37
PRINT                : 4 5 6
PUSH                 : 20
RCURLY               : 42 43 44 46
RETURN               : 
RPAREN               : 3 6 17 18 19 20 42 43 47
RSQB                 : 16 40 41
SEMICOL              : 4 5 6 7 8 9 14 15 20 40 41 47
SLICE                : 19
STRING               : 38
VARTYPE              : 7 8
WHILE                : 47
error                : 

Nonterminals, with rules where they appear

S                    : 1 42 43 44 46 0
block                : 42 43
block_w              : 46
exp                  : 3 4 4 5 6 7 9 20 22 23 23 24 24 25 25 26 26 27 27 28 28 29 29 30 30 31 31 32 32 33 33 34 34 35 35 36 36 37 37 39 40 42 43 47
stmt                 : 1 8

Parsing method: LALR

state 0

    (0) S' -> . S
    (1) S -> . stmt S
    (2) S -> .
    (4) stmt -> . PRINT exp COMMA exp SEMICOL
    (5) stmt -> . PRINT exp SEMICOL
    (6) stmt -> . PRINT LPAREN exp RPAREN SEMICOL
    (7) stmt -> . VARTYPE NAME ASSIGN exp SEMICOL
    (8) stmt -> . VARTYPE NAME ASSIGN stmt SEMICOL
    (9) stmt -> . NAME ASSIGN exp SEMICOL
    (14) stmt -> . NAME INCREMENT SEMICOL
    (15) stmt -> . NAME DECREMENT SEMICOL
    (20) stmt -> . NAME PUSH LPAREN exp RPAREN SEMICOL
    (40) stmt -> . LIST NAME ASSIGN LSQB exp RSQB SEMICOL
    (41) stmt -> . LIST NAME ASSIGN LSQB RSQB SEMICOL
    (42) stmt -> . IF LPAREN exp RPAREN LCURLY S RCURLY block
    (46) stmt -> . DO LCURLY S RCURLY block_w

    $end            reduce using rule 2 (S -> .)
    PRINT           shift and go to state 3
    VARTYPE         shift and go to state 4
    NAME            shift and go to state 5
    LIST            shift and go to state 6
    IF              shift and go to state 7
    DO              shift and go to state 8

    S                              shift and go to state 1
    stmt                           shift and go to state 2

state 1

    (0) S' -> S .



state 2

    (1) S -> stmt . S
    (1) S -> . stmt S
    (2) S -> .
    (4) stmt -> . PRINT exp COMMA exp SEMICOL
    (5) stmt -> . PRINT exp SEMICOL
    (6) stmt -> . PRINT LPAREN exp RPAREN SEMICOL
    (7) stmt -> . VARTYPE NAME ASSIGN exp SEMICOL
    (8) stmt -> . VARTYPE NAME ASSIGN stmt SEMICOL
    (9) stmt -> . NAME ASSIGN exp SEMICOL
    (14) stmt -> . NAME INCREMENT SEMICOL
    (15) stmt -> . NAME DECREMENT SEMICOL
    (20) stmt -> . NAME PUSH LPAREN exp RPAREN SEMICOL
    (40) stmt -> . LIST NAME ASSIGN LSQB exp RSQB SEMICOL
    (41) stmt -> . LIST NAME ASSIGN LSQB RSQB SEMICOL
    (42) stmt -> . IF LPAREN exp RPAREN LCURLY S RCURLY block
    (46) stmt -> . DO LCURLY S RCURLY block_w

    $end            reduce using rule 2 (S -> .)
    RCURLY          reduce using rule 2 (S -> .)
    PRINT           shift and go to state 3
    VARTYPE         shift and go to state 4
    NAME            shift and go to state 5
    LIST            shift and go to state 6
    IF              shift and go to state 7
    DO              shift and go to state 8

    stmt                           shift and go to state 2
    S                              shift and go to state 9

state 3

    (4) stmt -> PRINT . exp COMMA exp SEMICOL
    (5) stmt -> PRINT . exp SEMICOL
    (6) stmt -> PRINT . LPAREN exp RPAREN SEMICOL
    (3) exp -> . LPAREN exp RPAREN
    (10) exp -> . FLOAT
    (11) exp -> . INT
    (12) exp -> . BOOL
    (13) exp -> . CHAR
    (16) exp -> . NAME LSQB INT RSQB
    (17) exp -> . NAME POP LPAREN INT RPAREN
    (18) exp -> . NAME INDEX LPAREN INT RPAREN
    (19) exp -> . NAME SLICE LPAREN INT COMMA INT RPAREN
    (21) exp -> . NAME
    (22) exp -> . NOT exp
    (23) exp -> . exp PLUS exp
    (24) exp -> . exp MINUS exp
    (25) exp -> . exp MULTIPLICATION exp
    (26) exp -> . exp DIVISION exp
    (27) exp -> . exp MODULO exp
    (28) exp -> . exp GREATERTHAN exp
    (29) exp -> . exp LESSTHAN exp
    (30) exp -> . exp GREATERTHANOREQUALTO exp
    (31) exp -> . exp LESSTHANOREQUALTO exp
    (32) exp -> . exp EQUALTO exp
    (33) exp -> . exp NOTEQUALTO exp
    (34) exp -> . exp COMMA exp
    (35) exp -> . exp AND exp
    (36) exp -> . exp OR exp
    (37) exp -> . exp POW exp
    (38) exp -> . STRING
    (39) exp -> . MINUS exp

    LPAREN          shift and go to state 11
    FLOAT           shift and go to state 12
    INT             shift and go to state 13
    BOOL            shift and go to state 14
    CHAR            shift and go to state 15
    NAME            shift and go to state 16
    NOT             shift and go to state 17
    STRING          shift and go to state 19
    MINUS           shift and go to state 18

    exp                            shift and go to state 10

state 4

    (7) stmt -> VARTYPE . NAME ASSIGN exp SEMICOL
    (8) stmt -> VARTYPE . NAME ASSIGN stmt SEMICOL

    NAME            shift and go to state 20


state 5

    (9) stmt -> NAME . ASSIGN exp SEMICOL
    (14) stmt -> NAME . INCREMENT SEMICOL
    (15) stmt -> NAME . DECREMENT SEMICOL
    (20) stmt -> NAME . PUSH LPAREN exp RPAREN SEMICOL

    ASSIGN          shift and go to state 21
    INCREMENT       shift and go to state 22
    DECREMENT       shift and go to state 23
    PUSH            shift and go to state 24


state 6

    (40) stmt -> LIST . NAME ASSIGN LSQB exp RSQB SEMICOL
    (41) stmt -> LIST . NAME ASSIGN LSQB RSQB SEMICOL

    NAME            shift and go to state 25


state 7

    (42) stmt -> IF . LPAREN exp RPAREN LCURLY S RCURLY block

    LPAREN          shift and go to state 26


state 8

    (46) stmt -> DO . LCURLY S RCURLY block_w

    LCURLY          shift and go to state 27


state 9

    (1) S -> stmt S .

    $end            reduce using rule 1 (S -> stmt S .)
    RCURLY          reduce using rule 1 (S -> stmt S .)


state 10

    (4) stmt -> PRINT exp . COMMA exp SEMICOL
    (5) stmt -> PRINT exp . SEMICOL
    (23) exp -> exp . PLUS exp
    (24) exp -> exp . MINUS exp
    (25) exp -> exp . MULTIPLICATION exp
    (26) exp -> exp . DIVISION exp
    (27) exp -> exp . MODULO exp
    (28) exp -> exp . GREATERTHAN exp
    (29) exp -> exp . LESSTHAN exp
    (30) exp -> exp . GREATERTHANOREQUALTO exp
    (31) exp -> exp . LESSTHANOREQUALTO exp
    (32) exp -> exp . EQUALTO exp
    (33) exp -> exp . NOTEQUALTO exp
    (34) exp -> exp . COMMA exp
    (35) exp -> exp . AND exp
    (36) exp -> exp . OR exp
    (37) exp -> exp . POW exp

    COMMA           shift and go to state 28
    SEMICOL         shift and go to state 29
    PLUS            shift and go to state 30
    MINUS           shift and go to state 31
    MULTIPLICATION  shift and go to state 32
    DIVISION        shift and go to state 33
    MODULO          shift and go to state 34
    GREATERTHAN     shift and go to state 35
    LESSTHAN        shift and go to state 36
    GREATERTHANOREQUALTO shift and go to state 37
    LESSTHANOREQUALTO shift and go to state 38
    EQUALTO         shift and go to state 39
    NOTEQUALTO      shift and go to state 40
    AND             shift and go to state 41
    OR              shift and go to state 42
    POW             shift and go to state 43


state 11

    (6) stmt -> PRINT LPAREN . exp RPAREN SEMICOL
    (3) exp -> LPAREN . exp RPAREN
    (3) exp -> . LPAREN exp RPAREN
    (10) exp -> . FLOAT
    (11) exp -> . INT
    (12) exp -> . BOOL
    (13) exp -> . CHAR
    (16) exp -> . NAME LSQB INT RSQB
    (17) exp -> . NAME POP LPAREN INT RPAREN
    (18) exp -> . NAME INDEX LPAREN INT RPAREN
    (19) exp -> . NAME SLICE LPAREN INT COMMA INT RPAREN
    (21) exp -> . NAME
    (22) exp -> . NOT exp
    (23) exp -> . exp PLUS exp
    (24) exp -> . exp MINUS exp
    (25) exp -> . exp MULTIPLICATION exp
    (26) exp -> . exp DIVISION exp
    (27) exp -> . exp MODULO exp
    (28) exp -> . exp GREATERTHAN exp
    (29) exp -> . exp LESSTHAN exp
    (30) exp -> . exp GREATERTHANOREQUALTO exp
    (31) exp -> . exp LESSTHANOREQUALTO exp
    (32) exp -> . exp EQUALTO exp
    (33) exp -> . exp NOTEQUALTO exp
    (34) exp -> . exp COMMA exp
    (35) exp -> . exp AND exp
    (36) exp -> . exp OR exp
    (37) exp -> . exp POW exp
    (38) exp -> . STRING
    (39) exp -> . MINUS exp

    LPAREN          shift and go to state 44
    FLOAT           shift and go to state 12
    INT             shift and go to state 13
    BOOL            shift and go to state 14
    CHAR            shift and go to state 15
    NAME            shift and go to state 16
    NOT             shift and go to state 17
    STRING          shift and go to state 19
    MINUS           shift and go to state 18

    exp                            shift and go to state 45

state 12

    (10) exp -> FLOAT .

    COMMA           reduce using rule 10 (exp -> FLOAT .)
    SEMICOL         reduce using rule 10 (exp -> FLOAT .)
    PLUS            reduce using rule 10 (exp -> FLOAT .)
    MINUS           reduce using rule 10 (exp -> FLOAT .)
    MULTIPLICATION  reduce using rule 10 (exp -> FLOAT .)
    DIVISION        reduce using rule 10 (exp -> FLOAT .)
    MODULO          reduce using rule 10 (exp -> FLOAT .)
    GREATERTHAN     reduce using rule 10 (exp -> FLOAT .)
    LESSTHAN        reduce using rule 10 (exp -> FLOAT .)
    GREATERTHANOREQUALTO reduce using rule 10 (exp -> FLOAT .)
    LESSTHANOREQUALTO reduce using rule 10 (exp -> FLOAT .)
    EQUALTO         reduce using rule 10 (exp -> FLOAT .)
    NOTEQUALTO      reduce using rule 10 (exp -> FLOAT .)
    AND             reduce using rule 10 (exp -> FLOAT .)
    OR              reduce using rule 10 (exp -> FLOAT .)
    POW             reduce using rule 10 (exp -> FLOAT .)
    RPAREN          reduce using rule 10 (exp -> FLOAT .)
    RSQB            reduce using rule 10 (exp -> FLOAT .)


state 13

    (11) exp -> INT .

    COMMA           reduce using rule 11 (exp -> INT .)
    SEMICOL         reduce using rule 11 (exp -> INT .)
    PLUS            reduce using rule 11 (exp -> INT .)
    MINUS           reduce using rule 11 (exp -> INT .)
    MULTIPLICATION  reduce using rule 11 (exp -> INT .)
    DIVISION        reduce using rule 11 (exp -> INT .)
    MODULO          reduce using rule 11 (exp -> INT .)
    GREATERTHAN     reduce using rule 11 (exp -> INT .)
    LESSTHAN        reduce using rule 11 (exp -> INT .)
    GREATERTHANOREQUALTO reduce using rule 11 (exp -> INT .)
    LESSTHANOREQUALTO reduce using rule 11 (exp -> INT .)
    EQUALTO         reduce using rule 11 (exp -> INT .)
    NOTEQUALTO      reduce using rule 11 (exp -> INT .)
    AND             reduce using rule 11 (exp -> INT .)
    OR              reduce using rule 11 (exp -> INT .)
    POW             reduce using rule 11 (exp -> INT .)
    RPAREN          reduce using rule 11 (exp -> INT .)
    RSQB            reduce using rule 11 (exp -> INT .)


state 14

    (12) exp -> BOOL .

    COMMA           reduce using rule 12 (exp -> BOOL .)
    SEMICOL         reduce using rule 12 (exp -> BOOL .)
    PLUS            reduce using rule 12 (exp -> BOOL .)
    MINUS           reduce using rule 12 (exp -> BOOL .)
    MULTIPLICATION  reduce using rule 12 (exp -> BOOL .)
    DIVISION        reduce using rule 12 (exp -> BOOL .)
    MODULO          reduce using rule 12 (exp -> BOOL .)
    GREATERTHAN     reduce using rule 12 (exp -> BOOL .)
    LESSTHAN        reduce using rule 12 (exp -> BOOL .)
    GREATERTHANOREQUALTO reduce using rule 12 (exp -> BOOL .)
    LESSTHANOREQUALTO reduce using rule 12 (exp -> BOOL .)
    EQUALTO         reduce using rule 12 (exp -> BOOL .)
    NOTEQUALTO      reduce using rule 12 (exp -> BOOL .)
    AND             reduce using rule 12 (exp -> BOOL .)
    OR              reduce using rule 12 (exp -> BOOL .)
    POW             reduce using rule 12 (exp -> BOOL .)
    RPAREN          reduce using rule 12 (exp -> BOOL .)
    RSQB            reduce using rule 12 (exp -> BOOL .)


state 15

    (13) exp -> CHAR .

    COMMA           reduce using rule 13 (exp -> CHAR .)
    SEMICOL         reduce using rule 13 (exp -> CHAR .)
    PLUS            reduce using rule 13 (exp -> CHAR .)
    MINUS           reduce using rule 13 (exp -> CHAR .)
    MULTIPLICATION  reduce using rule 13 (exp -> CHAR .)
    DIVISION        reduce using rule 13 (exp -> CHAR .)
    MODULO          reduce using rule 13 (exp -> CHAR .)
    GREATERTHAN     reduce using rule 13 (exp -> CHAR .)
    LESSTHAN        reduce using rule 13 (exp -> CHAR .)
    GREATERTHANOREQUALTO reduce using rule 13 (exp -> CHAR .)
    LESSTHANOREQUALTO reduce using rule 13 (exp -> CHAR .)
    EQUALTO         reduce using rule 13 (exp -> CHAR .)
    NOTEQUALTO      reduce using rule 13 (exp -> CHAR .)
    AND             reduce using rule 13 (exp -> CHAR .)
    OR              reduce using rule 13 (exp -> CHAR .)
    POW             reduce using rule 13 (exp -> CHAR .)
    RPAREN          reduce using rule 13 (exp -> CHAR .)
    RSQB            reduce using rule 13 (exp -> CHAR .)


state 16

    (16) exp -> NAME . LSQB INT RSQB
    (17) exp -> NAME . POP LPAREN INT RPAREN
    (18) exp -> NAME . INDEX LPAREN INT RPAREN
    (19) exp -> NAME . SLICE LPAREN INT COMMA INT RPAREN
    (21) exp -> NAME .

    LSQB            shift and go to state 46
    POP             shift and go to state 47
    INDEX           shift and go to state 48
    SLICE           shift and go to state 49
    COMMA           reduce using rule 21 (exp -> NAME .)
    SEMICOL         reduce using rule 21 (exp -> NAME .)
    PLUS            reduce using rule 21 (exp -> NAME .)
    MINUS           reduce using rule 21 (exp -> NAME .)
    MULTIPLICATION  reduce using rule 21 (exp -> NAME .)
    DIVISION        reduce using rule 21 (exp -> NAME .)
    MODULO          reduce using rule 21 (exp -> NAME .)
    GREATERTHAN     reduce using rule 21 (exp -> NAME .)
    LESSTHAN        reduce using rule 21 (exp -> NAME .)
    GREATERTHANOREQUALTO reduce using rule 21 (exp -> NAME .)
    LESSTHANOREQUALTO reduce using rule 21 (exp -> NAME .)
    EQUALTO         reduce using rule 21 (exp -> NAME .)
    NOTEQUALTO      reduce using rule 21 (exp -> NAME .)
    AND             reduce using rule 21 (exp -> NAME .)
    OR              reduce using rule 21 (exp -> NAME .)
    POW             reduce using rule 21 (exp -> NAME .)
    RPAREN          reduce using rule 21 (exp -> NAME .)
    RSQB            reduce using rule 21 (exp -> NAME .)


state 17

    (22) exp -> NOT . exp
    (3) exp -> . LPAREN exp RPAREN
    (10) exp -> . FLOAT
    (11) exp -> . INT
    (12) exp -> . BOOL
    (13) exp -> . CHAR
    (16) exp -> . NAME LSQB INT RSQB
    (17) exp -> . NAME POP LPAREN INT RPAREN
    (18) exp -> . NAME INDEX LPAREN INT RPAREN
    (19) exp -> . NAME SLICE LPAREN INT COMMA INT RPAREN
    (21) exp -> . NAME
    (22) exp -> . NOT exp
    (23) exp -> . exp PLUS exp
    (24) exp -> . exp MINUS exp
    (25) exp -> . exp MULTIPLICATION exp
    (26) exp -> . exp DIVISION exp
    (27) exp -> . exp MODULO exp
    (28) exp -> . exp GREATERTHAN exp
    (29) exp -> . exp LESSTHAN exp
    (30) exp -> . exp GREATERTHANOREQUALTO exp
    (31) exp -> . exp LESSTHANOREQUALTO exp
    (32) exp -> . exp EQUALTO exp
    (33) exp -> . exp NOTEQUALTO exp
    (34) exp -> . exp COMMA exp
    (35) exp -> . exp AND exp
    (36) exp -> . exp OR exp
    (37) exp -> . exp POW exp
    (38) exp -> . STRING
    (39) exp -> . MINUS exp

    LPAREN          shift and go to state 44
    FLOAT           shift and go to state 12
    INT             shift and go to state 13
    BOOL            shift and go to state 14
    CHAR            shift and go to state 15
    NAME            shift and go to state 16
    NOT             shift and go to state 17
    STRING          shift and go to state 19
    MINUS           shift and go to state 18

    exp                            shift and go to state 50

state 18

    (39) exp -> MINUS . exp
    (3) exp -> . LPAREN exp RPAREN
    (10) exp -> . FLOAT
    (11) exp -> . INT
    (12) exp -> . BOOL
    (13) exp -> . CHAR
    (16) exp -> . NAME LSQB INT RSQB
    (17) exp -> . NAME POP LPAREN INT RPAREN
    (18) exp -> . NAME INDEX LPAREN INT RPAREN
    (19) exp -> . NAME SLICE LPAREN INT COMMA INT RPAREN
    (21) exp -> . NAME
    (22) exp -> . NOT exp
    (23) exp -> . exp PLUS exp
    (24) exp -> . exp MINUS exp
    (25) exp -> . exp MULTIPLICATION exp
    (26) exp -> . exp DIVISION exp
    (27) exp -> . exp MODULO exp
    (28) exp -> . exp GREATERTHAN exp
    (29) exp -> . exp LESSTHAN exp
    (30) exp -> . exp GREATERTHANOREQUALTO exp
    (31) exp -> . exp LESSTHANOREQUALTO exp
    (32) exp -> . exp EQUALTO exp
    (33) exp -> . exp NOTEQUALTO exp
    (34) exp -> . exp COMMA exp
    (35) exp -> . exp AND exp
    (36) exp -> . exp OR exp
    (37) exp -> . exp POW exp
    (38) exp -> . STRING
    (39) exp -> . MINUS exp

    LPAREN          shift and go to state 44
    FLOAT           shift and go to state 12
    INT             shift and go to state 13
    BOOL            shift and go to state 14
    CHAR            shift and go to state 15
    NAME            shift and go to state 16
    NOT             shift and go to state 17
    STRING          shift and go to state 19
    MINUS           shift and go to state 18

    exp                            shift and go to state 51

state 19

    (38) exp -> STRING .

    COMMA           reduce using rule 38 (exp -> STRING .)
    SEMICOL         reduce using rule 38 (exp -> STRING .)
    PLUS            reduce using rule 38 (exp -> STRING .)
    MINUS           reduce using rule 38 (exp -> STRING .)
    MULTIPLICATION  reduce using rule 38 (exp -> STRING .)
    DIVISION        reduce using rule 38 (exp -> STRING .)
    MODULO          reduce using rule 38 (exp -> STRING .)
    GREATERTHAN     reduce using rule 38 (exp -> STRING .)
    LESSTHAN        reduce using rule 38 (exp -> STRING .)
    GREATERTHANOREQUALTO reduce using rule 38 (exp -> STRING .)
    LESSTHANOREQUALTO reduce using rule 38 (exp -> STRING .)
    EQUALTO         reduce using rule 38 (exp -> STRING .)
    NOTEQUALTO      reduce using rule 38 (exp -> STRING .)
    AND             reduce using rule 38 (exp -> STRING .)
    OR              reduce using rule 38 (exp -> STRING .)
    POW             reduce using rule 38 (exp -> STRING .)
    RPAREN          reduce using rule 38 (exp -> STRING .)
    RSQB            reduce using rule 38 (exp -> STRING .)


state 20

    (7) stmt -> VARTYPE NAME . ASSIGN exp SEMICOL
    (8) stmt -> VARTYPE NAME . ASSIGN stmt SEMICOL

    ASSIGN          shift and go to state 52


state 21

    (9) stmt -> NAME ASSIGN . exp SEMICOL
    (3) exp -> . LPAREN exp RPAREN
    (10) exp -> . FLOAT
    (11) exp -> . INT
    (12) exp -> . BOOL
    (13) exp -> . CHAR
    (16) exp -> . NAME LSQB INT RSQB
    (17) exp -> . NAME POP LPAREN INT RPAREN
    (18) exp -> . NAME INDEX LPAREN INT RPAREN
    (19) exp -> . NAME SLICE LPAREN INT COMMA INT RPAREN
    (21) exp -> . NAME
    (22) exp -> . NOT exp
    (23) exp -> . exp PLUS exp
    (24) exp -> . exp MINUS exp
    (25) exp -> . exp MULTIPLICATION exp
    (26) exp -> . exp DIVISION exp
    (27) exp -> . exp MODULO exp
    (28) exp -> . exp GREATERTHAN exp
    (29) exp -> . exp LESSTHAN exp
    (30) exp -> . exp GREATERTHANOREQUALTO exp
    (31) exp -> . exp LESSTHANOREQUALTO exp
    (32) exp -> . exp EQUALTO exp
    (33) exp -> . exp NOTEQUALTO exp
    (34) exp -> . exp COMMA exp
    (35) exp -> . exp AND exp
    (36) exp -> . exp OR exp
    (37) exp -> . exp POW exp
    (38) exp -> . STRING
    (39) exp -> . MINUS exp

    LPAREN          shift and go to state 44
    FLOAT           shift and go to state 12
    INT             shift and go to state 13
    BOOL            shift and go to state 14
    CHAR            shift and go to state 15
    NAME            shift and go to state 16
    NOT             shift and go to state 17
    STRING          shift and go to state 19
    MINUS           shift and go to state 18

    exp                            shift and go to state 53

state 22

    (14) stmt -> NAME INCREMENT . SEMICOL

    SEMICOL         shift and go to state 54


state 23

    (15) stmt -> NAME DECREMENT . SEMICOL

    SEMICOL         shift and go to state 55


state 24

    (20) stmt -> NAME PUSH . LPAREN exp RPAREN SEMICOL

    LPAREN          shift and go to state 56


state 25

    (40) stmt -> LIST NAME . ASSIGN LSQB exp RSQB SEMICOL
    (41) stmt -> LIST NAME . ASSIGN LSQB RSQB SEMICOL

    ASSIGN          shift and go to state 57


state 26

    (42) stmt -> IF LPAREN . exp RPAREN LCURLY S RCURLY block
    (3) exp -> . LPAREN exp RPAREN
    (10) exp -> . FLOAT
    (11) exp -> . INT
    (12) exp -> . BOOL
    (13) exp -> . CHAR
    (16) exp -> . NAME LSQB INT RSQB
    (17) exp -> . NAME POP LPAREN INT RPAREN
    (18) exp -> . NAME INDEX LPAREN INT RPAREN
    (19) exp -> . NAME SLICE LPAREN INT COMMA INT RPAREN
    (21) exp -> . NAME
    (22) exp -> . NOT exp
    (23) exp -> . exp PLUS exp
    (24) exp -> . exp MINUS exp
    (25) exp -> . exp MULTIPLICATION exp
    (26) exp -> . exp DIVISION exp
    (27) exp -> . exp MODULO exp
    (28) exp -> . exp GREATERTHAN exp
    (29) exp -> . exp LESSTHAN exp
    (30) exp -> . exp GREATERTHANOREQUALTO exp
    (31) exp -> . exp LESSTHANOREQUALTO exp
    (32) exp -> . exp EQUALTO exp
    (33) exp -> . exp NOTEQUALTO exp
    (34) exp -> . exp COMMA exp
    (35) exp -> . exp AND exp
    (36) exp -> . exp OR exp
    (37) exp -> . exp POW exp
    (38) exp -> . STRING
    (39) exp -> . MINUS exp

    LPAREN          shift and go to state 44
    FLOAT           shift and go to state 12
    INT             shift and go to state 13
    BOOL            shift and go to state 14
    CHAR            shift and go to state 15
    NAME            shift and go to state 16
    NOT             shift and go to state 17
    STRING          shift and go to state 19
    MINUS           shift and go to state 18

    exp                            shift and go to state 58

state 27

    (46) stmt -> DO LCURLY . S RCURLY block_w
    (1) S -> . stmt S
    (2) S -> .
    (4) stmt -> . PRINT exp COMMA exp SEMICOL
    (5) stmt -> . PRINT exp SEMICOL
    (6) stmt -> . PRINT LPAREN exp RPAREN SEMICOL
    (7) stmt -> . VARTYPE NAME ASSIGN exp SEMICOL
    (8) stmt -> . VARTYPE NAME ASSIGN stmt SEMICOL
    (9) stmt -> . NAME ASSIGN exp SEMICOL
    (14) stmt -> . NAME INCREMENT SEMICOL
    (15) stmt -> . NAME DECREMENT SEMICOL
    (20) stmt -> . NAME PUSH LPAREN exp RPAREN SEMICOL
    (40) stmt -> . LIST NAME ASSIGN LSQB exp RSQB SEMICOL
    (41) stmt -> . LIST NAME ASSIGN LSQB RSQB SEMICOL
    (42) stmt -> . IF LPAREN exp RPAREN LCURLY S RCURLY block
    (46) stmt -> . DO LCURLY S RCURLY block_w

    RCURLY          reduce using rule 2 (S -> .)
    PRINT           shift and go to state 3
    VARTYPE         shift and go to state 4
    NAME            shift and go to state 5
    LIST            shift and go to state 6
    IF              shift and go to state 7
    DO              shift and go to state 8

    S                              shift and go to state 59
    stmt                           shift and go to state 2

state 28

    (4) stmt -> PRINT exp COMMA . exp SEMICOL
    (34) exp -> exp COMMA . exp
    (3) exp -> . LPAREN exp RPAREN
    (10) exp -> . FLOAT
    (11) exp -> . INT
    (12) exp -> . BOOL
    (13) exp -> . CHAR
    (16) exp -> . NAME LSQB INT RSQB
    (17) exp -> . NAME POP LPAREN INT RPAREN
    (18) exp -> . NAME INDEX LPAREN INT RPAREN
    (19) exp -> . NAME SLICE LPAREN INT COMMA INT RPAREN
    (21) exp -> . NAME
    (22) exp -> . NOT exp
    (23) exp -> . exp PLUS exp
    (24) exp -> . exp MINUS exp
    (25) exp -> . exp MULTIPLICATION exp
    (26) exp -> . exp DIVISION exp
    (27) exp -> . exp MODULO exp
    (28) exp -> . exp GREATERTHAN exp
    (29) exp -> . exp LESSTHAN exp
    (30) exp -> . exp GREATERTHANOREQUALTO exp
    (31) exp -> . exp LESSTHANOREQUALTO exp
    (32) exp -> . exp EQUALTO exp
    (33) exp -> . exp NOTEQUALTO exp
    (34) exp -> . exp COMMA exp
    (35) exp -> . exp AND exp
    (36) exp -> . exp OR exp
    (37) exp -> . exp POW exp
    (38) exp -> . STRING
    (39) exp -> . MINUS exp

    LPAREN          shift and go to state 44
    FLOAT           shift and go to state 12
    INT             shift and go to state 13
    BOOL            shift and go to state 14
    CHAR            shift and go to state 15
    NAME            shift and go to state 16
    NOT             shift and go to state 17
    STRING          shift and go to state 19
    MINUS           shift and go to state 18

    exp                            shift and go to state 60

state 29

    (5) stmt -> PRINT exp SEMICOL .

    PRINT           reduce using rule 5 (stmt -> PRINT exp SEMICOL .)
    VARTYPE         reduce using rule 5 (stmt -> PRINT exp SEMICOL .)
    NAME            reduce using rule 5 (stmt -> PRINT exp SEMICOL .)
    LIST            reduce using rule 5 (stmt -> PRINT exp SEMICOL .)
    IF              reduce using rule 5 (stmt -> PRINT exp SEMICOL .)
    DO              reduce using rule 5 (stmt -> PRINT exp SEMICOL .)
    $end            reduce using rule 5 (stmt -> PRINT exp SEMICOL .)
    RCURLY          reduce using rule 5 (stmt -> PRINT exp SEMICOL .)
    SEMICOL         reduce using rule 5 (stmt -> PRINT exp SEMICOL .)


state 30

    (23) exp -> exp PLUS . exp
    (3) exp -> . LPAREN exp RPAREN
    (10) exp -> . FLOAT
    (11) exp -> . INT
    (12) exp -> . BOOL
    (13) exp -> . CHAR
    (16) exp -> . NAME LSQB INT RSQB
    (17) exp -> . NAME POP LPAREN INT RPAREN
    (18) exp -> . NAME INDEX LPAREN INT RPAREN
    (19) exp -> . NAME SLICE LPAREN INT COMMA INT RPAREN
    (21) exp -> . NAME
    (22) exp -> . NOT exp
    (23) exp -> . exp PLUS exp
    (24) exp -> . exp MINUS exp
    (25) exp -> . exp MULTIPLICATION exp
    (26) exp -> . exp DIVISION exp
    (27) exp -> . exp MODULO exp
    (28) exp -> . exp GREATERTHAN exp
    (29) exp -> . exp LESSTHAN exp
    (30) exp -> . exp GREATERTHANOREQUALTO exp
    (31) exp -> . exp LESSTHANOREQUALTO exp
    (32) exp -> . exp EQUALTO exp
    (33) exp -> . exp NOTEQUALTO exp
    (34) exp -> . exp COMMA exp
    (35) exp -> . exp AND exp
    (36) exp -> . exp OR exp
    (37) exp -> . exp POW exp
    (38) exp -> . STRING
    (39) exp -> . MINUS exp

    LPAREN          shift and go to state 44
    FLOAT           shift and go to state 12
    INT             shift and go to state 13
    BOOL            shift and go to state 14
    CHAR            shift and go to state 15
    NAME            shift and go to state 16
    NOT             shift and go to state 17
    STRING          shift and go to state 19
    MINUS           shift and go to state 18

    exp                            shift and go to state 61

state 31

    (24) exp -> exp MINUS . exp
    (3) exp -> . LPAREN exp RPAREN
    (10) exp -> . FLOAT
    (11) exp -> . INT
    (12) exp -> . BOOL
    (13) exp -> . CHAR
    (16) exp -> . NAME LSQB INT RSQB
    (17) exp -> . NAME POP LPAREN INT RPAREN
    (18) exp -> . NAME INDEX LPAREN INT RPAREN
    (19) exp -> . NAME SLICE LPAREN INT COMMA INT RPAREN
    (21) exp -> . NAME
    (22) exp -> . NOT exp
    (23) exp -> . exp PLUS exp
    (24) exp -> . exp MINUS exp
    (25) exp -> . exp MULTIPLICATION exp
    (26) exp -> . exp DIVISION exp
    (27) exp -> . exp MODULO exp
    (28) exp -> . exp GREATERTHAN exp
    (29) exp -> . exp LESSTHAN exp
    (30) exp -> . exp GREATERTHANOREQUALTO exp
    (31) exp -> . exp LESSTHANOREQUALTO exp
    (32) exp -> . exp EQUALTO exp
    (33) exp -> . exp NOTEQUALTO exp
    (34) exp -> . exp COMMA exp
    (35) exp -> . exp AND exp
    (36) exp -> . exp OR exp
    (37) exp -> . exp POW exp
    (38) exp -> . STRING
    (39) exp -> . MINUS exp

    LPAREN          shift and go to state 44
    FLOAT           shift and go to state 12
    INT             shift and go to state 13
    BOOL            shift and go to state 14
    CHAR            shift and go to state 15
    NAME            shift and go to state 16
    NOT             shift and go to state 17
    STRING          shift and go to state 19
    MINUS           shift and go to state 18

    exp                            shift and go to state 62

state 32

    (25) exp -> exp MULTIPLICATION . exp
    (3) exp -> . LPAREN exp RPAREN
    (10) exp -> . FLOAT
    (11) exp -> . INT
    (12) exp -> . BOOL
    (13) exp -> . CHAR
    (16) exp -> . NAME LSQB INT RSQB
    (17) exp -> . NAME POP LPAREN INT RPAREN
    (18) exp -> . NAME INDEX LPAREN INT RPAREN
    (19) exp -> . NAME SLICE LPAREN INT COMMA INT RPAREN
    (21) exp -> . NAME
    (22) exp -> . NOT exp
    (23) exp -> . exp PLUS exp
    (24) exp -> . exp MINUS exp
    (25) exp -> . exp MULTIPLICATION exp
    (26) exp -> . exp DIVISION exp
    (27) exp -> . exp MODULO exp
    (28) exp -> . exp GREATERTHAN exp
    (29) exp -> . exp LESSTHAN exp
    (30) exp -> . exp GREATERTHANOREQUALTO exp
    (31) exp -> . exp LESSTHANOREQUALTO exp
    (32) exp -> . exp EQUALTO exp
    (33) exp -> . exp NOTEQUALTO exp
    (34) exp -> . exp COMMA exp
    (35) exp -> . exp AND exp
    (36) exp -> . exp OR exp
    (37) exp -> . exp POW exp
    (38) exp -> . STRING
    (39) exp -> . MINUS exp

    LPAREN          shift and go to state 44
    FLOAT           shift and go to state 12
    INT             shift and go to state 13
    BOOL            shift and go to state 14
    CHAR            shift and go to state 15
    NAME            shift and go to state 16
    NOT             shift and go to state 17
    STRING          shift and go to state 19
    MINUS           shift and go to state 18

    exp                            shift and go to state 63

state 33

    (26) exp -> exp DIVISION . exp
    (3) exp -> . LPAREN exp RPAREN
    (10) exp -> . FLOAT
    (11) exp -> . INT
    (12) exp -> . BOOL
    (13) exp -> . CHAR
    (16) exp -> . NAME LSQB INT RSQB
    (17) exp -> . NAME POP LPAREN INT RPAREN
    (18) exp -> . NAME INDEX LPAREN INT RPAREN
    (19) exp -> . NAME SLICE LPAREN INT COMMA INT RPAREN
    (21) exp -> . NAME
    (22) exp -> . NOT exp
    (23) exp -> . exp PLUS exp
    (24) exp -> . exp MINUS exp
    (25) exp -> . exp MULTIPLICATION exp
    (26) exp -> . exp DIVISION exp
    (27) exp -> . exp MODULO exp
    (28) exp -> . exp GREATERTHAN exp
    (29) exp -> . exp LESSTHAN exp
    (30) exp -> . exp GREATERTHANOREQUALTO exp
    (31) exp -> . exp LESSTHANOREQUALTO exp
    (32) exp -> . exp EQUALTO exp
    (33) exp -> . exp NOTEQUALTO exp
    (34) exp -> . exp COMMA exp
    (35) exp -> . exp AND exp
    (36) exp -> . exp OR exp
    (37) exp -> . exp POW exp
    (38) exp -> . STRING
    (39) exp -> . MINUS exp

    LPAREN          shift and go to state 44
    FLOAT           shift and go to state 12
    INT             shift and go to state 13
    BOOL            shift and go to state 14
    CHAR            shift and go to state 15
    NAME            shift and go to state 16
    NOT             shift and go to state 17
    STRING          shift and go to state 19
    MINUS           shift and go to state 18

    exp                            shift and go to state 64

state 34

    (27) exp -> exp MODULO . exp
    (3) exp -> . LPAREN exp RPAREN
    (10) exp -> . FLOAT
    (11) exp -> . INT
    (12) exp -> . BOOL
    (13) exp -> . CHAR
    (16) exp -> . NAME LSQB INT RSQB
    (17) exp -> . NAME POP LPAREN INT RPAREN
    (18) exp -> . NAME INDEX LPAREN INT RPAREN
    (19) exp -> . NAME SLICE LPAREN INT COMMA INT RPAREN
    (21) exp -> . NAME
    (22) exp -> . NOT exp
    (23) exp -> . exp PLUS exp
    (24) exp -> . exp MINUS exp
    (25) exp -> . exp MULTIPLICATION exp
    (26) exp -> . exp DIVISION exp
    (27) exp -> . exp MODULO exp
    (28) exp -> . exp GREATERTHAN exp
    (29) exp -> . exp LESSTHAN exp
    (30) exp -> . exp GREATERTHANOREQUALTO exp
    (31) exp -> . exp LESSTHANOREQUALTO exp
    (32) exp -> . exp EQUALTO exp
    (33) exp -> . exp NOTEQUALTO exp
    (34) exp -> . exp COMMA exp
    (35) exp -> . exp AND exp
    (36) exp -> . exp OR exp
    (37) exp -> . exp POW exp
    (38) exp -> . STRING
    (39) exp -> . MINUS exp

    LPAREN          shift and go to state 44
    FLOAT           shift and go to state 12
    INT             shift and go to state 13
    BOOL            shift and go to state 14
    CHAR            shift and go to state 15
    NAME            shift and go to state 16
    NOT             shift and go to state 17
    STRING          shift and go to state 19
    MINUS           shift and go to state 18

    exp                            shift and go to state 65

state 35

    (28) exp -> exp GREATERTHAN . exp
    (3) exp -> . LPAREN exp RPAREN
    (10) exp -> . FLOAT
    (11) exp -> . INT
    (12) exp -> . BOOL
    (13) exp -> . CHAR
    (16) exp -> . NAME LSQB INT RSQB
    (17) exp -> . NAME POP LPAREN INT RPAREN
    (18) exp -> . NAME INDEX LPAREN INT RPAREN
    (19) exp -> . NAME SLICE LPAREN INT COMMA INT RPAREN
    (21) exp -> . NAME
    (22) exp -> . NOT exp
    (23) exp -> . exp PLUS exp
    (24) exp -> . exp MINUS exp
    (25) exp -> . exp MULTIPLICATION exp
    (26) exp -> . exp DIVISION exp
    (27) exp -> . exp MODULO exp
    (28) exp -> . exp GREATERTHAN exp
    (29) exp -> . exp LESSTHAN exp
    (30) exp -> . exp GREATERTHANOREQUALTO exp
    (31) exp -> . exp LESSTHANOREQUALTO exp
    (32) exp -> . exp EQUALTO exp
    (33) exp -> . exp NOTEQUALTO exp
    (34) exp -> . exp COMMA exp
    (35) exp -> . exp AND exp
    (36) exp -> . exp OR exp
    (37) exp -> . exp POW exp
    (38) exp -> . STRING
    (39) exp -> . MINUS exp

    LPAREN          shift and go to state 44
    FLOAT           shift and go to state 12
    INT             shift and go to state 13
    BOOL            shift and go to state 14
    CHAR            shift and go to state 15
    NAME            shift and go to state 16
    NOT             shift and go to state 17
    STRING          shift and go to state 19
    MINUS           shift and go to state 18

    exp                            shift and go to state 66

state 36

    (29) exp -> exp LESSTHAN . exp
    (3) exp -> . LPAREN exp RPAREN
    (10) exp -> . FLOAT
    (11) exp -> . INT
    (12) exp -> . BOOL
    (13) exp -> . CHAR
    (16) exp -> . NAME LSQB INT RSQB
    (17) exp -> . NAME POP LPAREN INT RPAREN
    (18) exp -> . NAME INDEX LPAREN INT RPAREN
    (19) exp -> . NAME SLICE LPAREN INT COMMA INT RPAREN
    (21) exp -> . NAME
    (22) exp -> . NOT exp
    (23) exp -> . exp PLUS exp
    (24) exp -> . exp MINUS exp
    (25) exp -> . exp MULTIPLICATION exp
    (26) exp -> . exp DIVISION exp
    (27) exp -> . exp MODULO exp
    (28) exp -> . exp GREATERTHAN exp
    (29) exp -> . exp LESSTHAN exp
    (30) exp -> . exp GREATERTHANOREQUALTO exp
    (31) exp -> . exp LESSTHANOREQUALTO exp
    (32) exp -> . exp EQUALTO exp
    (33) exp -> . exp NOTEQUALTO exp
    (34) exp -> . exp COMMA exp
    (35) exp -> . exp AND exp
    (36) exp -> . exp OR exp
    (37) exp -> . exp POW exp
    (38) exp -> . STRING
    (39) exp -> . MINUS exp

    LPAREN          shift and go to state 44
    FLOAT           shift and go to state 12
    INT             shift and go to state 13
    BOOL            shift and go to state 14
    CHAR            shift and go to state 15
    NAME            shift and go to state 16
    NOT             shift and go to state 17
    STRING          shift and go to state 19
    MINUS           shift and go to state 18

    exp                            shift and go to state 67

state 37

    (30) exp -> exp GREATERTHANOREQUALTO . exp
    (3) exp -> . LPAREN exp RPAREN
    (10) exp -> . FLOAT
    (11) exp -> . INT
    (12) exp -> . BOOL
    (13) exp -> . CHAR
    (16) exp -> . NAME LSQB INT RSQB
    (17) exp -> . NAME POP LPAREN INT RPAREN
    (18) exp -> . NAME INDEX LPAREN INT RPAREN
    (19) exp -> . NAME SLICE LPAREN INT COMMA INT RPAREN
    (21) exp -> . NAME
    (22) exp -> . NOT exp
    (23) exp -> . exp PLUS exp
    (24) exp -> . exp MINUS exp
    (25) exp -> . exp MULTIPLICATION exp
    (26) exp -> . exp DIVISION exp
    (27) exp -> . exp MODULO exp
    (28) exp -> . exp GREATERTHAN exp
    (29) exp -> . exp LESSTHAN exp
    (30) exp -> . exp GREATERTHANOREQUALTO exp
    (31) exp -> . exp LESSTHANOREQUALTO exp
    (32) exp -> . exp EQUALTO exp
    (33) exp -> . exp NOTEQUALTO exp
    (34) exp -> . exp COMMA exp
    (35) exp -> . exp AND exp
    (36) exp -> . exp OR exp
    (37) exp -> . exp POW exp
    (38) exp -> . STRING
    (39) exp -> . MINUS exp

    LPAREN          shift and go to state 44
    FLOAT           shift and go to state 12
    INT             shift and go to state 13
    BOOL            shift and go to state 14
    CHAR            shift and go to state 15
    NAME            shift and go to state 16
    NOT             shift and go to state 17
    STRING          shift and go to state 19
    MINUS           shift and go to state 18

    exp                            shift and go to state 68

state 38

    (31) exp -> exp LESSTHANOREQUALTO . exp
    (3) exp -> . LPAREN exp RPAREN
    (10) exp -> . FLOAT
    (11) exp -> . INT
    (12) exp -> . BOOL
    (13) exp -> . CHAR
    (16) exp -> . NAME LSQB INT RSQB
    (17) exp -> . NAME POP LPAREN INT RPAREN
    (18) exp -> . NAME INDEX LPAREN INT RPAREN
    (19) exp -> . NAME SLICE LPAREN INT COMMA INT RPAREN
    (21) exp -> . NAME
    (22) exp -> . NOT exp
    (23) exp -> . exp PLUS exp
    (24) exp -> . exp MINUS exp
    (25) exp -> . exp MULTIPLICATION exp
    (26) exp -> . exp DIVISION exp
    (27) exp -> . exp MODULO exp
    (28) exp -> . exp GREATERTHAN exp
    (29) exp -> . exp LESSTHAN exp
    (30) exp -> . exp GREATERTHANOREQUALTO exp
    (31) exp -> . exp LESSTHANOREQUALTO exp
    (32) exp -> . exp EQUALTO exp
    (33) exp -> . exp NOTEQUALTO exp
    (34) exp -> . exp COMMA exp
    (35) exp -> . exp AND exp
    (36) exp -> . exp OR exp
    (37) exp -> . exp POW exp
    (38) exp -> . STRING
    (39) exp -> . MINUS exp

    LPAREN          shift and go to state 44
    FLOAT           shift and go to state 12
    INT             shift and go to state 13
    BOOL            shift and go to state 14
    CHAR            shift and go to state 15
    NAME            shift and go to state 16
    NOT             shift and go to state 17
    STRING          shift and go to state 19
    MINUS           shift and go to state 18

    exp                            shift and go to state 69

state 39

    (32) exp -> exp EQUALTO . exp
    (3) exp -> . LPAREN exp RPAREN
    (10) exp -> . FLOAT
    (11) exp -> . INT
    (12) exp -> . BOOL
    (13) exp -> . CHAR
    (16) exp -> . NAME LSQB INT RSQB
    (17) exp -> . NAME POP LPAREN INT RPAREN
    (18) exp -> . NAME INDEX LPAREN INT RPAREN
    (19) exp -> . NAME SLICE LPAREN INT COMMA INT RPAREN
    (21) exp -> . NAME
    (22) exp -> . NOT exp
    (23) exp -> . exp PLUS exp
    (24) exp -> . exp MINUS exp
    (25) exp -> . exp MULTIPLICATION exp
    (26) exp -> . exp DIVISION exp
    (27) exp -> . exp MODULO exp
    (28) exp -> . exp GREATERTHAN exp
    (29) exp -> . exp LESSTHAN exp
    (30) exp -> . exp GREATERTHANOREQUALTO exp
    (31) exp -> . exp LESSTHANOREQUALTO exp
    (32) exp -> . exp EQUALTO exp
    (33) exp -> . exp NOTEQUALTO exp
    (34) exp -> . exp COMMA exp
    (35) exp -> . exp AND exp
    (36) exp -> . exp OR exp
    (37) exp -> . exp POW exp
    (38) exp -> . STRING
    (39) exp -> . MINUS exp

    LPAREN          shift and go to state 44
    FLOAT           shift and go to state 12
    INT             shift and go to state 13
    BOOL            shift and go to state 14
    CHAR            shift and go to state 15
    NAME            shift and go to state 16
    NOT             shift and go to state 17
    STRING          shift and go to state 19
    MINUS           shift and go to state 18

    exp                            shift and go to state 70

state 40

    (33) exp -> exp NOTEQUALTO . exp
    (3) exp -> . LPAREN exp RPAREN
    (10) exp -> . FLOAT
    (11) exp -> . INT
    (12) exp -> . BOOL
    (13) exp -> . CHAR
    (16) exp -> . NAME LSQB INT RSQB
    (17) exp -> . NAME POP LPAREN INT RPAREN
    (18) exp -> . NAME INDEX LPAREN INT RPAREN
    (19) exp -> . NAME SLICE LPAREN INT COMMA INT RPAREN
    (21) exp -> . NAME
    (22) exp -> . NOT exp
    (23) exp -> . exp PLUS exp
    (24) exp -> . exp MINUS exp
    (25) exp -> . exp MULTIPLICATION exp
    (26) exp -> . exp DIVISION exp
    (27) exp -> . exp MODULO exp
    (28) exp -> . exp GREATERTHAN exp
    (29) exp -> . exp LESSTHAN exp
    (30) exp -> . exp GREATERTHANOREQUALTO exp
    (31) exp -> . exp LESSTHANOREQUALTO exp
    (32) exp -> . exp EQUALTO exp
    (33) exp -> . exp NOTEQUALTO exp
    (34) exp -> . exp COMMA exp
    (35) exp -> . exp AND exp
    (36) exp -> . exp OR exp
    (37) exp -> . exp POW exp
    (38) exp -> . STRING
    (39) exp -> . MINUS exp

    LPAREN          shift and go to state 44
    FLOAT           shift and go to state 12
    INT             shift and go to state 13
    BOOL            shift and go to state 14
    CHAR            shift and go to state 15
    NAME            shift and go to state 16
    NOT             shift and go to state 17
    STRING          shift and go to state 19
    MINUS           shift and go to state 18

    exp                            shift and go to state 71

state 41

    (35) exp -> exp AND . exp
    (3) exp -> . LPAREN exp RPAREN
    (10) exp -> . FLOAT
    (11) exp -> . INT
    (12) exp -> . BOOL
    (13) exp -> . CHAR
    (16) exp -> . NAME LSQB INT RSQB
    (17) exp -> . NAME POP LPAREN INT RPAREN
    (18) exp -> . NAME INDEX LPAREN INT RPAREN
    (19) exp -> . NAME SLICE LPAREN INT COMMA INT RPAREN
    (21) exp -> . NAME
    (22) exp -> . NOT exp
    (23) exp -> . exp PLUS exp
    (24) exp -> . exp MINUS exp
    (25) exp -> . exp MULTIPLICATION exp
    (26) exp -> . exp DIVISION exp
    (27) exp -> . exp MODULO exp
    (28) exp -> . exp GREATERTHAN exp
    (29) exp -> . exp LESSTHAN exp
    (30) exp -> . exp GREATERTHANOREQUALTO exp
    (31) exp -> . exp LESSTHANOREQUALTO exp
    (32) exp -> . exp EQUALTO exp
    (33) exp -> . exp NOTEQUALTO exp
    (34) exp -> . exp COMMA exp
    (35) exp -> . exp AND exp
    (36) exp -> . exp OR exp
    (37) exp -> . exp POW exp
    (38) exp -> . STRING
    (39) exp -> . MINUS exp

    LPAREN          shift and go to state 44
    FLOAT           shift and go to state 12
    INT             shift and go to state 13
    BOOL            shift and go to state 14
    CHAR            shift and go to state 15
    NAME            shift and go to state 16
    NOT             shift and go to state 17
    STRING          shift and go to state 19
    MINUS           shift and go to state 18

    exp                            shift and go to state 72

state 42

    (36) exp -> exp OR . exp
    (3) exp -> . LPAREN exp RPAREN
    (10) exp -> . FLOAT
    (11) exp -> . INT
    (12) exp -> . BOOL
    (13) exp -> . CHAR
    (16) exp -> . NAME LSQB INT RSQB
    (17) exp -> . NAME POP LPAREN INT RPAREN
    (18) exp -> . NAME INDEX LPAREN INT RPAREN
    (19) exp -> . NAME SLICE LPAREN INT COMMA INT RPAREN
    (21) exp -> . NAME
    (22) exp -> . NOT exp
    (23) exp -> . exp PLUS exp
    (24) exp -> . exp MINUS exp
    (25) exp -> . exp MULTIPLICATION exp
    (26) exp -> . exp DIVISION exp
    (27) exp -> . exp MODULO exp
    (28) exp -> . exp GREATERTHAN exp
    (29) exp -> . exp LESSTHAN exp
    (30) exp -> . exp GREATERTHANOREQUALTO exp
    (31) exp -> . exp LESSTHANOREQUALTO exp
    (32) exp -> . exp EQUALTO exp
    (33) exp -> . exp NOTEQUALTO exp
    (34) exp -> . exp COMMA exp
    (35) exp -> . exp AND exp
    (36) exp -> . exp OR exp
    (37) exp -> . exp POW exp
    (38) exp -> . STRING
    (39) exp -> . MINUS exp

    LPAREN          shift and go to state 44
    FLOAT           shift and go to state 12
    INT             shift and go to state 13
    BOOL            shift and go to state 14
    CHAR            shift and go to state 15
    NAME            shift and go to state 16
    NOT             shift and go to state 17
    STRING          shift and go to state 19
    MINUS           shift and go to state 18

    exp                            shift and go to state 73

state 43

    (37) exp -> exp POW . exp
    (3) exp -> . LPAREN exp RPAREN
    (10) exp -> . FLOAT
    (11) exp -> . INT
    (12) exp -> . BOOL
    (13) exp -> . CHAR
    (16) exp -> . NAME LSQB INT RSQB
    (17) exp -> . NAME POP LPAREN INT RPAREN
    (18) exp -> . NAME INDEX LPAREN INT RPAREN
    (19) exp -> . NAME SLICE LPAREN INT COMMA INT RPAREN
    (21) exp -> . NAME
    (22) exp -> . NOT exp
    (23) exp -> . exp PLUS exp
    (24) exp -> . exp MINUS exp
    (25) exp -> . exp MULTIPLICATION exp
    (26) exp -> . exp DIVISION exp
    (27) exp -> . exp MODULO exp
    (28) exp -> . exp GREATERTHAN exp
    (29) exp -> . exp LESSTHAN exp
    (30) exp -> . exp GREATERTHANOREQUALTO exp
    (31) exp -> . exp LESSTHANOREQUALTO exp
    (32) exp -> . exp EQUALTO exp
    (33) exp -> . exp NOTEQUALTO exp
    (34) exp -> . exp COMMA exp
    (35) exp -> . exp AND exp
    (36) exp -> . exp OR exp
    (37) exp -> . exp POW exp
    (38) exp -> . STRING
    (39) exp -> . MINUS exp

    LPAREN          shift and go to state 44
    FLOAT           shift and go to state 12
    INT             shift and go to state 13
    BOOL            shift and go to state 14
    CHAR            shift and go to state 15
    NAME            shift and go to state 16
    NOT             shift and go to state 17
    STRING          shift and go to state 19
    MINUS           shift and go to state 18

    exp                            shift and go to state 74

state 44

    (3) exp -> LPAREN . exp RPAREN
    (3) exp -> . LPAREN exp RPAREN
    (10) exp -> . FLOAT
    (11) exp -> . INT
    (12) exp -> . BOOL
    (13) exp -> . CHAR
    (16) exp -> . NAME LSQB INT RSQB
    (17) exp -> . NAME POP LPAREN INT RPAREN
    (18) exp -> . NAME INDEX LPAREN INT RPAREN
    (19) exp -> . NAME SLICE LPAREN INT COMMA INT RPAREN
    (21) exp -> . NAME
    (22) exp -> . NOT exp
    (23) exp -> . exp PLUS exp
    (24) exp -> . exp MINUS exp
    (25) exp -> . exp MULTIPLICATION exp
    (26) exp -> . exp DIVISION exp
    (27) exp -> . exp MODULO exp
    (28) exp -> . exp GREATERTHAN exp
    (29) exp -> . exp LESSTHAN exp
    (30) exp -> . exp GREATERTHANOREQUALTO exp
    (31) exp -> . exp LESSTHANOREQUALTO exp
    (32) exp -> . exp EQUALTO exp
    (33) exp -> . exp NOTEQUALTO exp
    (34) exp -> . exp COMMA exp
    (35) exp -> . exp AND exp
    (36) exp -> . exp OR exp
    (37) exp -> . exp POW exp
    (38) exp -> . STRING
    (39) exp -> . MINUS exp

    LPAREN          shift and go to state 44
    FLOAT           shift and go to state 12
    INT             shift and go to state 13
    BOOL            shift and go to state 14
    CHAR            shift and go to state 15
    NAME            shift and go to state 16
    NOT             shift and go to state 17
    STRING          shift and go to state 19
    MINUS           shift and go to state 18

    exp                            shift and go to state 75

state 45

    (6) stmt -> PRINT LPAREN exp . RPAREN SEMICOL
    (3) exp -> LPAREN exp . RPAREN
    (23) exp -> exp . PLUS exp
    (24) exp -> exp . MINUS exp
    (25) exp -> exp . MULTIPLICATION exp
    (26) exp -> exp . DIVISION exp
    (27) exp -> exp . MODULO exp
    (28) exp -> exp . GREATERTHAN exp
    (29) exp -> exp . LESSTHAN exp
    (30) exp -> exp . GREATERTHANOREQUALTO exp
    (31) exp -> exp . LESSTHANOREQUALTO exp
    (32) exp -> exp . EQUALTO exp
    (33) exp -> exp . NOTEQUALTO exp
    (34) exp -> exp . COMMA exp
    (35) exp -> exp . AND exp
    (36) exp -> exp . OR exp
    (37) exp -> exp . POW exp

    RPAREN          shift and go to state 76
    PLUS            shift and go to state 30
    MINUS           shift and go to state 31
    MULTIPLICATION  shift and go to state 32
    DIVISION        shift and go to state 33
    MODULO          shift and go to state 34
    GREATERTHAN     shift and go to state 35
    LESSTHAN        shift and go to state 36
    GREATERTHANOREQUALTO shift and go to state 37
    LESSTHANOREQUALTO shift and go to state 38
    EQUALTO         shift and go to state 39
    NOTEQUALTO      shift and go to state 40
    COMMA           shift and go to state 77
    AND             shift and go to state 41
    OR              shift and go to state 42
    POW             shift and go to state 43


state 46

    (16) exp -> NAME LSQB . INT RSQB

    INT             shift and go to state 78


state 47

    (17) exp -> NAME POP . LPAREN INT RPAREN

    LPAREN          shift and go to state 79


state 48

    (18) exp -> NAME INDEX . LPAREN INT RPAREN

    LPAREN          shift and go to state 80


state 49

    (19) exp -> NAME SLICE . LPAREN INT COMMA INT RPAREN

    LPAREN          shift and go to state 81


state 50

    (22) exp -> NOT exp .
    (23) exp -> exp . PLUS exp
    (24) exp -> exp . MINUS exp
    (25) exp -> exp . MULTIPLICATION exp
    (26) exp -> exp . DIVISION exp
    (27) exp -> exp . MODULO exp
    (28) exp -> exp . GREATERTHAN exp
    (29) exp -> exp . LESSTHAN exp
    (30) exp -> exp . GREATERTHANOREQUALTO exp
    (31) exp -> exp . LESSTHANOREQUALTO exp
    (32) exp -> exp . EQUALTO exp
    (33) exp -> exp . NOTEQUALTO exp
    (34) exp -> exp . COMMA exp
    (35) exp -> exp . AND exp
    (36) exp -> exp . OR exp
    (37) exp -> exp . POW exp

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MULTIPLICATION resolved as shift
  ! shift/reduce conflict for DIVISION resolved as shift
  ! shift/reduce conflict for MODULO resolved as shift
  ! shift/reduce conflict for GREATERTHAN resolved as shift
  ! shift/reduce conflict for LESSTHAN resolved as shift
  ! shift/reduce conflict for GREATERTHANOREQUALTO resolved as shift
  ! shift/reduce conflict for LESSTHANOREQUALTO resolved as shift
  ! shift/reduce conflict for EQUALTO resolved as shift
  ! shift/reduce conflict for NOTEQUALTO resolved as shift
  ! shift/reduce conflict for COMMA resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for POW resolved as shift
    SEMICOL         reduce using rule 22 (exp -> NOT exp .)
    RPAREN          reduce using rule 22 (exp -> NOT exp .)
    RSQB            reduce using rule 22 (exp -> NOT exp .)
    PLUS            shift and go to state 30
    MINUS           shift and go to state 31
    MULTIPLICATION  shift and go to state 32
    DIVISION        shift and go to state 33
    MODULO          shift and go to state 34
    GREATERTHAN     shift and go to state 35
    LESSTHAN        shift and go to state 36
    GREATERTHANOREQUALTO shift and go to state 37
    LESSTHANOREQUALTO shift and go to state 38
    EQUALTO         shift and go to state 39
    NOTEQUALTO      shift and go to state 40
    COMMA           shift and go to state 77
    AND             shift and go to state 41
    OR              shift and go to state 42
    POW             shift and go to state 43

  ! COMMA           [ reduce using rule 22 (exp -> NOT exp .) ]
  ! PLUS            [ reduce using rule 22 (exp -> NOT exp .) ]
  ! MINUS           [ reduce using rule 22 (exp -> NOT exp .) ]
  ! MULTIPLICATION  [ reduce using rule 22 (exp -> NOT exp .) ]
  ! DIVISION        [ reduce using rule 22 (exp -> NOT exp .) ]
  ! MODULO          [ reduce using rule 22 (exp -> NOT exp .) ]
  ! GREATERTHAN     [ reduce using rule 22 (exp -> NOT exp .) ]
  ! LESSTHAN        [ reduce using rule 22 (exp -> NOT exp .) ]
  ! GREATERTHANOREQUALTO [ reduce using rule 22 (exp -> NOT exp .) ]
  ! LESSTHANOREQUALTO [ reduce using rule 22 (exp -> NOT exp .) ]
  ! EQUALTO         [ reduce using rule 22 (exp -> NOT exp .) ]
  ! NOTEQUALTO      [ reduce using rule 22 (exp -> NOT exp .) ]
  ! AND             [ reduce using rule 22 (exp -> NOT exp .) ]
  ! OR              [ reduce using rule 22 (exp -> NOT exp .) ]
  ! POW             [ reduce using rule 22 (exp -> NOT exp .) ]


state 51

    (39) exp -> MINUS exp .
    (23) exp -> exp . PLUS exp
    (24) exp -> exp . MINUS exp
    (25) exp -> exp . MULTIPLICATION exp
    (26) exp -> exp . DIVISION exp
    (27) exp -> exp . MODULO exp
    (28) exp -> exp . GREATERTHAN exp
    (29) exp -> exp . LESSTHAN exp
    (30) exp -> exp . GREATERTHANOREQUALTO exp
    (31) exp -> exp . LESSTHANOREQUALTO exp
    (32) exp -> exp . EQUALTO exp
    (33) exp -> exp . NOTEQUALTO exp
    (34) exp -> exp . COMMA exp
    (35) exp -> exp . AND exp
    (36) exp -> exp . OR exp
    (37) exp -> exp . POW exp

    COMMA           reduce using rule 39 (exp -> MINUS exp .)
    SEMICOL         reduce using rule 39 (exp -> MINUS exp .)
    AND             reduce using rule 39 (exp -> MINUS exp .)
    OR              reduce using rule 39 (exp -> MINUS exp .)
    RPAREN          reduce using rule 39 (exp -> MINUS exp .)
    RSQB            reduce using rule 39 (exp -> MINUS exp .)
    PLUS            shift and go to state 30
    MINUS           shift and go to state 31
    MULTIPLICATION  shift and go to state 32
    DIVISION        shift and go to state 33
    MODULO          shift and go to state 34
    GREATERTHAN     shift and go to state 35
    LESSTHAN        shift and go to state 36
    GREATERTHANOREQUALTO shift and go to state 37
    LESSTHANOREQUALTO shift and go to state 38
    EQUALTO         shift and go to state 39
    NOTEQUALTO      shift and go to state 40
    POW             shift and go to state 43

  ! PLUS            [ reduce using rule 39 (exp -> MINUS exp .) ]
  ! MINUS           [ reduce using rule 39 (exp -> MINUS exp .) ]
  ! MULTIPLICATION  [ reduce using rule 39 (exp -> MINUS exp .) ]
  ! DIVISION        [ reduce using rule 39 (exp -> MINUS exp .) ]
  ! MODULO          [ reduce using rule 39 (exp -> MINUS exp .) ]
  ! GREATERTHAN     [ reduce using rule 39 (exp -> MINUS exp .) ]
  ! LESSTHAN        [ reduce using rule 39 (exp -> MINUS exp .) ]
  ! GREATERTHANOREQUALTO [ reduce using rule 39 (exp -> MINUS exp .) ]
  ! LESSTHANOREQUALTO [ reduce using rule 39 (exp -> MINUS exp .) ]
  ! EQUALTO         [ reduce using rule 39 (exp -> MINUS exp .) ]
  ! NOTEQUALTO      [ reduce using rule 39 (exp -> MINUS exp .) ]
  ! POW             [ reduce using rule 39 (exp -> MINUS exp .) ]
  ! COMMA           [ shift and go to state 77 ]
  ! AND             [ shift and go to state 41 ]
  ! OR              [ shift and go to state 42 ]


state 52

    (7) stmt -> VARTYPE NAME ASSIGN . exp SEMICOL
    (8) stmt -> VARTYPE NAME ASSIGN . stmt SEMICOL
    (3) exp -> . LPAREN exp RPAREN
    (10) exp -> . FLOAT
    (11) exp -> . INT
    (12) exp -> . BOOL
    (13) exp -> . CHAR
    (16) exp -> . NAME LSQB INT RSQB
    (17) exp -> . NAME POP LPAREN INT RPAREN
    (18) exp -> . NAME INDEX LPAREN INT RPAREN
    (19) exp -> . NAME SLICE LPAREN INT COMMA INT RPAREN
    (21) exp -> . NAME
    (22) exp -> . NOT exp
    (23) exp -> . exp PLUS exp
    (24) exp -> . exp MINUS exp
    (25) exp -> . exp MULTIPLICATION exp
    (26) exp -> . exp DIVISION exp
    (27) exp -> . exp MODULO exp
    (28) exp -> . exp GREATERTHAN exp
    (29) exp -> . exp LESSTHAN exp
    (30) exp -> . exp GREATERTHANOREQUALTO exp
    (31) exp -> . exp LESSTHANOREQUALTO exp
    (32) exp -> . exp EQUALTO exp
    (33) exp -> . exp NOTEQUALTO exp
    (34) exp -> . exp COMMA exp
    (35) exp -> . exp AND exp
    (36) exp -> . exp OR exp
    (37) exp -> . exp POW exp
    (38) exp -> . STRING
    (39) exp -> . MINUS exp
    (4) stmt -> . PRINT exp COMMA exp SEMICOL
    (5) stmt -> . PRINT exp SEMICOL
    (6) stmt -> . PRINT LPAREN exp RPAREN SEMICOL
    (7) stmt -> . VARTYPE NAME ASSIGN exp SEMICOL
    (8) stmt -> . VARTYPE NAME ASSIGN stmt SEMICOL
    (9) stmt -> . NAME ASSIGN exp SEMICOL
    (14) stmt -> . NAME INCREMENT SEMICOL
    (15) stmt -> . NAME DECREMENT SEMICOL
    (20) stmt -> . NAME PUSH LPAREN exp RPAREN SEMICOL
    (40) stmt -> . LIST NAME ASSIGN LSQB exp RSQB SEMICOL
    (41) stmt -> . LIST NAME ASSIGN LSQB RSQB SEMICOL
    (42) stmt -> . IF LPAREN exp RPAREN LCURLY S RCURLY block
    (46) stmt -> . DO LCURLY S RCURLY block_w

    LPAREN          shift and go to state 44
    FLOAT           shift and go to state 12
    INT             shift and go to state 13
    BOOL            shift and go to state 14
    CHAR            shift and go to state 15
    NAME            shift and go to state 82
    NOT             shift and go to state 17
    STRING          shift and go to state 19
    MINUS           shift and go to state 18
    PRINT           shift and go to state 3
    VARTYPE         shift and go to state 4
    LIST            shift and go to state 6
    IF              shift and go to state 7
    DO              shift and go to state 8

    exp                            shift and go to state 83
    stmt                           shift and go to state 84

state 53

    (9) stmt -> NAME ASSIGN exp . SEMICOL
    (23) exp -> exp . PLUS exp
    (24) exp -> exp . MINUS exp
    (25) exp -> exp . MULTIPLICATION exp
    (26) exp -> exp . DIVISION exp
    (27) exp -> exp . MODULO exp
    (28) exp -> exp . GREATERTHAN exp
    (29) exp -> exp . LESSTHAN exp
    (30) exp -> exp . GREATERTHANOREQUALTO exp
    (31) exp -> exp . LESSTHANOREQUALTO exp
    (32) exp -> exp . EQUALTO exp
    (33) exp -> exp . NOTEQUALTO exp
    (34) exp -> exp . COMMA exp
    (35) exp -> exp . AND exp
    (36) exp -> exp . OR exp
    (37) exp -> exp . POW exp

    SEMICOL         shift and go to state 85
    PLUS            shift and go to state 30
    MINUS           shift and go to state 31
    MULTIPLICATION  shift and go to state 32
    DIVISION        shift and go to state 33
    MODULO          shift and go to state 34
    GREATERTHAN     shift and go to state 35
    LESSTHAN        shift and go to state 36
    GREATERTHANOREQUALTO shift and go to state 37
    LESSTHANOREQUALTO shift and go to state 38
    EQUALTO         shift and go to state 39
    NOTEQUALTO      shift and go to state 40
    COMMA           shift and go to state 77
    AND             shift and go to state 41
    OR              shift and go to state 42
    POW             shift and go to state 43


state 54

    (14) stmt -> NAME INCREMENT SEMICOL .

    PRINT           reduce using rule 14 (stmt -> NAME INCREMENT SEMICOL .)
    VARTYPE         reduce using rule 14 (stmt -> NAME INCREMENT SEMICOL .)
    NAME            reduce using rule 14 (stmt -> NAME INCREMENT SEMICOL .)
    LIST            reduce using rule 14 (stmt -> NAME INCREMENT SEMICOL .)
    IF              reduce using rule 14 (stmt -> NAME INCREMENT SEMICOL .)
    DO              reduce using rule 14 (stmt -> NAME INCREMENT SEMICOL .)
    $end            reduce using rule 14 (stmt -> NAME INCREMENT SEMICOL .)
    RCURLY          reduce using rule 14 (stmt -> NAME INCREMENT SEMICOL .)
    SEMICOL         reduce using rule 14 (stmt -> NAME INCREMENT SEMICOL .)


state 55

    (15) stmt -> NAME DECREMENT SEMICOL .

    PRINT           reduce using rule 15 (stmt -> NAME DECREMENT SEMICOL .)
    VARTYPE         reduce using rule 15 (stmt -> NAME DECREMENT SEMICOL .)
    NAME            reduce using rule 15 (stmt -> NAME DECREMENT SEMICOL .)
    LIST            reduce using rule 15 (stmt -> NAME DECREMENT SEMICOL .)
    IF              reduce using rule 15 (stmt -> NAME DECREMENT SEMICOL .)
    DO              reduce using rule 15 (stmt -> NAME DECREMENT SEMICOL .)
    $end            reduce using rule 15 (stmt -> NAME DECREMENT SEMICOL .)
    RCURLY          reduce using rule 15 (stmt -> NAME DECREMENT SEMICOL .)
    SEMICOL         reduce using rule 15 (stmt -> NAME DECREMENT SEMICOL .)


state 56

    (20) stmt -> NAME PUSH LPAREN . exp RPAREN SEMICOL
    (3) exp -> . LPAREN exp RPAREN
    (10) exp -> . FLOAT
    (11) exp -> . INT
    (12) exp -> . BOOL
    (13) exp -> . CHAR
    (16) exp -> . NAME LSQB INT RSQB
    (17) exp -> . NAME POP LPAREN INT RPAREN
    (18) exp -> . NAME INDEX LPAREN INT RPAREN
    (19) exp -> . NAME SLICE LPAREN INT COMMA INT RPAREN
    (21) exp -> . NAME
    (22) exp -> . NOT exp
    (23) exp -> . exp PLUS exp
    (24) exp -> . exp MINUS exp
    (25) exp -> . exp MULTIPLICATION exp
    (26) exp -> . exp DIVISION exp
    (27) exp -> . exp MODULO exp
    (28) exp -> . exp GREATERTHAN exp
    (29) exp -> . exp LESSTHAN exp
    (30) exp -> . exp GREATERTHANOREQUALTO exp
    (31) exp -> . exp LESSTHANOREQUALTO exp
    (32) exp -> . exp EQUALTO exp
    (33) exp -> . exp NOTEQUALTO exp
    (34) exp -> . exp COMMA exp
    (35) exp -> . exp AND exp
    (36) exp -> . exp OR exp
    (37) exp -> . exp POW exp
    (38) exp -> . STRING
    (39) exp -> . MINUS exp

    LPAREN          shift and go to state 44
    FLOAT           shift and go to state 12
    INT             shift and go to state 13
    BOOL            shift and go to state 14
    CHAR            shift and go to state 15
    NAME            shift and go to state 16
    NOT             shift and go to state 17
    STRING          shift and go to state 19
    MINUS           shift and go to state 18

    exp                            shift and go to state 86

state 57

    (40) stmt -> LIST NAME ASSIGN . LSQB exp RSQB SEMICOL
    (41) stmt -> LIST NAME ASSIGN . LSQB RSQB SEMICOL

    LSQB            shift and go to state 87


state 58

    (42) stmt -> IF LPAREN exp . RPAREN LCURLY S RCURLY block
    (23) exp -> exp . PLUS exp
    (24) exp -> exp . MINUS exp
    (25) exp -> exp . MULTIPLICATION exp
    (26) exp -> exp . DIVISION exp
    (27) exp -> exp . MODULO exp
    (28) exp -> exp . GREATERTHAN exp
    (29) exp -> exp . LESSTHAN exp
    (30) exp -> exp . GREATERTHANOREQUALTO exp
    (31) exp -> exp . LESSTHANOREQUALTO exp
    (32) exp -> exp . EQUALTO exp
    (33) exp -> exp . NOTEQUALTO exp
    (34) exp -> exp . COMMA exp
    (35) exp -> exp . AND exp
    (36) exp -> exp . OR exp
    (37) exp -> exp . POW exp

    RPAREN          shift and go to state 88
    PLUS            shift and go to state 30
    MINUS           shift and go to state 31
    MULTIPLICATION  shift and go to state 32
    DIVISION        shift and go to state 33
    MODULO          shift and go to state 34
    GREATERTHAN     shift and go to state 35
    LESSTHAN        shift and go to state 36
    GREATERTHANOREQUALTO shift and go to state 37
    LESSTHANOREQUALTO shift and go to state 38
    EQUALTO         shift and go to state 39
    NOTEQUALTO      shift and go to state 40
    COMMA           shift and go to state 77
    AND             shift and go to state 41
    OR              shift and go to state 42
    POW             shift and go to state 43


state 59

    (46) stmt -> DO LCURLY S . RCURLY block_w

    RCURLY          shift and go to state 89


state 60

    (4) stmt -> PRINT exp COMMA exp . SEMICOL
    (34) exp -> exp COMMA exp .
    (23) exp -> exp . PLUS exp
    (24) exp -> exp . MINUS exp
    (25) exp -> exp . MULTIPLICATION exp
    (26) exp -> exp . DIVISION exp
    (27) exp -> exp . MODULO exp
    (28) exp -> exp . GREATERTHAN exp
    (29) exp -> exp . LESSTHAN exp
    (30) exp -> exp . GREATERTHANOREQUALTO exp
    (31) exp -> exp . LESSTHANOREQUALTO exp
    (32) exp -> exp . EQUALTO exp
    (33) exp -> exp . NOTEQUALTO exp
    (34) exp -> exp . COMMA exp
    (35) exp -> exp . AND exp
    (36) exp -> exp . OR exp
    (37) exp -> exp . POW exp

  ! shift/reduce conflict for SEMICOL resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MULTIPLICATION resolved as shift
  ! shift/reduce conflict for DIVISION resolved as shift
  ! shift/reduce conflict for MODULO resolved as shift
  ! shift/reduce conflict for GREATERTHAN resolved as shift
  ! shift/reduce conflict for LESSTHAN resolved as shift
  ! shift/reduce conflict for GREATERTHANOREQUALTO resolved as shift
  ! shift/reduce conflict for LESSTHANOREQUALTO resolved as shift
  ! shift/reduce conflict for EQUALTO resolved as shift
  ! shift/reduce conflict for NOTEQUALTO resolved as shift
  ! shift/reduce conflict for COMMA resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for POW resolved as shift
    SEMICOL         shift and go to state 90
    PLUS            shift and go to state 30
    MINUS           shift and go to state 31
    MULTIPLICATION  shift and go to state 32
    DIVISION        shift and go to state 33
    MODULO          shift and go to state 34
    GREATERTHAN     shift and go to state 35
    LESSTHAN        shift and go to state 36
    GREATERTHANOREQUALTO shift and go to state 37
    LESSTHANOREQUALTO shift and go to state 38
    EQUALTO         shift and go to state 39
    NOTEQUALTO      shift and go to state 40
    COMMA           shift and go to state 77
    AND             shift and go to state 41
    OR              shift and go to state 42
    POW             shift and go to state 43

  ! COMMA           [ reduce using rule 34 (exp -> exp COMMA exp .) ]
  ! SEMICOL         [ reduce using rule 34 (exp -> exp COMMA exp .) ]
  ! PLUS            [ reduce using rule 34 (exp -> exp COMMA exp .) ]
  ! MINUS           [ reduce using rule 34 (exp -> exp COMMA exp .) ]
  ! MULTIPLICATION  [ reduce using rule 34 (exp -> exp COMMA exp .) ]
  ! DIVISION        [ reduce using rule 34 (exp -> exp COMMA exp .) ]
  ! MODULO          [ reduce using rule 34 (exp -> exp COMMA exp .) ]
  ! GREATERTHAN     [ reduce using rule 34 (exp -> exp COMMA exp .) ]
  ! LESSTHAN        [ reduce using rule 34 (exp -> exp COMMA exp .) ]
  ! GREATERTHANOREQUALTO [ reduce using rule 34 (exp -> exp COMMA exp .) ]
  ! LESSTHANOREQUALTO [ reduce using rule 34 (exp -> exp COMMA exp .) ]
  ! EQUALTO         [ reduce using rule 34 (exp -> exp COMMA exp .) ]
  ! NOTEQUALTO      [ reduce using rule 34 (exp -> exp COMMA exp .) ]
  ! AND             [ reduce using rule 34 (exp -> exp COMMA exp .) ]
  ! OR              [ reduce using rule 34 (exp -> exp COMMA exp .) ]
  ! POW             [ reduce using rule 34 (exp -> exp COMMA exp .) ]


state 61

    (23) exp -> exp PLUS exp .
    (23) exp -> exp . PLUS exp
    (24) exp -> exp . MINUS exp
    (25) exp -> exp . MULTIPLICATION exp
    (26) exp -> exp . DIVISION exp
    (27) exp -> exp . MODULO exp
    (28) exp -> exp . GREATERTHAN exp
    (29) exp -> exp . LESSTHAN exp
    (30) exp -> exp . GREATERTHANOREQUALTO exp
    (31) exp -> exp . LESSTHANOREQUALTO exp
    (32) exp -> exp . EQUALTO exp
    (33) exp -> exp . NOTEQUALTO exp
    (34) exp -> exp . COMMA exp
    (35) exp -> exp . AND exp
    (36) exp -> exp . OR exp
    (37) exp -> exp . POW exp

    COMMA           reduce using rule 23 (exp -> exp PLUS exp .)
    SEMICOL         reduce using rule 23 (exp -> exp PLUS exp .)
    PLUS            reduce using rule 23 (exp -> exp PLUS exp .)
    MINUS           reduce using rule 23 (exp -> exp PLUS exp .)
    MULTIPLICATION  reduce using rule 23 (exp -> exp PLUS exp .)
    DIVISION        reduce using rule 23 (exp -> exp PLUS exp .)
    MODULO          reduce using rule 23 (exp -> exp PLUS exp .)
    GREATERTHAN     reduce using rule 23 (exp -> exp PLUS exp .)
    LESSTHAN        reduce using rule 23 (exp -> exp PLUS exp .)
    GREATERTHANOREQUALTO reduce using rule 23 (exp -> exp PLUS exp .)
    LESSTHANOREQUALTO reduce using rule 23 (exp -> exp PLUS exp .)
    EQUALTO         reduce using rule 23 (exp -> exp PLUS exp .)
    NOTEQUALTO      reduce using rule 23 (exp -> exp PLUS exp .)
    AND             reduce using rule 23 (exp -> exp PLUS exp .)
    OR              reduce using rule 23 (exp -> exp PLUS exp .)
    RPAREN          reduce using rule 23 (exp -> exp PLUS exp .)
    RSQB            reduce using rule 23 (exp -> exp PLUS exp .)
    POW             shift and go to state 43

  ! POW             [ reduce using rule 23 (exp -> exp PLUS exp .) ]
  ! PLUS            [ shift and go to state 30 ]
  ! MINUS           [ shift and go to state 31 ]
  ! MULTIPLICATION  [ shift and go to state 32 ]
  ! DIVISION        [ shift and go to state 33 ]
  ! MODULO          [ shift and go to state 34 ]
  ! GREATERTHAN     [ shift and go to state 35 ]
  ! LESSTHAN        [ shift and go to state 36 ]
  ! GREATERTHANOREQUALTO [ shift and go to state 37 ]
  ! LESSTHANOREQUALTO [ shift and go to state 38 ]
  ! EQUALTO         [ shift and go to state 39 ]
  ! NOTEQUALTO      [ shift and go to state 40 ]
  ! COMMA           [ shift and go to state 77 ]
  ! AND             [ shift and go to state 41 ]
  ! OR              [ shift and go to state 42 ]


state 62

    (24) exp -> exp MINUS exp .
    (23) exp -> exp . PLUS exp
    (24) exp -> exp . MINUS exp
    (25) exp -> exp . MULTIPLICATION exp
    (26) exp -> exp . DIVISION exp
    (27) exp -> exp . MODULO exp
    (28) exp -> exp . GREATERTHAN exp
    (29) exp -> exp . LESSTHAN exp
    (30) exp -> exp . GREATERTHANOREQUALTO exp
    (31) exp -> exp . LESSTHANOREQUALTO exp
    (32) exp -> exp . EQUALTO exp
    (33) exp -> exp . NOTEQUALTO exp
    (34) exp -> exp . COMMA exp
    (35) exp -> exp . AND exp
    (36) exp -> exp . OR exp
    (37) exp -> exp . POW exp

    COMMA           reduce using rule 24 (exp -> exp MINUS exp .)
    SEMICOL         reduce using rule 24 (exp -> exp MINUS exp .)
    PLUS            reduce using rule 24 (exp -> exp MINUS exp .)
    MINUS           reduce using rule 24 (exp -> exp MINUS exp .)
    MULTIPLICATION  reduce using rule 24 (exp -> exp MINUS exp .)
    DIVISION        reduce using rule 24 (exp -> exp MINUS exp .)
    MODULO          reduce using rule 24 (exp -> exp MINUS exp .)
    GREATERTHAN     reduce using rule 24 (exp -> exp MINUS exp .)
    LESSTHAN        reduce using rule 24 (exp -> exp MINUS exp .)
    GREATERTHANOREQUALTO reduce using rule 24 (exp -> exp MINUS exp .)
    LESSTHANOREQUALTO reduce using rule 24 (exp -> exp MINUS exp .)
    EQUALTO         reduce using rule 24 (exp -> exp MINUS exp .)
    NOTEQUALTO      reduce using rule 24 (exp -> exp MINUS exp .)
    AND             reduce using rule 24 (exp -> exp MINUS exp .)
    OR              reduce using rule 24 (exp -> exp MINUS exp .)
    RPAREN          reduce using rule 24 (exp -> exp MINUS exp .)
    RSQB            reduce using rule 24 (exp -> exp MINUS exp .)
    POW             shift and go to state 43

  ! POW             [ reduce using rule 24 (exp -> exp MINUS exp .) ]
  ! PLUS            [ shift and go to state 30 ]
  ! MINUS           [ shift and go to state 31 ]
  ! MULTIPLICATION  [ shift and go to state 32 ]
  ! DIVISION        [ shift and go to state 33 ]
  ! MODULO          [ shift and go to state 34 ]
  ! GREATERTHAN     [ shift and go to state 35 ]
  ! LESSTHAN        [ shift and go to state 36 ]
  ! GREATERTHANOREQUALTO [ shift and go to state 37 ]
  ! LESSTHANOREQUALTO [ shift and go to state 38 ]
  ! EQUALTO         [ shift and go to state 39 ]
  ! NOTEQUALTO      [ shift and go to state 40 ]
  ! COMMA           [ shift and go to state 77 ]
  ! AND             [ shift and go to state 41 ]
  ! OR              [ shift and go to state 42 ]


state 63

    (25) exp -> exp MULTIPLICATION exp .
    (23) exp -> exp . PLUS exp
    (24) exp -> exp . MINUS exp
    (25) exp -> exp . MULTIPLICATION exp
    (26) exp -> exp . DIVISION exp
    (27) exp -> exp . MODULO exp
    (28) exp -> exp . GREATERTHAN exp
    (29) exp -> exp . LESSTHAN exp
    (30) exp -> exp . GREATERTHANOREQUALTO exp
    (31) exp -> exp . LESSTHANOREQUALTO exp
    (32) exp -> exp . EQUALTO exp
    (33) exp -> exp . NOTEQUALTO exp
    (34) exp -> exp . COMMA exp
    (35) exp -> exp . AND exp
    (36) exp -> exp . OR exp
    (37) exp -> exp . POW exp

    COMMA           reduce using rule 25 (exp -> exp MULTIPLICATION exp .)
    SEMICOL         reduce using rule 25 (exp -> exp MULTIPLICATION exp .)
    MULTIPLICATION  reduce using rule 25 (exp -> exp MULTIPLICATION exp .)
    DIVISION        reduce using rule 25 (exp -> exp MULTIPLICATION exp .)
    MODULO          reduce using rule 25 (exp -> exp MULTIPLICATION exp .)
    GREATERTHAN     reduce using rule 25 (exp -> exp MULTIPLICATION exp .)
    LESSTHAN        reduce using rule 25 (exp -> exp MULTIPLICATION exp .)
    GREATERTHANOREQUALTO reduce using rule 25 (exp -> exp MULTIPLICATION exp .)
    LESSTHANOREQUALTO reduce using rule 25 (exp -> exp MULTIPLICATION exp .)
    EQUALTO         reduce using rule 25 (exp -> exp MULTIPLICATION exp .)
    NOTEQUALTO      reduce using rule 25 (exp -> exp MULTIPLICATION exp .)
    AND             reduce using rule 25 (exp -> exp MULTIPLICATION exp .)
    OR              reduce using rule 25 (exp -> exp MULTIPLICATION exp .)
    RPAREN          reduce using rule 25 (exp -> exp MULTIPLICATION exp .)
    RSQB            reduce using rule 25 (exp -> exp MULTIPLICATION exp .)
    PLUS            shift and go to state 30
    MINUS           shift and go to state 31
    POW             shift and go to state 43

  ! PLUS            [ reduce using rule 25 (exp -> exp MULTIPLICATION exp .) ]
  ! MINUS           [ reduce using rule 25 (exp -> exp MULTIPLICATION exp .) ]
  ! POW             [ reduce using rule 25 (exp -> exp MULTIPLICATION exp .) ]
  ! MULTIPLICATION  [ shift and go to state 32 ]
  ! DIVISION        [ shift and go to state 33 ]
  ! MODULO          [ shift and go to state 34 ]
  ! GREATERTHAN     [ shift and go to state 35 ]
  ! LESSTHAN        [ shift and go to state 36 ]
  ! GREATERTHANOREQUALTO [ shift and go to state 37 ]
  ! LESSTHANOREQUALTO [ shift and go to state 38 ]
  ! EQUALTO         [ shift and go to state 39 ]
  ! NOTEQUALTO      [ shift and go to state 40 ]
  ! COMMA           [ shift and go to state 77 ]
  ! AND             [ shift and go to state 41 ]
  ! OR              [ shift and go to state 42 ]


state 64

    (26) exp -> exp DIVISION exp .
    (23) exp -> exp . PLUS exp
    (24) exp -> exp . MINUS exp
    (25) exp -> exp . MULTIPLICATION exp
    (26) exp -> exp . DIVISION exp
    (27) exp -> exp . MODULO exp
    (28) exp -> exp . GREATERTHAN exp
    (29) exp -> exp . LESSTHAN exp
    (30) exp -> exp . GREATERTHANOREQUALTO exp
    (31) exp -> exp . LESSTHANOREQUALTO exp
    (32) exp -> exp . EQUALTO exp
    (33) exp -> exp . NOTEQUALTO exp
    (34) exp -> exp . COMMA exp
    (35) exp -> exp . AND exp
    (36) exp -> exp . OR exp
    (37) exp -> exp . POW exp

    COMMA           reduce using rule 26 (exp -> exp DIVISION exp .)
    SEMICOL         reduce using rule 26 (exp -> exp DIVISION exp .)
    MULTIPLICATION  reduce using rule 26 (exp -> exp DIVISION exp .)
    DIVISION        reduce using rule 26 (exp -> exp DIVISION exp .)
    MODULO          reduce using rule 26 (exp -> exp DIVISION exp .)
    GREATERTHAN     reduce using rule 26 (exp -> exp DIVISION exp .)
    LESSTHAN        reduce using rule 26 (exp -> exp DIVISION exp .)
    GREATERTHANOREQUALTO reduce using rule 26 (exp -> exp DIVISION exp .)
    LESSTHANOREQUALTO reduce using rule 26 (exp -> exp DIVISION exp .)
    EQUALTO         reduce using rule 26 (exp -> exp DIVISION exp .)
    NOTEQUALTO      reduce using rule 26 (exp -> exp DIVISION exp .)
    AND             reduce using rule 26 (exp -> exp DIVISION exp .)
    OR              reduce using rule 26 (exp -> exp DIVISION exp .)
    RPAREN          reduce using rule 26 (exp -> exp DIVISION exp .)
    RSQB            reduce using rule 26 (exp -> exp DIVISION exp .)
    PLUS            shift and go to state 30
    MINUS           shift and go to state 31
    POW             shift and go to state 43

  ! PLUS            [ reduce using rule 26 (exp -> exp DIVISION exp .) ]
  ! MINUS           [ reduce using rule 26 (exp -> exp DIVISION exp .) ]
  ! POW             [ reduce using rule 26 (exp -> exp DIVISION exp .) ]
  ! MULTIPLICATION  [ shift and go to state 32 ]
  ! DIVISION        [ shift and go to state 33 ]
  ! MODULO          [ shift and go to state 34 ]
  ! GREATERTHAN     [ shift and go to state 35 ]
  ! LESSTHAN        [ shift and go to state 36 ]
  ! GREATERTHANOREQUALTO [ shift and go to state 37 ]
  ! LESSTHANOREQUALTO [ shift and go to state 38 ]
  ! EQUALTO         [ shift and go to state 39 ]
  ! NOTEQUALTO      [ shift and go to state 40 ]
  ! COMMA           [ shift and go to state 77 ]
  ! AND             [ shift and go to state 41 ]
  ! OR              [ shift and go to state 42 ]


state 65

    (27) exp -> exp MODULO exp .
    (23) exp -> exp . PLUS exp
    (24) exp -> exp . MINUS exp
    (25) exp -> exp . MULTIPLICATION exp
    (26) exp -> exp . DIVISION exp
    (27) exp -> exp . MODULO exp
    (28) exp -> exp . GREATERTHAN exp
    (29) exp -> exp . LESSTHAN exp
    (30) exp -> exp . GREATERTHANOREQUALTO exp
    (31) exp -> exp . LESSTHANOREQUALTO exp
    (32) exp -> exp . EQUALTO exp
    (33) exp -> exp . NOTEQUALTO exp
    (34) exp -> exp . COMMA exp
    (35) exp -> exp . AND exp
    (36) exp -> exp . OR exp
    (37) exp -> exp . POW exp

    COMMA           reduce using rule 27 (exp -> exp MODULO exp .)
    SEMICOL         reduce using rule 27 (exp -> exp MODULO exp .)
    MULTIPLICATION  reduce using rule 27 (exp -> exp MODULO exp .)
    DIVISION        reduce using rule 27 (exp -> exp MODULO exp .)
    MODULO          reduce using rule 27 (exp -> exp MODULO exp .)
    GREATERTHAN     reduce using rule 27 (exp -> exp MODULO exp .)
    LESSTHAN        reduce using rule 27 (exp -> exp MODULO exp .)
    GREATERTHANOREQUALTO reduce using rule 27 (exp -> exp MODULO exp .)
    LESSTHANOREQUALTO reduce using rule 27 (exp -> exp MODULO exp .)
    EQUALTO         reduce using rule 27 (exp -> exp MODULO exp .)
    NOTEQUALTO      reduce using rule 27 (exp -> exp MODULO exp .)
    AND             reduce using rule 27 (exp -> exp MODULO exp .)
    OR              reduce using rule 27 (exp -> exp MODULO exp .)
    RPAREN          reduce using rule 27 (exp -> exp MODULO exp .)
    RSQB            reduce using rule 27 (exp -> exp MODULO exp .)
    PLUS            shift and go to state 30
    MINUS           shift and go to state 31
    POW             shift and go to state 43

  ! PLUS            [ reduce using rule 27 (exp -> exp MODULO exp .) ]
  ! MINUS           [ reduce using rule 27 (exp -> exp MODULO exp .) ]
  ! POW             [ reduce using rule 27 (exp -> exp MODULO exp .) ]
  ! MULTIPLICATION  [ shift and go to state 32 ]
  ! DIVISION        [ shift and go to state 33 ]
  ! MODULO          [ shift and go to state 34 ]
  ! GREATERTHAN     [ shift and go to state 35 ]
  ! LESSTHAN        [ shift and go to state 36 ]
  ! GREATERTHANOREQUALTO [ shift and go to state 37 ]
  ! LESSTHANOREQUALTO [ shift and go to state 38 ]
  ! EQUALTO         [ shift and go to state 39 ]
  ! NOTEQUALTO      [ shift and go to state 40 ]
  ! COMMA           [ shift and go to state 77 ]
  ! AND             [ shift and go to state 41 ]
  ! OR              [ shift and go to state 42 ]


state 66

    (28) exp -> exp GREATERTHAN exp .
    (23) exp -> exp . PLUS exp
    (24) exp -> exp . MINUS exp
    (25) exp -> exp . MULTIPLICATION exp
    (26) exp -> exp . DIVISION exp
    (27) exp -> exp . MODULO exp
    (28) exp -> exp . GREATERTHAN exp
    (29) exp -> exp . LESSTHAN exp
    (30) exp -> exp . GREATERTHANOREQUALTO exp
    (31) exp -> exp . LESSTHANOREQUALTO exp
    (32) exp -> exp . EQUALTO exp
    (33) exp -> exp . NOTEQUALTO exp
    (34) exp -> exp . COMMA exp
    (35) exp -> exp . AND exp
    (36) exp -> exp . OR exp
    (37) exp -> exp . POW exp

    COMMA           reduce using rule 28 (exp -> exp GREATERTHAN exp .)
    SEMICOL         reduce using rule 28 (exp -> exp GREATERTHAN exp .)
    GREATERTHAN     reduce using rule 28 (exp -> exp GREATERTHAN exp .)
    LESSTHAN        reduce using rule 28 (exp -> exp GREATERTHAN exp .)
    GREATERTHANOREQUALTO reduce using rule 28 (exp -> exp GREATERTHAN exp .)
    LESSTHANOREQUALTO reduce using rule 28 (exp -> exp GREATERTHAN exp .)
    EQUALTO         reduce using rule 28 (exp -> exp GREATERTHAN exp .)
    NOTEQUALTO      reduce using rule 28 (exp -> exp GREATERTHAN exp .)
    AND             reduce using rule 28 (exp -> exp GREATERTHAN exp .)
    OR              reduce using rule 28 (exp -> exp GREATERTHAN exp .)
    RPAREN          reduce using rule 28 (exp -> exp GREATERTHAN exp .)
    RSQB            reduce using rule 28 (exp -> exp GREATERTHAN exp .)
    PLUS            shift and go to state 30
    MINUS           shift and go to state 31
    MULTIPLICATION  shift and go to state 32
    DIVISION        shift and go to state 33
    MODULO          shift and go to state 34
    POW             shift and go to state 43

  ! PLUS            [ reduce using rule 28 (exp -> exp GREATERTHAN exp .) ]
  ! MINUS           [ reduce using rule 28 (exp -> exp GREATERTHAN exp .) ]
  ! MULTIPLICATION  [ reduce using rule 28 (exp -> exp GREATERTHAN exp .) ]
  ! DIVISION        [ reduce using rule 28 (exp -> exp GREATERTHAN exp .) ]
  ! MODULO          [ reduce using rule 28 (exp -> exp GREATERTHAN exp .) ]
  ! POW             [ reduce using rule 28 (exp -> exp GREATERTHAN exp .) ]
  ! GREATERTHAN     [ shift and go to state 35 ]
  ! LESSTHAN        [ shift and go to state 36 ]
  ! GREATERTHANOREQUALTO [ shift and go to state 37 ]
  ! LESSTHANOREQUALTO [ shift and go to state 38 ]
  ! EQUALTO         [ shift and go to state 39 ]
  ! NOTEQUALTO      [ shift and go to state 40 ]
  ! COMMA           [ shift and go to state 77 ]
  ! AND             [ shift and go to state 41 ]
  ! OR              [ shift and go to state 42 ]


state 67

    (29) exp -> exp LESSTHAN exp .
    (23) exp -> exp . PLUS exp
    (24) exp -> exp . MINUS exp
    (25) exp -> exp . MULTIPLICATION exp
    (26) exp -> exp . DIVISION exp
    (27) exp -> exp . MODULO exp
    (28) exp -> exp . GREATERTHAN exp
    (29) exp -> exp . LESSTHAN exp
    (30) exp -> exp . GREATERTHANOREQUALTO exp
    (31) exp -> exp . LESSTHANOREQUALTO exp
    (32) exp -> exp . EQUALTO exp
    (33) exp -> exp . NOTEQUALTO exp
    (34) exp -> exp . COMMA exp
    (35) exp -> exp . AND exp
    (36) exp -> exp . OR exp
    (37) exp -> exp . POW exp

    COMMA           reduce using rule 29 (exp -> exp LESSTHAN exp .)
    SEMICOL         reduce using rule 29 (exp -> exp LESSTHAN exp .)
    GREATERTHAN     reduce using rule 29 (exp -> exp LESSTHAN exp .)
    LESSTHAN        reduce using rule 29 (exp -> exp LESSTHAN exp .)
    GREATERTHANOREQUALTO reduce using rule 29 (exp -> exp LESSTHAN exp .)
    LESSTHANOREQUALTO reduce using rule 29 (exp -> exp LESSTHAN exp .)
    EQUALTO         reduce using rule 29 (exp -> exp LESSTHAN exp .)
    NOTEQUALTO      reduce using rule 29 (exp -> exp LESSTHAN exp .)
    AND             reduce using rule 29 (exp -> exp LESSTHAN exp .)
    OR              reduce using rule 29 (exp -> exp LESSTHAN exp .)
    RPAREN          reduce using rule 29 (exp -> exp LESSTHAN exp .)
    RSQB            reduce using rule 29 (exp -> exp LESSTHAN exp .)
    PLUS            shift and go to state 30
    MINUS           shift and go to state 31
    MULTIPLICATION  shift and go to state 32
    DIVISION        shift and go to state 33
    MODULO          shift and go to state 34
    POW             shift and go to state 43

  ! PLUS            [ reduce using rule 29 (exp -> exp LESSTHAN exp .) ]
  ! MINUS           [ reduce using rule 29 (exp -> exp LESSTHAN exp .) ]
  ! MULTIPLICATION  [ reduce using rule 29 (exp -> exp LESSTHAN exp .) ]
  ! DIVISION        [ reduce using rule 29 (exp -> exp LESSTHAN exp .) ]
  ! MODULO          [ reduce using rule 29 (exp -> exp LESSTHAN exp .) ]
  ! POW             [ reduce using rule 29 (exp -> exp LESSTHAN exp .) ]
  ! GREATERTHAN     [ shift and go to state 35 ]
  ! LESSTHAN        [ shift and go to state 36 ]
  ! GREATERTHANOREQUALTO [ shift and go to state 37 ]
  ! LESSTHANOREQUALTO [ shift and go to state 38 ]
  ! EQUALTO         [ shift and go to state 39 ]
  ! NOTEQUALTO      [ shift and go to state 40 ]
  ! COMMA           [ shift and go to state 77 ]
  ! AND             [ shift and go to state 41 ]
  ! OR              [ shift and go to state 42 ]


state 68

    (30) exp -> exp GREATERTHANOREQUALTO exp .
    (23) exp -> exp . PLUS exp
    (24) exp -> exp . MINUS exp
    (25) exp -> exp . MULTIPLICATION exp
    (26) exp -> exp . DIVISION exp
    (27) exp -> exp . MODULO exp
    (28) exp -> exp . GREATERTHAN exp
    (29) exp -> exp . LESSTHAN exp
    (30) exp -> exp . GREATERTHANOREQUALTO exp
    (31) exp -> exp . LESSTHANOREQUALTO exp
    (32) exp -> exp . EQUALTO exp
    (33) exp -> exp . NOTEQUALTO exp
    (34) exp -> exp . COMMA exp
    (35) exp -> exp . AND exp
    (36) exp -> exp . OR exp
    (37) exp -> exp . POW exp

    COMMA           reduce using rule 30 (exp -> exp GREATERTHANOREQUALTO exp .)
    SEMICOL         reduce using rule 30 (exp -> exp GREATERTHANOREQUALTO exp .)
    GREATERTHANOREQUALTO reduce using rule 30 (exp -> exp GREATERTHANOREQUALTO exp .)
    LESSTHANOREQUALTO reduce using rule 30 (exp -> exp GREATERTHANOREQUALTO exp .)
    EQUALTO         reduce using rule 30 (exp -> exp GREATERTHANOREQUALTO exp .)
    NOTEQUALTO      reduce using rule 30 (exp -> exp GREATERTHANOREQUALTO exp .)
    AND             reduce using rule 30 (exp -> exp GREATERTHANOREQUALTO exp .)
    OR              reduce using rule 30 (exp -> exp GREATERTHANOREQUALTO exp .)
    RPAREN          reduce using rule 30 (exp -> exp GREATERTHANOREQUALTO exp .)
    RSQB            reduce using rule 30 (exp -> exp GREATERTHANOREQUALTO exp .)
    PLUS            shift and go to state 30
    MINUS           shift and go to state 31
    MULTIPLICATION  shift and go to state 32
    DIVISION        shift and go to state 33
    MODULO          shift and go to state 34
    GREATERTHAN     shift and go to state 35
    LESSTHAN        shift and go to state 36
    POW             shift and go to state 43

  ! PLUS            [ reduce using rule 30 (exp -> exp GREATERTHANOREQUALTO exp .) ]
  ! MINUS           [ reduce using rule 30 (exp -> exp GREATERTHANOREQUALTO exp .) ]
  ! MULTIPLICATION  [ reduce using rule 30 (exp -> exp GREATERTHANOREQUALTO exp .) ]
  ! DIVISION        [ reduce using rule 30 (exp -> exp GREATERTHANOREQUALTO exp .) ]
  ! MODULO          [ reduce using rule 30 (exp -> exp GREATERTHANOREQUALTO exp .) ]
  ! GREATERTHAN     [ reduce using rule 30 (exp -> exp GREATERTHANOREQUALTO exp .) ]
  ! LESSTHAN        [ reduce using rule 30 (exp -> exp GREATERTHANOREQUALTO exp .) ]
  ! POW             [ reduce using rule 30 (exp -> exp GREATERTHANOREQUALTO exp .) ]
  ! GREATERTHANOREQUALTO [ shift and go to state 37 ]
  ! LESSTHANOREQUALTO [ shift and go to state 38 ]
  ! EQUALTO         [ shift and go to state 39 ]
  ! NOTEQUALTO      [ shift and go to state 40 ]
  ! COMMA           [ shift and go to state 77 ]
  ! AND             [ shift and go to state 41 ]
  ! OR              [ shift and go to state 42 ]


state 69

    (31) exp -> exp LESSTHANOREQUALTO exp .
    (23) exp -> exp . PLUS exp
    (24) exp -> exp . MINUS exp
    (25) exp -> exp . MULTIPLICATION exp
    (26) exp -> exp . DIVISION exp
    (27) exp -> exp . MODULO exp
    (28) exp -> exp . GREATERTHAN exp
    (29) exp -> exp . LESSTHAN exp
    (30) exp -> exp . GREATERTHANOREQUALTO exp
    (31) exp -> exp . LESSTHANOREQUALTO exp
    (32) exp -> exp . EQUALTO exp
    (33) exp -> exp . NOTEQUALTO exp
    (34) exp -> exp . COMMA exp
    (35) exp -> exp . AND exp
    (36) exp -> exp . OR exp
    (37) exp -> exp . POW exp

    COMMA           reduce using rule 31 (exp -> exp LESSTHANOREQUALTO exp .)
    SEMICOL         reduce using rule 31 (exp -> exp LESSTHANOREQUALTO exp .)
    GREATERTHANOREQUALTO reduce using rule 31 (exp -> exp LESSTHANOREQUALTO exp .)
    LESSTHANOREQUALTO reduce using rule 31 (exp -> exp LESSTHANOREQUALTO exp .)
    EQUALTO         reduce using rule 31 (exp -> exp LESSTHANOREQUALTO exp .)
    NOTEQUALTO      reduce using rule 31 (exp -> exp LESSTHANOREQUALTO exp .)
    AND             reduce using rule 31 (exp -> exp LESSTHANOREQUALTO exp .)
    OR              reduce using rule 31 (exp -> exp LESSTHANOREQUALTO exp .)
    RPAREN          reduce using rule 31 (exp -> exp LESSTHANOREQUALTO exp .)
    RSQB            reduce using rule 31 (exp -> exp LESSTHANOREQUALTO exp .)
    PLUS            shift and go to state 30
    MINUS           shift and go to state 31
    MULTIPLICATION  shift and go to state 32
    DIVISION        shift and go to state 33
    MODULO          shift and go to state 34
    GREATERTHAN     shift and go to state 35
    LESSTHAN        shift and go to state 36
    POW             shift and go to state 43

  ! PLUS            [ reduce using rule 31 (exp -> exp LESSTHANOREQUALTO exp .) ]
  ! MINUS           [ reduce using rule 31 (exp -> exp LESSTHANOREQUALTO exp .) ]
  ! MULTIPLICATION  [ reduce using rule 31 (exp -> exp LESSTHANOREQUALTO exp .) ]
  ! DIVISION        [ reduce using rule 31 (exp -> exp LESSTHANOREQUALTO exp .) ]
  ! MODULO          [ reduce using rule 31 (exp -> exp LESSTHANOREQUALTO exp .) ]
  ! GREATERTHAN     [ reduce using rule 31 (exp -> exp LESSTHANOREQUALTO exp .) ]
  ! LESSTHAN        [ reduce using rule 31 (exp -> exp LESSTHANOREQUALTO exp .) ]
  ! POW             [ reduce using rule 31 (exp -> exp LESSTHANOREQUALTO exp .) ]
  ! GREATERTHANOREQUALTO [ shift and go to state 37 ]
  ! LESSTHANOREQUALTO [ shift and go to state 38 ]
  ! EQUALTO         [ shift and go to state 39 ]
  ! NOTEQUALTO      [ shift and go to state 40 ]
  ! COMMA           [ shift and go to state 77 ]
  ! AND             [ shift and go to state 41 ]
  ! OR              [ shift and go to state 42 ]


state 70

    (32) exp -> exp EQUALTO exp .
    (23) exp -> exp . PLUS exp
    (24) exp -> exp . MINUS exp
    (25) exp -> exp . MULTIPLICATION exp
    (26) exp -> exp . DIVISION exp
    (27) exp -> exp . MODULO exp
    (28) exp -> exp . GREATERTHAN exp
    (29) exp -> exp . LESSTHAN exp
    (30) exp -> exp . GREATERTHANOREQUALTO exp
    (31) exp -> exp . LESSTHANOREQUALTO exp
    (32) exp -> exp . EQUALTO exp
    (33) exp -> exp . NOTEQUALTO exp
    (34) exp -> exp . COMMA exp
    (35) exp -> exp . AND exp
    (36) exp -> exp . OR exp
    (37) exp -> exp . POW exp

    COMMA           reduce using rule 32 (exp -> exp EQUALTO exp .)
    SEMICOL         reduce using rule 32 (exp -> exp EQUALTO exp .)
    EQUALTO         reduce using rule 32 (exp -> exp EQUALTO exp .)
    NOTEQUALTO      reduce using rule 32 (exp -> exp EQUALTO exp .)
    AND             reduce using rule 32 (exp -> exp EQUALTO exp .)
    OR              reduce using rule 32 (exp -> exp EQUALTO exp .)
    RPAREN          reduce using rule 32 (exp -> exp EQUALTO exp .)
    RSQB            reduce using rule 32 (exp -> exp EQUALTO exp .)
    PLUS            shift and go to state 30
    MINUS           shift and go to state 31
    MULTIPLICATION  shift and go to state 32
    DIVISION        shift and go to state 33
    MODULO          shift and go to state 34
    GREATERTHAN     shift and go to state 35
    LESSTHAN        shift and go to state 36
    GREATERTHANOREQUALTO shift and go to state 37
    LESSTHANOREQUALTO shift and go to state 38
    POW             shift and go to state 43

  ! PLUS            [ reduce using rule 32 (exp -> exp EQUALTO exp .) ]
  ! MINUS           [ reduce using rule 32 (exp -> exp EQUALTO exp .) ]
  ! MULTIPLICATION  [ reduce using rule 32 (exp -> exp EQUALTO exp .) ]
  ! DIVISION        [ reduce using rule 32 (exp -> exp EQUALTO exp .) ]
  ! MODULO          [ reduce using rule 32 (exp -> exp EQUALTO exp .) ]
  ! GREATERTHAN     [ reduce using rule 32 (exp -> exp EQUALTO exp .) ]
  ! LESSTHAN        [ reduce using rule 32 (exp -> exp EQUALTO exp .) ]
  ! GREATERTHANOREQUALTO [ reduce using rule 32 (exp -> exp EQUALTO exp .) ]
  ! LESSTHANOREQUALTO [ reduce using rule 32 (exp -> exp EQUALTO exp .) ]
  ! POW             [ reduce using rule 32 (exp -> exp EQUALTO exp .) ]
  ! EQUALTO         [ shift and go to state 39 ]
  ! NOTEQUALTO      [ shift and go to state 40 ]
  ! COMMA           [ shift and go to state 77 ]
  ! AND             [ shift and go to state 41 ]
  ! OR              [ shift and go to state 42 ]


state 71

    (33) exp -> exp NOTEQUALTO exp .
    (23) exp -> exp . PLUS exp
    (24) exp -> exp . MINUS exp
    (25) exp -> exp . MULTIPLICATION exp
    (26) exp -> exp . DIVISION exp
    (27) exp -> exp . MODULO exp
    (28) exp -> exp . GREATERTHAN exp
    (29) exp -> exp . LESSTHAN exp
    (30) exp -> exp . GREATERTHANOREQUALTO exp
    (31) exp -> exp . LESSTHANOREQUALTO exp
    (32) exp -> exp . EQUALTO exp
    (33) exp -> exp . NOTEQUALTO exp
    (34) exp -> exp . COMMA exp
    (35) exp -> exp . AND exp
    (36) exp -> exp . OR exp
    (37) exp -> exp . POW exp

    COMMA           reduce using rule 33 (exp -> exp NOTEQUALTO exp .)
    SEMICOL         reduce using rule 33 (exp -> exp NOTEQUALTO exp .)
    EQUALTO         reduce using rule 33 (exp -> exp NOTEQUALTO exp .)
    NOTEQUALTO      reduce using rule 33 (exp -> exp NOTEQUALTO exp .)
    AND             reduce using rule 33 (exp -> exp NOTEQUALTO exp .)
    OR              reduce using rule 33 (exp -> exp NOTEQUALTO exp .)
    RPAREN          reduce using rule 33 (exp -> exp NOTEQUALTO exp .)
    RSQB            reduce using rule 33 (exp -> exp NOTEQUALTO exp .)
    PLUS            shift and go to state 30
    MINUS           shift and go to state 31
    MULTIPLICATION  shift and go to state 32
    DIVISION        shift and go to state 33
    MODULO          shift and go to state 34
    GREATERTHAN     shift and go to state 35
    LESSTHAN        shift and go to state 36
    GREATERTHANOREQUALTO shift and go to state 37
    LESSTHANOREQUALTO shift and go to state 38
    POW             shift and go to state 43

  ! PLUS            [ reduce using rule 33 (exp -> exp NOTEQUALTO exp .) ]
  ! MINUS           [ reduce using rule 33 (exp -> exp NOTEQUALTO exp .) ]
  ! MULTIPLICATION  [ reduce using rule 33 (exp -> exp NOTEQUALTO exp .) ]
  ! DIVISION        [ reduce using rule 33 (exp -> exp NOTEQUALTO exp .) ]
  ! MODULO          [ reduce using rule 33 (exp -> exp NOTEQUALTO exp .) ]
  ! GREATERTHAN     [ reduce using rule 33 (exp -> exp NOTEQUALTO exp .) ]
  ! LESSTHAN        [ reduce using rule 33 (exp -> exp NOTEQUALTO exp .) ]
  ! GREATERTHANOREQUALTO [ reduce using rule 33 (exp -> exp NOTEQUALTO exp .) ]
  ! LESSTHANOREQUALTO [ reduce using rule 33 (exp -> exp NOTEQUALTO exp .) ]
  ! POW             [ reduce using rule 33 (exp -> exp NOTEQUALTO exp .) ]
  ! EQUALTO         [ shift and go to state 39 ]
  ! NOTEQUALTO      [ shift and go to state 40 ]
  ! COMMA           [ shift and go to state 77 ]
  ! AND             [ shift and go to state 41 ]
  ! OR              [ shift and go to state 42 ]


state 72

    (35) exp -> exp AND exp .
    (23) exp -> exp . PLUS exp
    (24) exp -> exp . MINUS exp
    (25) exp -> exp . MULTIPLICATION exp
    (26) exp -> exp . DIVISION exp
    (27) exp -> exp . MODULO exp
    (28) exp -> exp . GREATERTHAN exp
    (29) exp -> exp . LESSTHAN exp
    (30) exp -> exp . GREATERTHANOREQUALTO exp
    (31) exp -> exp . LESSTHANOREQUALTO exp
    (32) exp -> exp . EQUALTO exp
    (33) exp -> exp . NOTEQUALTO exp
    (34) exp -> exp . COMMA exp
    (35) exp -> exp . AND exp
    (36) exp -> exp . OR exp
    (37) exp -> exp . POW exp

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MULTIPLICATION resolved as shift
  ! shift/reduce conflict for DIVISION resolved as shift
  ! shift/reduce conflict for MODULO resolved as shift
  ! shift/reduce conflict for GREATERTHAN resolved as shift
  ! shift/reduce conflict for LESSTHAN resolved as shift
  ! shift/reduce conflict for GREATERTHANOREQUALTO resolved as shift
  ! shift/reduce conflict for LESSTHANOREQUALTO resolved as shift
  ! shift/reduce conflict for EQUALTO resolved as shift
  ! shift/reduce conflict for NOTEQUALTO resolved as shift
  ! shift/reduce conflict for COMMA resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for POW resolved as shift
    SEMICOL         reduce using rule 35 (exp -> exp AND exp .)
    RPAREN          reduce using rule 35 (exp -> exp AND exp .)
    RSQB            reduce using rule 35 (exp -> exp AND exp .)
    PLUS            shift and go to state 30
    MINUS           shift and go to state 31
    MULTIPLICATION  shift and go to state 32
    DIVISION        shift and go to state 33
    MODULO          shift and go to state 34
    GREATERTHAN     shift and go to state 35
    LESSTHAN        shift and go to state 36
    GREATERTHANOREQUALTO shift and go to state 37
    LESSTHANOREQUALTO shift and go to state 38
    EQUALTO         shift and go to state 39
    NOTEQUALTO      shift and go to state 40
    COMMA           shift and go to state 77
    AND             shift and go to state 41
    OR              shift and go to state 42
    POW             shift and go to state 43

  ! COMMA           [ reduce using rule 35 (exp -> exp AND exp .) ]
  ! PLUS            [ reduce using rule 35 (exp -> exp AND exp .) ]
  ! MINUS           [ reduce using rule 35 (exp -> exp AND exp .) ]
  ! MULTIPLICATION  [ reduce using rule 35 (exp -> exp AND exp .) ]
  ! DIVISION        [ reduce using rule 35 (exp -> exp AND exp .) ]
  ! MODULO          [ reduce using rule 35 (exp -> exp AND exp .) ]
  ! GREATERTHAN     [ reduce using rule 35 (exp -> exp AND exp .) ]
  ! LESSTHAN        [ reduce using rule 35 (exp -> exp AND exp .) ]
  ! GREATERTHANOREQUALTO [ reduce using rule 35 (exp -> exp AND exp .) ]
  ! LESSTHANOREQUALTO [ reduce using rule 35 (exp -> exp AND exp .) ]
  ! EQUALTO         [ reduce using rule 35 (exp -> exp AND exp .) ]
  ! NOTEQUALTO      [ reduce using rule 35 (exp -> exp AND exp .) ]
  ! AND             [ reduce using rule 35 (exp -> exp AND exp .) ]
  ! OR              [ reduce using rule 35 (exp -> exp AND exp .) ]
  ! POW             [ reduce using rule 35 (exp -> exp AND exp .) ]


state 73

    (36) exp -> exp OR exp .
    (23) exp -> exp . PLUS exp
    (24) exp -> exp . MINUS exp
    (25) exp -> exp . MULTIPLICATION exp
    (26) exp -> exp . DIVISION exp
    (27) exp -> exp . MODULO exp
    (28) exp -> exp . GREATERTHAN exp
    (29) exp -> exp . LESSTHAN exp
    (30) exp -> exp . GREATERTHANOREQUALTO exp
    (31) exp -> exp . LESSTHANOREQUALTO exp
    (32) exp -> exp . EQUALTO exp
    (33) exp -> exp . NOTEQUALTO exp
    (34) exp -> exp . COMMA exp
    (35) exp -> exp . AND exp
    (36) exp -> exp . OR exp
    (37) exp -> exp . POW exp

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MULTIPLICATION resolved as shift
  ! shift/reduce conflict for DIVISION resolved as shift
  ! shift/reduce conflict for MODULO resolved as shift
  ! shift/reduce conflict for GREATERTHAN resolved as shift
  ! shift/reduce conflict for LESSTHAN resolved as shift
  ! shift/reduce conflict for GREATERTHANOREQUALTO resolved as shift
  ! shift/reduce conflict for LESSTHANOREQUALTO resolved as shift
  ! shift/reduce conflict for EQUALTO resolved as shift
  ! shift/reduce conflict for NOTEQUALTO resolved as shift
  ! shift/reduce conflict for COMMA resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for POW resolved as shift
    SEMICOL         reduce using rule 36 (exp -> exp OR exp .)
    RPAREN          reduce using rule 36 (exp -> exp OR exp .)
    RSQB            reduce using rule 36 (exp -> exp OR exp .)
    PLUS            shift and go to state 30
    MINUS           shift and go to state 31
    MULTIPLICATION  shift and go to state 32
    DIVISION        shift and go to state 33
    MODULO          shift and go to state 34
    GREATERTHAN     shift and go to state 35
    LESSTHAN        shift and go to state 36
    GREATERTHANOREQUALTO shift and go to state 37
    LESSTHANOREQUALTO shift and go to state 38
    EQUALTO         shift and go to state 39
    NOTEQUALTO      shift and go to state 40
    COMMA           shift and go to state 77
    AND             shift and go to state 41
    OR              shift and go to state 42
    POW             shift and go to state 43

  ! COMMA           [ reduce using rule 36 (exp -> exp OR exp .) ]
  ! PLUS            [ reduce using rule 36 (exp -> exp OR exp .) ]
  ! MINUS           [ reduce using rule 36 (exp -> exp OR exp .) ]
  ! MULTIPLICATION  [ reduce using rule 36 (exp -> exp OR exp .) ]
  ! DIVISION        [ reduce using rule 36 (exp -> exp OR exp .) ]
  ! MODULO          [ reduce using rule 36 (exp -> exp OR exp .) ]
  ! GREATERTHAN     [ reduce using rule 36 (exp -> exp OR exp .) ]
  ! LESSTHAN        [ reduce using rule 36 (exp -> exp OR exp .) ]
  ! GREATERTHANOREQUALTO [ reduce using rule 36 (exp -> exp OR exp .) ]
  ! LESSTHANOREQUALTO [ reduce using rule 36 (exp -> exp OR exp .) ]
  ! EQUALTO         [ reduce using rule 36 (exp -> exp OR exp .) ]
  ! NOTEQUALTO      [ reduce using rule 36 (exp -> exp OR exp .) ]
  ! AND             [ reduce using rule 36 (exp -> exp OR exp .) ]
  ! OR              [ reduce using rule 36 (exp -> exp OR exp .) ]
  ! POW             [ reduce using rule 36 (exp -> exp OR exp .) ]


state 74

    (37) exp -> exp POW exp .
    (23) exp -> exp . PLUS exp
    (24) exp -> exp . MINUS exp
    (25) exp -> exp . MULTIPLICATION exp
    (26) exp -> exp . DIVISION exp
    (27) exp -> exp . MODULO exp
    (28) exp -> exp . GREATERTHAN exp
    (29) exp -> exp . LESSTHAN exp
    (30) exp -> exp . GREATERTHANOREQUALTO exp
    (31) exp -> exp . LESSTHANOREQUALTO exp
    (32) exp -> exp . EQUALTO exp
    (33) exp -> exp . NOTEQUALTO exp
    (34) exp -> exp . COMMA exp
    (35) exp -> exp . AND exp
    (36) exp -> exp . OR exp
    (37) exp -> exp . POW exp

    COMMA           reduce using rule 37 (exp -> exp POW exp .)
    SEMICOL         reduce using rule 37 (exp -> exp POW exp .)
    PLUS            reduce using rule 37 (exp -> exp POW exp .)
    MINUS           reduce using rule 37 (exp -> exp POW exp .)
    MULTIPLICATION  reduce using rule 37 (exp -> exp POW exp .)
    DIVISION        reduce using rule 37 (exp -> exp POW exp .)
    MODULO          reduce using rule 37 (exp -> exp POW exp .)
    GREATERTHAN     reduce using rule 37 (exp -> exp POW exp .)
    LESSTHAN        reduce using rule 37 (exp -> exp POW exp .)
    GREATERTHANOREQUALTO reduce using rule 37 (exp -> exp POW exp .)
    LESSTHANOREQUALTO reduce using rule 37 (exp -> exp POW exp .)
    EQUALTO         reduce using rule 37 (exp -> exp POW exp .)
    NOTEQUALTO      reduce using rule 37 (exp -> exp POW exp .)
    AND             reduce using rule 37 (exp -> exp POW exp .)
    OR              reduce using rule 37 (exp -> exp POW exp .)
    POW             reduce using rule 37 (exp -> exp POW exp .)
    RPAREN          reduce using rule 37 (exp -> exp POW exp .)
    RSQB            reduce using rule 37 (exp -> exp POW exp .)

  ! PLUS            [ shift and go to state 30 ]
  ! MINUS           [ shift and go to state 31 ]
  ! MULTIPLICATION  [ shift and go to state 32 ]
  ! DIVISION        [ shift and go to state 33 ]
  ! MODULO          [ shift and go to state 34 ]
  ! GREATERTHAN     [ shift and go to state 35 ]
  ! LESSTHAN        [ shift and go to state 36 ]
  ! GREATERTHANOREQUALTO [ shift and go to state 37 ]
  ! LESSTHANOREQUALTO [ shift and go to state 38 ]
  ! EQUALTO         [ shift and go to state 39 ]
  ! NOTEQUALTO      [ shift and go to state 40 ]
  ! COMMA           [ shift and go to state 77 ]
  ! AND             [ shift and go to state 41 ]
  ! OR              [ shift and go to state 42 ]
  ! POW             [ shift and go to state 43 ]


state 75

    (3) exp -> LPAREN exp . RPAREN
    (23) exp -> exp . PLUS exp
    (24) exp -> exp . MINUS exp
    (25) exp -> exp . MULTIPLICATION exp
    (26) exp -> exp . DIVISION exp
    (27) exp -> exp . MODULO exp
    (28) exp -> exp . GREATERTHAN exp
    (29) exp -> exp . LESSTHAN exp
    (30) exp -> exp . GREATERTHANOREQUALTO exp
    (31) exp -> exp . LESSTHANOREQUALTO exp
    (32) exp -> exp . EQUALTO exp
    (33) exp -> exp . NOTEQUALTO exp
    (34) exp -> exp . COMMA exp
    (35) exp -> exp . AND exp
    (36) exp -> exp . OR exp
    (37) exp -> exp . POW exp

    RPAREN          shift and go to state 91
    PLUS            shift and go to state 30
    MINUS           shift and go to state 31
    MULTIPLICATION  shift and go to state 32
    DIVISION        shift and go to state 33
    MODULO          shift and go to state 34
    GREATERTHAN     shift and go to state 35
    LESSTHAN        shift and go to state 36
    GREATERTHANOREQUALTO shift and go to state 37
    LESSTHANOREQUALTO shift and go to state 38
    EQUALTO         shift and go to state 39
    NOTEQUALTO      shift and go to state 40
    COMMA           shift and go to state 77
    AND             shift and go to state 41
    OR              shift and go to state 42
    POW             shift and go to state 43


state 76

    (6) stmt -> PRINT LPAREN exp RPAREN . SEMICOL
    (3) exp -> LPAREN exp RPAREN .

    COMMA           reduce using rule 3 (exp -> LPAREN exp RPAREN .)
    SEMICOL         reduce using rule 3 (exp -> LPAREN exp RPAREN .)
    PLUS            reduce using rule 3 (exp -> LPAREN exp RPAREN .)
    MINUS           reduce using rule 3 (exp -> LPAREN exp RPAREN .)
    MULTIPLICATION  reduce using rule 3 (exp -> LPAREN exp RPAREN .)
    DIVISION        reduce using rule 3 (exp -> LPAREN exp RPAREN .)
    MODULO          reduce using rule 3 (exp -> LPAREN exp RPAREN .)
    GREATERTHAN     reduce using rule 3 (exp -> LPAREN exp RPAREN .)
    LESSTHAN        reduce using rule 3 (exp -> LPAREN exp RPAREN .)
    GREATERTHANOREQUALTO reduce using rule 3 (exp -> LPAREN exp RPAREN .)
    LESSTHANOREQUALTO reduce using rule 3 (exp -> LPAREN exp RPAREN .)
    EQUALTO         reduce using rule 3 (exp -> LPAREN exp RPAREN .)
    NOTEQUALTO      reduce using rule 3 (exp -> LPAREN exp RPAREN .)
    AND             reduce using rule 3 (exp -> LPAREN exp RPAREN .)
    OR              reduce using rule 3 (exp -> LPAREN exp RPAREN .)
    POW             reduce using rule 3 (exp -> LPAREN exp RPAREN .)

  ! SEMICOL         [ shift and go to state 92 ]


state 77

    (34) exp -> exp COMMA . exp
    (3) exp -> . LPAREN exp RPAREN
    (10) exp -> . FLOAT
    (11) exp -> . INT
    (12) exp -> . BOOL
    (13) exp -> . CHAR
    (16) exp -> . NAME LSQB INT RSQB
    (17) exp -> . NAME POP LPAREN INT RPAREN
    (18) exp -> . NAME INDEX LPAREN INT RPAREN
    (19) exp -> . NAME SLICE LPAREN INT COMMA INT RPAREN
    (21) exp -> . NAME
    (22) exp -> . NOT exp
    (23) exp -> . exp PLUS exp
    (24) exp -> . exp MINUS exp
    (25) exp -> . exp MULTIPLICATION exp
    (26) exp -> . exp DIVISION exp
    (27) exp -> . exp MODULO exp
    (28) exp -> . exp GREATERTHAN exp
    (29) exp -> . exp LESSTHAN exp
    (30) exp -> . exp GREATERTHANOREQUALTO exp
    (31) exp -> . exp LESSTHANOREQUALTO exp
    (32) exp -> . exp EQUALTO exp
    (33) exp -> . exp NOTEQUALTO exp
    (34) exp -> . exp COMMA exp
    (35) exp -> . exp AND exp
    (36) exp -> . exp OR exp
    (37) exp -> . exp POW exp
    (38) exp -> . STRING
    (39) exp -> . MINUS exp

    LPAREN          shift and go to state 44
    FLOAT           shift and go to state 12
    INT             shift and go to state 13
    BOOL            shift and go to state 14
    CHAR            shift and go to state 15
    NAME            shift and go to state 16
    NOT             shift and go to state 17
    STRING          shift and go to state 19
    MINUS           shift and go to state 18

    exp                            shift and go to state 93

state 78

    (16) exp -> NAME LSQB INT . RSQB

    RSQB            shift and go to state 94


state 79

    (17) exp -> NAME POP LPAREN . INT RPAREN

    INT             shift and go to state 95


state 80

    (18) exp -> NAME INDEX LPAREN . INT RPAREN

    INT             shift and go to state 96


state 81

    (19) exp -> NAME SLICE LPAREN . INT COMMA INT RPAREN

    INT             shift and go to state 97


state 82

    (16) exp -> NAME . LSQB INT RSQB
    (17) exp -> NAME . POP LPAREN INT RPAREN
    (18) exp -> NAME . INDEX LPAREN INT RPAREN
    (19) exp -> NAME . SLICE LPAREN INT COMMA INT RPAREN
    (21) exp -> NAME .
    (9) stmt -> NAME . ASSIGN exp SEMICOL
    (14) stmt -> NAME . INCREMENT SEMICOL
    (15) stmt -> NAME . DECREMENT SEMICOL
    (20) stmt -> NAME . PUSH LPAREN exp RPAREN SEMICOL

    LSQB            shift and go to state 46
    POP             shift and go to state 47
    INDEX           shift and go to state 48
    SLICE           shift and go to state 49
    SEMICOL         reduce using rule 21 (exp -> NAME .)
    PLUS            reduce using rule 21 (exp -> NAME .)
    MINUS           reduce using rule 21 (exp -> NAME .)
    MULTIPLICATION  reduce using rule 21 (exp -> NAME .)
    DIVISION        reduce using rule 21 (exp -> NAME .)
    MODULO          reduce using rule 21 (exp -> NAME .)
    GREATERTHAN     reduce using rule 21 (exp -> NAME .)
    LESSTHAN        reduce using rule 21 (exp -> NAME .)
    GREATERTHANOREQUALTO reduce using rule 21 (exp -> NAME .)
    LESSTHANOREQUALTO reduce using rule 21 (exp -> NAME .)
    EQUALTO         reduce using rule 21 (exp -> NAME .)
    NOTEQUALTO      reduce using rule 21 (exp -> NAME .)
    COMMA           reduce using rule 21 (exp -> NAME .)
    AND             reduce using rule 21 (exp -> NAME .)
    OR              reduce using rule 21 (exp -> NAME .)
    POW             reduce using rule 21 (exp -> NAME .)
    ASSIGN          shift and go to state 21
    INCREMENT       shift and go to state 22
    DECREMENT       shift and go to state 23
    PUSH            shift and go to state 24


state 83

    (7) stmt -> VARTYPE NAME ASSIGN exp . SEMICOL
    (23) exp -> exp . PLUS exp
    (24) exp -> exp . MINUS exp
    (25) exp -> exp . MULTIPLICATION exp
    (26) exp -> exp . DIVISION exp
    (27) exp -> exp . MODULO exp
    (28) exp -> exp . GREATERTHAN exp
    (29) exp -> exp . LESSTHAN exp
    (30) exp -> exp . GREATERTHANOREQUALTO exp
    (31) exp -> exp . LESSTHANOREQUALTO exp
    (32) exp -> exp . EQUALTO exp
    (33) exp -> exp . NOTEQUALTO exp
    (34) exp -> exp . COMMA exp
    (35) exp -> exp . AND exp
    (36) exp -> exp . OR exp
    (37) exp -> exp . POW exp

    SEMICOL         shift and go to state 98
    PLUS            shift and go to state 30
    MINUS           shift and go to state 31
    MULTIPLICATION  shift and go to state 32
    DIVISION        shift and go to state 33
    MODULO          shift and go to state 34
    GREATERTHAN     shift and go to state 35
    LESSTHAN        shift and go to state 36
    GREATERTHANOREQUALTO shift and go to state 37
    LESSTHANOREQUALTO shift and go to state 38
    EQUALTO         shift and go to state 39
    NOTEQUALTO      shift and go to state 40
    COMMA           shift and go to state 77
    AND             shift and go to state 41
    OR              shift and go to state 42
    POW             shift and go to state 43


state 84

    (8) stmt -> VARTYPE NAME ASSIGN stmt . SEMICOL

    SEMICOL         shift and go to state 99


state 85

    (9) stmt -> NAME ASSIGN exp SEMICOL .

    PRINT           reduce using rule 9 (stmt -> NAME ASSIGN exp SEMICOL .)
    VARTYPE         reduce using rule 9 (stmt -> NAME ASSIGN exp SEMICOL .)
    NAME            reduce using rule 9 (stmt -> NAME ASSIGN exp SEMICOL .)
    LIST            reduce using rule 9 (stmt -> NAME ASSIGN exp SEMICOL .)
    IF              reduce using rule 9 (stmt -> NAME ASSIGN exp SEMICOL .)
    DO              reduce using rule 9 (stmt -> NAME ASSIGN exp SEMICOL .)
    $end            reduce using rule 9 (stmt -> NAME ASSIGN exp SEMICOL .)
    RCURLY          reduce using rule 9 (stmt -> NAME ASSIGN exp SEMICOL .)
    SEMICOL         reduce using rule 9 (stmt -> NAME ASSIGN exp SEMICOL .)


state 86

    (20) stmt -> NAME PUSH LPAREN exp . RPAREN SEMICOL
    (23) exp -> exp . PLUS exp
    (24) exp -> exp . MINUS exp
    (25) exp -> exp . MULTIPLICATION exp
    (26) exp -> exp . DIVISION exp
    (27) exp -> exp . MODULO exp
    (28) exp -> exp . GREATERTHAN exp
    (29) exp -> exp . LESSTHAN exp
    (30) exp -> exp . GREATERTHANOREQUALTO exp
    (31) exp -> exp . LESSTHANOREQUALTO exp
    (32) exp -> exp . EQUALTO exp
    (33) exp -> exp . NOTEQUALTO exp
    (34) exp -> exp . COMMA exp
    (35) exp -> exp . AND exp
    (36) exp -> exp . OR exp
    (37) exp -> exp . POW exp

    RPAREN          shift and go to state 100
    PLUS            shift and go to state 30
    MINUS           shift and go to state 31
    MULTIPLICATION  shift and go to state 32
    DIVISION        shift and go to state 33
    MODULO          shift and go to state 34
    GREATERTHAN     shift and go to state 35
    LESSTHAN        shift and go to state 36
    GREATERTHANOREQUALTO shift and go to state 37
    LESSTHANOREQUALTO shift and go to state 38
    EQUALTO         shift and go to state 39
    NOTEQUALTO      shift and go to state 40
    COMMA           shift and go to state 77
    AND             shift and go to state 41
    OR              shift and go to state 42
    POW             shift and go to state 43


state 87

    (40) stmt -> LIST NAME ASSIGN LSQB . exp RSQB SEMICOL
    (41) stmt -> LIST NAME ASSIGN LSQB . RSQB SEMICOL
    (3) exp -> . LPAREN exp RPAREN
    (10) exp -> . FLOAT
    (11) exp -> . INT
    (12) exp -> . BOOL
    (13) exp -> . CHAR
    (16) exp -> . NAME LSQB INT RSQB
    (17) exp -> . NAME POP LPAREN INT RPAREN
    (18) exp -> . NAME INDEX LPAREN INT RPAREN
    (19) exp -> . NAME SLICE LPAREN INT COMMA INT RPAREN
    (21) exp -> . NAME
    (22) exp -> . NOT exp
    (23) exp -> . exp PLUS exp
    (24) exp -> . exp MINUS exp
    (25) exp -> . exp MULTIPLICATION exp
    (26) exp -> . exp DIVISION exp
    (27) exp -> . exp MODULO exp
    (28) exp -> . exp GREATERTHAN exp
    (29) exp -> . exp LESSTHAN exp
    (30) exp -> . exp GREATERTHANOREQUALTO exp
    (31) exp -> . exp LESSTHANOREQUALTO exp
    (32) exp -> . exp EQUALTO exp
    (33) exp -> . exp NOTEQUALTO exp
    (34) exp -> . exp COMMA exp
    (35) exp -> . exp AND exp
    (36) exp -> . exp OR exp
    (37) exp -> . exp POW exp
    (38) exp -> . STRING
    (39) exp -> . MINUS exp

    RSQB            shift and go to state 102
    LPAREN          shift and go to state 44
    FLOAT           shift and go to state 12
    INT             shift and go to state 13
    BOOL            shift and go to state 14
    CHAR            shift and go to state 15
    NAME            shift and go to state 16
    NOT             shift and go to state 17
    STRING          shift and go to state 19
    MINUS           shift and go to state 18

    exp                            shift and go to state 101

state 88

    (42) stmt -> IF LPAREN exp RPAREN . LCURLY S RCURLY block

    LCURLY          shift and go to state 103


state 89

    (46) stmt -> DO LCURLY S RCURLY . block_w
    (47) block_w -> . WHILE LPAREN exp RPAREN SEMICOL

    WHILE           shift and go to state 105

    block_w                        shift and go to state 104

state 90

    (4) stmt -> PRINT exp COMMA exp SEMICOL .

    PRINT           reduce using rule 4 (stmt -> PRINT exp COMMA exp SEMICOL .)
    VARTYPE         reduce using rule 4 (stmt -> PRINT exp COMMA exp SEMICOL .)
    NAME            reduce using rule 4 (stmt -> PRINT exp COMMA exp SEMICOL .)
    LIST            reduce using rule 4 (stmt -> PRINT exp COMMA exp SEMICOL .)
    IF              reduce using rule 4 (stmt -> PRINT exp COMMA exp SEMICOL .)
    DO              reduce using rule 4 (stmt -> PRINT exp COMMA exp SEMICOL .)
    $end            reduce using rule 4 (stmt -> PRINT exp COMMA exp SEMICOL .)
    RCURLY          reduce using rule 4 (stmt -> PRINT exp COMMA exp SEMICOL .)
    SEMICOL         reduce using rule 4 (stmt -> PRINT exp COMMA exp SEMICOL .)


state 91

    (3) exp -> LPAREN exp RPAREN .

    RPAREN          reduce using rule 3 (exp -> LPAREN exp RPAREN .)
    PLUS            reduce using rule 3 (exp -> LPAREN exp RPAREN .)
    MINUS           reduce using rule 3 (exp -> LPAREN exp RPAREN .)
    MULTIPLICATION  reduce using rule 3 (exp -> LPAREN exp RPAREN .)
    DIVISION        reduce using rule 3 (exp -> LPAREN exp RPAREN .)
    MODULO          reduce using rule 3 (exp -> LPAREN exp RPAREN .)
    GREATERTHAN     reduce using rule 3 (exp -> LPAREN exp RPAREN .)
    LESSTHAN        reduce using rule 3 (exp -> LPAREN exp RPAREN .)
    GREATERTHANOREQUALTO reduce using rule 3 (exp -> LPAREN exp RPAREN .)
    LESSTHANOREQUALTO reduce using rule 3 (exp -> LPAREN exp RPAREN .)
    EQUALTO         reduce using rule 3 (exp -> LPAREN exp RPAREN .)
    NOTEQUALTO      reduce using rule 3 (exp -> LPAREN exp RPAREN .)
    COMMA           reduce using rule 3 (exp -> LPAREN exp RPAREN .)
    AND             reduce using rule 3 (exp -> LPAREN exp RPAREN .)
    OR              reduce using rule 3 (exp -> LPAREN exp RPAREN .)
    POW             reduce using rule 3 (exp -> LPAREN exp RPAREN .)
    SEMICOL         reduce using rule 3 (exp -> LPAREN exp RPAREN .)
    RSQB            reduce using rule 3 (exp -> LPAREN exp RPAREN .)


state 92

    (6) stmt -> PRINT LPAREN exp RPAREN SEMICOL .

    PRINT           reduce using rule 6 (stmt -> PRINT LPAREN exp RPAREN SEMICOL .)
    VARTYPE         reduce using rule 6 (stmt -> PRINT LPAREN exp RPAREN SEMICOL .)
    NAME            reduce using rule 6 (stmt -> PRINT LPAREN exp RPAREN SEMICOL .)
    LIST            reduce using rule 6 (stmt -> PRINT LPAREN exp RPAREN SEMICOL .)
    IF              reduce using rule 6 (stmt -> PRINT LPAREN exp RPAREN SEMICOL .)
    DO              reduce using rule 6 (stmt -> PRINT LPAREN exp RPAREN SEMICOL .)
    $end            reduce using rule 6 (stmt -> PRINT LPAREN exp RPAREN SEMICOL .)
    RCURLY          reduce using rule 6 (stmt -> PRINT LPAREN exp RPAREN SEMICOL .)
    SEMICOL         reduce using rule 6 (stmt -> PRINT LPAREN exp RPAREN SEMICOL .)


state 93

    (34) exp -> exp COMMA exp .
    (23) exp -> exp . PLUS exp
    (24) exp -> exp . MINUS exp
    (25) exp -> exp . MULTIPLICATION exp
    (26) exp -> exp . DIVISION exp
    (27) exp -> exp . MODULO exp
    (28) exp -> exp . GREATERTHAN exp
    (29) exp -> exp . LESSTHAN exp
    (30) exp -> exp . GREATERTHANOREQUALTO exp
    (31) exp -> exp . LESSTHANOREQUALTO exp
    (32) exp -> exp . EQUALTO exp
    (33) exp -> exp . NOTEQUALTO exp
    (34) exp -> exp . COMMA exp
    (35) exp -> exp . AND exp
    (36) exp -> exp . OR exp
    (37) exp -> exp . POW exp

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MULTIPLICATION resolved as shift
  ! shift/reduce conflict for DIVISION resolved as shift
  ! shift/reduce conflict for MODULO resolved as shift
  ! shift/reduce conflict for GREATERTHAN resolved as shift
  ! shift/reduce conflict for LESSTHAN resolved as shift
  ! shift/reduce conflict for GREATERTHANOREQUALTO resolved as shift
  ! shift/reduce conflict for LESSTHANOREQUALTO resolved as shift
  ! shift/reduce conflict for EQUALTO resolved as shift
  ! shift/reduce conflict for NOTEQUALTO resolved as shift
  ! shift/reduce conflict for COMMA resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for POW resolved as shift
    RPAREN          reduce using rule 34 (exp -> exp COMMA exp .)
    SEMICOL         reduce using rule 34 (exp -> exp COMMA exp .)
    RSQB            reduce using rule 34 (exp -> exp COMMA exp .)
    PLUS            shift and go to state 30
    MINUS           shift and go to state 31
    MULTIPLICATION  shift and go to state 32
    DIVISION        shift and go to state 33
    MODULO          shift and go to state 34
    GREATERTHAN     shift and go to state 35
    LESSTHAN        shift and go to state 36
    GREATERTHANOREQUALTO shift and go to state 37
    LESSTHANOREQUALTO shift and go to state 38
    EQUALTO         shift and go to state 39
    NOTEQUALTO      shift and go to state 40
    COMMA           shift and go to state 77
    AND             shift and go to state 41
    OR              shift and go to state 42
    POW             shift and go to state 43

  ! PLUS            [ reduce using rule 34 (exp -> exp COMMA exp .) ]
  ! MINUS           [ reduce using rule 34 (exp -> exp COMMA exp .) ]
  ! MULTIPLICATION  [ reduce using rule 34 (exp -> exp COMMA exp .) ]
  ! DIVISION        [ reduce using rule 34 (exp -> exp COMMA exp .) ]
  ! MODULO          [ reduce using rule 34 (exp -> exp COMMA exp .) ]
  ! GREATERTHAN     [ reduce using rule 34 (exp -> exp COMMA exp .) ]
  ! LESSTHAN        [ reduce using rule 34 (exp -> exp COMMA exp .) ]
  ! GREATERTHANOREQUALTO [ reduce using rule 34 (exp -> exp COMMA exp .) ]
  ! LESSTHANOREQUALTO [ reduce using rule 34 (exp -> exp COMMA exp .) ]
  ! EQUALTO         [ reduce using rule 34 (exp -> exp COMMA exp .) ]
  ! NOTEQUALTO      [ reduce using rule 34 (exp -> exp COMMA exp .) ]
  ! COMMA           [ reduce using rule 34 (exp -> exp COMMA exp .) ]
  ! AND             [ reduce using rule 34 (exp -> exp COMMA exp .) ]
  ! OR              [ reduce using rule 34 (exp -> exp COMMA exp .) ]
  ! POW             [ reduce using rule 34 (exp -> exp COMMA exp .) ]


state 94

    (16) exp -> NAME LSQB INT RSQB .

    COMMA           reduce using rule 16 (exp -> NAME LSQB INT RSQB .)
    SEMICOL         reduce using rule 16 (exp -> NAME LSQB INT RSQB .)
    PLUS            reduce using rule 16 (exp -> NAME LSQB INT RSQB .)
    MINUS           reduce using rule 16 (exp -> NAME LSQB INT RSQB .)
    MULTIPLICATION  reduce using rule 16 (exp -> NAME LSQB INT RSQB .)
    DIVISION        reduce using rule 16 (exp -> NAME LSQB INT RSQB .)
    MODULO          reduce using rule 16 (exp -> NAME LSQB INT RSQB .)
    GREATERTHAN     reduce using rule 16 (exp -> NAME LSQB INT RSQB .)
    LESSTHAN        reduce using rule 16 (exp -> NAME LSQB INT RSQB .)
    GREATERTHANOREQUALTO reduce using rule 16 (exp -> NAME LSQB INT RSQB .)
    LESSTHANOREQUALTO reduce using rule 16 (exp -> NAME LSQB INT RSQB .)
    EQUALTO         reduce using rule 16 (exp -> NAME LSQB INT RSQB .)
    NOTEQUALTO      reduce using rule 16 (exp -> NAME LSQB INT RSQB .)
    AND             reduce using rule 16 (exp -> NAME LSQB INT RSQB .)
    OR              reduce using rule 16 (exp -> NAME LSQB INT RSQB .)
    POW             reduce using rule 16 (exp -> NAME LSQB INT RSQB .)
    RPAREN          reduce using rule 16 (exp -> NAME LSQB INT RSQB .)
    RSQB            reduce using rule 16 (exp -> NAME LSQB INT RSQB .)


state 95

    (17) exp -> NAME POP LPAREN INT . RPAREN

    RPAREN          shift and go to state 106


state 96

    (18) exp -> NAME INDEX LPAREN INT . RPAREN

    RPAREN          shift and go to state 107


state 97

    (19) exp -> NAME SLICE LPAREN INT . COMMA INT RPAREN

    COMMA           shift and go to state 108


state 98

    (7) stmt -> VARTYPE NAME ASSIGN exp SEMICOL .

    PRINT           reduce using rule 7 (stmt -> VARTYPE NAME ASSIGN exp SEMICOL .)
    VARTYPE         reduce using rule 7 (stmt -> VARTYPE NAME ASSIGN exp SEMICOL .)
    NAME            reduce using rule 7 (stmt -> VARTYPE NAME ASSIGN exp SEMICOL .)
    LIST            reduce using rule 7 (stmt -> VARTYPE NAME ASSIGN exp SEMICOL .)
    IF              reduce using rule 7 (stmt -> VARTYPE NAME ASSIGN exp SEMICOL .)
    DO              reduce using rule 7 (stmt -> VARTYPE NAME ASSIGN exp SEMICOL .)
    $end            reduce using rule 7 (stmt -> VARTYPE NAME ASSIGN exp SEMICOL .)
    RCURLY          reduce using rule 7 (stmt -> VARTYPE NAME ASSIGN exp SEMICOL .)
    SEMICOL         reduce using rule 7 (stmt -> VARTYPE NAME ASSIGN exp SEMICOL .)


state 99

    (8) stmt -> VARTYPE NAME ASSIGN stmt SEMICOL .

    PRINT           reduce using rule 8 (stmt -> VARTYPE NAME ASSIGN stmt SEMICOL .)
    VARTYPE         reduce using rule 8 (stmt -> VARTYPE NAME ASSIGN stmt SEMICOL .)
    NAME            reduce using rule 8 (stmt -> VARTYPE NAME ASSIGN stmt SEMICOL .)
    LIST            reduce using rule 8 (stmt -> VARTYPE NAME ASSIGN stmt SEMICOL .)
    IF              reduce using rule 8 (stmt -> VARTYPE NAME ASSIGN stmt SEMICOL .)
    DO              reduce using rule 8 (stmt -> VARTYPE NAME ASSIGN stmt SEMICOL .)
    $end            reduce using rule 8 (stmt -> VARTYPE NAME ASSIGN stmt SEMICOL .)
    RCURLY          reduce using rule 8 (stmt -> VARTYPE NAME ASSIGN stmt SEMICOL .)
    SEMICOL         reduce using rule 8 (stmt -> VARTYPE NAME ASSIGN stmt SEMICOL .)


state 100

    (20) stmt -> NAME PUSH LPAREN exp RPAREN . SEMICOL

    SEMICOL         shift and go to state 109


state 101

    (40) stmt -> LIST NAME ASSIGN LSQB exp . RSQB SEMICOL
    (23) exp -> exp . PLUS exp
    (24) exp -> exp . MINUS exp
    (25) exp -> exp . MULTIPLICATION exp
    (26) exp -> exp . DIVISION exp
    (27) exp -> exp . MODULO exp
    (28) exp -> exp . GREATERTHAN exp
    (29) exp -> exp . LESSTHAN exp
    (30) exp -> exp . GREATERTHANOREQUALTO exp
    (31) exp -> exp . LESSTHANOREQUALTO exp
    (32) exp -> exp . EQUALTO exp
    (33) exp -> exp . NOTEQUALTO exp
    (34) exp -> exp . COMMA exp
    (35) exp -> exp . AND exp
    (36) exp -> exp . OR exp
    (37) exp -> exp . POW exp

    RSQB            shift and go to state 110
    PLUS            shift and go to state 30
    MINUS           shift and go to state 31
    MULTIPLICATION  shift and go to state 32
    DIVISION        shift and go to state 33
    MODULO          shift and go to state 34
    GREATERTHAN     shift and go to state 35
    LESSTHAN        shift and go to state 36
    GREATERTHANOREQUALTO shift and go to state 37
    LESSTHANOREQUALTO shift and go to state 38
    EQUALTO         shift and go to state 39
    NOTEQUALTO      shift and go to state 40
    COMMA           shift and go to state 77
    AND             shift and go to state 41
    OR              shift and go to state 42
    POW             shift and go to state 43


state 102

    (41) stmt -> LIST NAME ASSIGN LSQB RSQB . SEMICOL

    SEMICOL         shift and go to state 111


state 103

    (42) stmt -> IF LPAREN exp RPAREN LCURLY . S RCURLY block
    (1) S -> . stmt S
    (2) S -> .
    (4) stmt -> . PRINT exp COMMA exp SEMICOL
    (5) stmt -> . PRINT exp SEMICOL
    (6) stmt -> . PRINT LPAREN exp RPAREN SEMICOL
    (7) stmt -> . VARTYPE NAME ASSIGN exp SEMICOL
    (8) stmt -> . VARTYPE NAME ASSIGN stmt SEMICOL
    (9) stmt -> . NAME ASSIGN exp SEMICOL
    (14) stmt -> . NAME INCREMENT SEMICOL
    (15) stmt -> . NAME DECREMENT SEMICOL
    (20) stmt -> . NAME PUSH LPAREN exp RPAREN SEMICOL
    (40) stmt -> . LIST NAME ASSIGN LSQB exp RSQB SEMICOL
    (41) stmt -> . LIST NAME ASSIGN LSQB RSQB SEMICOL
    (42) stmt -> . IF LPAREN exp RPAREN LCURLY S RCURLY block
    (46) stmt -> . DO LCURLY S RCURLY block_w

    RCURLY          reduce using rule 2 (S -> .)
    PRINT           shift and go to state 3
    VARTYPE         shift and go to state 4
    NAME            shift and go to state 5
    LIST            shift and go to state 6
    IF              shift and go to state 7
    DO              shift and go to state 8

    S                              shift and go to state 112
    stmt                           shift and go to state 2

state 104

    (46) stmt -> DO LCURLY S RCURLY block_w .

    PRINT           reduce using rule 46 (stmt -> DO LCURLY S RCURLY block_w .)
    VARTYPE         reduce using rule 46 (stmt -> DO LCURLY S RCURLY block_w .)
    NAME            reduce using rule 46 (stmt -> DO LCURLY S RCURLY block_w .)
    LIST            reduce using rule 46 (stmt -> DO LCURLY S RCURLY block_w .)
    IF              reduce using rule 46 (stmt -> DO LCURLY S RCURLY block_w .)
    DO              reduce using rule 46 (stmt -> DO LCURLY S RCURLY block_w .)
    $end            reduce using rule 46 (stmt -> DO LCURLY S RCURLY block_w .)
    RCURLY          reduce using rule 46 (stmt -> DO LCURLY S RCURLY block_w .)
    SEMICOL         reduce using rule 46 (stmt -> DO LCURLY S RCURLY block_w .)


state 105

    (47) block_w -> WHILE . LPAREN exp RPAREN SEMICOL

    LPAREN          shift and go to state 113


state 106

    (17) exp -> NAME POP LPAREN INT RPAREN .

    COMMA           reduce using rule 17 (exp -> NAME POP LPAREN INT RPAREN .)
    SEMICOL         reduce using rule 17 (exp -> NAME POP LPAREN INT RPAREN .)
    PLUS            reduce using rule 17 (exp -> NAME POP LPAREN INT RPAREN .)
    MINUS           reduce using rule 17 (exp -> NAME POP LPAREN INT RPAREN .)
    MULTIPLICATION  reduce using rule 17 (exp -> NAME POP LPAREN INT RPAREN .)
    DIVISION        reduce using rule 17 (exp -> NAME POP LPAREN INT RPAREN .)
    MODULO          reduce using rule 17 (exp -> NAME POP LPAREN INT RPAREN .)
    GREATERTHAN     reduce using rule 17 (exp -> NAME POP LPAREN INT RPAREN .)
    LESSTHAN        reduce using rule 17 (exp -> NAME POP LPAREN INT RPAREN .)
    GREATERTHANOREQUALTO reduce using rule 17 (exp -> NAME POP LPAREN INT RPAREN .)
    LESSTHANOREQUALTO reduce using rule 17 (exp -> NAME POP LPAREN INT RPAREN .)
    EQUALTO         reduce using rule 17 (exp -> NAME POP LPAREN INT RPAREN .)
    NOTEQUALTO      reduce using rule 17 (exp -> NAME POP LPAREN INT RPAREN .)
    AND             reduce using rule 17 (exp -> NAME POP LPAREN INT RPAREN .)
    OR              reduce using rule 17 (exp -> NAME POP LPAREN INT RPAREN .)
    POW             reduce using rule 17 (exp -> NAME POP LPAREN INT RPAREN .)
    RPAREN          reduce using rule 17 (exp -> NAME POP LPAREN INT RPAREN .)
    RSQB            reduce using rule 17 (exp -> NAME POP LPAREN INT RPAREN .)


state 107

    (18) exp -> NAME INDEX LPAREN INT RPAREN .

    COMMA           reduce using rule 18 (exp -> NAME INDEX LPAREN INT RPAREN .)
    SEMICOL         reduce using rule 18 (exp -> NAME INDEX LPAREN INT RPAREN .)
    PLUS            reduce using rule 18 (exp -> NAME INDEX LPAREN INT RPAREN .)
    MINUS           reduce using rule 18 (exp -> NAME INDEX LPAREN INT RPAREN .)
    MULTIPLICATION  reduce using rule 18 (exp -> NAME INDEX LPAREN INT RPAREN .)
    DIVISION        reduce using rule 18 (exp -> NAME INDEX LPAREN INT RPAREN .)
    MODULO          reduce using rule 18 (exp -> NAME INDEX LPAREN INT RPAREN .)
    GREATERTHAN     reduce using rule 18 (exp -> NAME INDEX LPAREN INT RPAREN .)
    LESSTHAN        reduce using rule 18 (exp -> NAME INDEX LPAREN INT RPAREN .)
    GREATERTHANOREQUALTO reduce using rule 18 (exp -> NAME INDEX LPAREN INT RPAREN .)
    LESSTHANOREQUALTO reduce using rule 18 (exp -> NAME INDEX LPAREN INT RPAREN .)
    EQUALTO         reduce using rule 18 (exp -> NAME INDEX LPAREN INT RPAREN .)
    NOTEQUALTO      reduce using rule 18 (exp -> NAME INDEX LPAREN INT RPAREN .)
    AND             reduce using rule 18 (exp -> NAME INDEX LPAREN INT RPAREN .)
    OR              reduce using rule 18 (exp -> NAME INDEX LPAREN INT RPAREN .)
    POW             reduce using rule 18 (exp -> NAME INDEX LPAREN INT RPAREN .)
    RPAREN          reduce using rule 18 (exp -> NAME INDEX LPAREN INT RPAREN .)
    RSQB            reduce using rule 18 (exp -> NAME INDEX LPAREN INT RPAREN .)


state 108

    (19) exp -> NAME SLICE LPAREN INT COMMA . INT RPAREN

    INT             shift and go to state 114


state 109

    (20) stmt -> NAME PUSH LPAREN exp RPAREN SEMICOL .

    PRINT           reduce using rule 20 (stmt -> NAME PUSH LPAREN exp RPAREN SEMICOL .)
    VARTYPE         reduce using rule 20 (stmt -> NAME PUSH LPAREN exp RPAREN SEMICOL .)
    NAME            reduce using rule 20 (stmt -> NAME PUSH LPAREN exp RPAREN SEMICOL .)
    LIST            reduce using rule 20 (stmt -> NAME PUSH LPAREN exp RPAREN SEMICOL .)
    IF              reduce using rule 20 (stmt -> NAME PUSH LPAREN exp RPAREN SEMICOL .)
    DO              reduce using rule 20 (stmt -> NAME PUSH LPAREN exp RPAREN SEMICOL .)
    $end            reduce using rule 20 (stmt -> NAME PUSH LPAREN exp RPAREN SEMICOL .)
    RCURLY          reduce using rule 20 (stmt -> NAME PUSH LPAREN exp RPAREN SEMICOL .)
    SEMICOL         reduce using rule 20 (stmt -> NAME PUSH LPAREN exp RPAREN SEMICOL .)


state 110

    (40) stmt -> LIST NAME ASSIGN LSQB exp RSQB . SEMICOL

    SEMICOL         shift and go to state 115


state 111

    (41) stmt -> LIST NAME ASSIGN LSQB RSQB SEMICOL .

    PRINT           reduce using rule 41 (stmt -> LIST NAME ASSIGN LSQB RSQB SEMICOL .)
    VARTYPE         reduce using rule 41 (stmt -> LIST NAME ASSIGN LSQB RSQB SEMICOL .)
    NAME            reduce using rule 41 (stmt -> LIST NAME ASSIGN LSQB RSQB SEMICOL .)
    LIST            reduce using rule 41 (stmt -> LIST NAME ASSIGN LSQB RSQB SEMICOL .)
    IF              reduce using rule 41 (stmt -> LIST NAME ASSIGN LSQB RSQB SEMICOL .)
    DO              reduce using rule 41 (stmt -> LIST NAME ASSIGN LSQB RSQB SEMICOL .)
    $end            reduce using rule 41 (stmt -> LIST NAME ASSIGN LSQB RSQB SEMICOL .)
    RCURLY          reduce using rule 41 (stmt -> LIST NAME ASSIGN LSQB RSQB SEMICOL .)
    SEMICOL         reduce using rule 41 (stmt -> LIST NAME ASSIGN LSQB RSQB SEMICOL .)


state 112

    (42) stmt -> IF LPAREN exp RPAREN LCURLY S . RCURLY block

    RCURLY          shift and go to state 116


state 113

    (47) block_w -> WHILE LPAREN . exp RPAREN SEMICOL
    (3) exp -> . LPAREN exp RPAREN
    (10) exp -> . FLOAT
    (11) exp -> . INT
    (12) exp -> . BOOL
    (13) exp -> . CHAR
    (16) exp -> . NAME LSQB INT RSQB
    (17) exp -> . NAME POP LPAREN INT RPAREN
    (18) exp -> . NAME INDEX LPAREN INT RPAREN
    (19) exp -> . NAME SLICE LPAREN INT COMMA INT RPAREN
    (21) exp -> . NAME
    (22) exp -> . NOT exp
    (23) exp -> . exp PLUS exp
    (24) exp -> . exp MINUS exp
    (25) exp -> . exp MULTIPLICATION exp
    (26) exp -> . exp DIVISION exp
    (27) exp -> . exp MODULO exp
    (28) exp -> . exp GREATERTHAN exp
    (29) exp -> . exp LESSTHAN exp
    (30) exp -> . exp GREATERTHANOREQUALTO exp
    (31) exp -> . exp LESSTHANOREQUALTO exp
    (32) exp -> . exp EQUALTO exp
    (33) exp -> . exp NOTEQUALTO exp
    (34) exp -> . exp COMMA exp
    (35) exp -> . exp AND exp
    (36) exp -> . exp OR exp
    (37) exp -> . exp POW exp
    (38) exp -> . STRING
    (39) exp -> . MINUS exp

    LPAREN          shift and go to state 44
    FLOAT           shift and go to state 12
    INT             shift and go to state 13
    BOOL            shift and go to state 14
    CHAR            shift and go to state 15
    NAME            shift and go to state 16
    NOT             shift and go to state 17
    STRING          shift and go to state 19
    MINUS           shift and go to state 18

    exp                            shift and go to state 117

state 114

    (19) exp -> NAME SLICE LPAREN INT COMMA INT . RPAREN

    RPAREN          shift and go to state 118


state 115

    (40) stmt -> LIST NAME ASSIGN LSQB exp RSQB SEMICOL .

    PRINT           reduce using rule 40 (stmt -> LIST NAME ASSIGN LSQB exp RSQB SEMICOL .)
    VARTYPE         reduce using rule 40 (stmt -> LIST NAME ASSIGN LSQB exp RSQB SEMICOL .)
    NAME            reduce using rule 40 (stmt -> LIST NAME ASSIGN LSQB exp RSQB SEMICOL .)
    LIST            reduce using rule 40 (stmt -> LIST NAME ASSIGN LSQB exp RSQB SEMICOL .)
    IF              reduce using rule 40 (stmt -> LIST NAME ASSIGN LSQB exp RSQB SEMICOL .)
    DO              reduce using rule 40 (stmt -> LIST NAME ASSIGN LSQB exp RSQB SEMICOL .)
    $end            reduce using rule 40 (stmt -> LIST NAME ASSIGN LSQB exp RSQB SEMICOL .)
    RCURLY          reduce using rule 40 (stmt -> LIST NAME ASSIGN LSQB exp RSQB SEMICOL .)
    SEMICOL         reduce using rule 40 (stmt -> LIST NAME ASSIGN LSQB exp RSQB SEMICOL .)


state 116

    (42) stmt -> IF LPAREN exp RPAREN LCURLY S RCURLY . block
    (43) block -> . ELSEIF LPAREN exp RPAREN LCURLY S RCURLY block
    (44) block -> . ELSE LCURLY S RCURLY
    (45) block -> .

    ELSEIF          shift and go to state 120
    ELSE            shift and go to state 121
    PRINT           reduce using rule 45 (block -> .)
    VARTYPE         reduce using rule 45 (block -> .)
    NAME            reduce using rule 45 (block -> .)
    LIST            reduce using rule 45 (block -> .)
    IF              reduce using rule 45 (block -> .)
    DO              reduce using rule 45 (block -> .)
    $end            reduce using rule 45 (block -> .)
    RCURLY          reduce using rule 45 (block -> .)
    SEMICOL         reduce using rule 45 (block -> .)

    block                          shift and go to state 119

state 117

    (47) block_w -> WHILE LPAREN exp . RPAREN SEMICOL
    (23) exp -> exp . PLUS exp
    (24) exp -> exp . MINUS exp
    (25) exp -> exp . MULTIPLICATION exp
    (26) exp -> exp . DIVISION exp
    (27) exp -> exp . MODULO exp
    (28) exp -> exp . GREATERTHAN exp
    (29) exp -> exp . LESSTHAN exp
    (30) exp -> exp . GREATERTHANOREQUALTO exp
    (31) exp -> exp . LESSTHANOREQUALTO exp
    (32) exp -> exp . EQUALTO exp
    (33) exp -> exp . NOTEQUALTO exp
    (34) exp -> exp . COMMA exp
    (35) exp -> exp . AND exp
    (36) exp -> exp . OR exp
    (37) exp -> exp . POW exp

    RPAREN          shift and go to state 122
    PLUS            shift and go to state 30
    MINUS           shift and go to state 31
    MULTIPLICATION  shift and go to state 32
    DIVISION        shift and go to state 33
    MODULO          shift and go to state 34
    GREATERTHAN     shift and go to state 35
    LESSTHAN        shift and go to state 36
    GREATERTHANOREQUALTO shift and go to state 37
    LESSTHANOREQUALTO shift and go to state 38
    EQUALTO         shift and go to state 39
    NOTEQUALTO      shift and go to state 40
    COMMA           shift and go to state 77
    AND             shift and go to state 41
    OR              shift and go to state 42
    POW             shift and go to state 43


state 118

    (19) exp -> NAME SLICE LPAREN INT COMMA INT RPAREN .

    COMMA           reduce using rule 19 (exp -> NAME SLICE LPAREN INT COMMA INT RPAREN .)
    SEMICOL         reduce using rule 19 (exp -> NAME SLICE LPAREN INT COMMA INT RPAREN .)
    PLUS            reduce using rule 19 (exp -> NAME SLICE LPAREN INT COMMA INT RPAREN .)
    MINUS           reduce using rule 19 (exp -> NAME SLICE LPAREN INT COMMA INT RPAREN .)
    MULTIPLICATION  reduce using rule 19 (exp -> NAME SLICE LPAREN INT COMMA INT RPAREN .)
    DIVISION        reduce using rule 19 (exp -> NAME SLICE LPAREN INT COMMA INT RPAREN .)
    MODULO          reduce using rule 19 (exp -> NAME SLICE LPAREN INT COMMA INT RPAREN .)
    GREATERTHAN     reduce using rule 19 (exp -> NAME SLICE LPAREN INT COMMA INT RPAREN .)
    LESSTHAN        reduce using rule 19 (exp -> NAME SLICE LPAREN INT COMMA INT RPAREN .)
    GREATERTHANOREQUALTO reduce using rule 19 (exp -> NAME SLICE LPAREN INT COMMA INT RPAREN .)
    LESSTHANOREQUALTO reduce using rule 19 (exp -> NAME SLICE LPAREN INT COMMA INT RPAREN .)
    EQUALTO         reduce using rule 19 (exp -> NAME SLICE LPAREN INT COMMA INT RPAREN .)
    NOTEQUALTO      reduce using rule 19 (exp -> NAME SLICE LPAREN INT COMMA INT RPAREN .)
    AND             reduce using rule 19 (exp -> NAME SLICE LPAREN INT COMMA INT RPAREN .)
    OR              reduce using rule 19 (exp -> NAME SLICE LPAREN INT COMMA INT RPAREN .)
    POW             reduce using rule 19 (exp -> NAME SLICE LPAREN INT COMMA INT RPAREN .)
    RPAREN          reduce using rule 19 (exp -> NAME SLICE LPAREN INT COMMA INT RPAREN .)
    RSQB            reduce using rule 19 (exp -> NAME SLICE LPAREN INT COMMA INT RPAREN .)


state 119

    (42) stmt -> IF LPAREN exp RPAREN LCURLY S RCURLY block .

    PRINT           reduce using rule 42 (stmt -> IF LPAREN exp RPAREN LCURLY S RCURLY block .)
    VARTYPE         reduce using rule 42 (stmt -> IF LPAREN exp RPAREN LCURLY S RCURLY block .)
    NAME            reduce using rule 42 (stmt -> IF LPAREN exp RPAREN LCURLY S RCURLY block .)
    LIST            reduce using rule 42 (stmt -> IF LPAREN exp RPAREN LCURLY S RCURLY block .)
    IF              reduce using rule 42 (stmt -> IF LPAREN exp RPAREN LCURLY S RCURLY block .)
    DO              reduce using rule 42 (stmt -> IF LPAREN exp RPAREN LCURLY S RCURLY block .)
    $end            reduce using rule 42 (stmt -> IF LPAREN exp RPAREN LCURLY S RCURLY block .)
    RCURLY          reduce using rule 42 (stmt -> IF LPAREN exp RPAREN LCURLY S RCURLY block .)
    SEMICOL         reduce using rule 42 (stmt -> IF LPAREN exp RPAREN LCURLY S RCURLY block .)


state 120

    (43) block -> ELSEIF . LPAREN exp RPAREN LCURLY S RCURLY block

    LPAREN          shift and go to state 123


state 121

    (44) block -> ELSE . LCURLY S RCURLY

    LCURLY          shift and go to state 124


state 122

    (47) block_w -> WHILE LPAREN exp RPAREN . SEMICOL

    SEMICOL         shift and go to state 125


state 123

    (43) block -> ELSEIF LPAREN . exp RPAREN LCURLY S RCURLY block
    (3) exp -> . LPAREN exp RPAREN
    (10) exp -> . FLOAT
    (11) exp -> . INT
    (12) exp -> . BOOL
    (13) exp -> . CHAR
    (16) exp -> . NAME LSQB INT RSQB
    (17) exp -> . NAME POP LPAREN INT RPAREN
    (18) exp -> . NAME INDEX LPAREN INT RPAREN
    (19) exp -> . NAME SLICE LPAREN INT COMMA INT RPAREN
    (21) exp -> . NAME
    (22) exp -> . NOT exp
    (23) exp -> . exp PLUS exp
    (24) exp -> . exp MINUS exp
    (25) exp -> . exp MULTIPLICATION exp
    (26) exp -> . exp DIVISION exp
    (27) exp -> . exp MODULO exp
    (28) exp -> . exp GREATERTHAN exp
    (29) exp -> . exp LESSTHAN exp
    (30) exp -> . exp GREATERTHANOREQUALTO exp
    (31) exp -> . exp LESSTHANOREQUALTO exp
    (32) exp -> . exp EQUALTO exp
    (33) exp -> . exp NOTEQUALTO exp
    (34) exp -> . exp COMMA exp
    (35) exp -> . exp AND exp
    (36) exp -> . exp OR exp
    (37) exp -> . exp POW exp
    (38) exp -> . STRING
    (39) exp -> . MINUS exp

    LPAREN          shift and go to state 44
    FLOAT           shift and go to state 12
    INT             shift and go to state 13
    BOOL            shift and go to state 14
    CHAR            shift and go to state 15
    NAME            shift and go to state 16
    NOT             shift and go to state 17
    STRING          shift and go to state 19
    MINUS           shift and go to state 18

    exp                            shift and go to state 126

state 124

    (44) block -> ELSE LCURLY . S RCURLY
    (1) S -> . stmt S
    (2) S -> .
    (4) stmt -> . PRINT exp COMMA exp SEMICOL
    (5) stmt -> . PRINT exp SEMICOL
    (6) stmt -> . PRINT LPAREN exp RPAREN SEMICOL
    (7) stmt -> . VARTYPE NAME ASSIGN exp SEMICOL
    (8) stmt -> . VARTYPE NAME ASSIGN stmt SEMICOL
    (9) stmt -> . NAME ASSIGN exp SEMICOL
    (14) stmt -> . NAME INCREMENT SEMICOL
    (15) stmt -> . NAME DECREMENT SEMICOL
    (20) stmt -> . NAME PUSH LPAREN exp RPAREN SEMICOL
    (40) stmt -> . LIST NAME ASSIGN LSQB exp RSQB SEMICOL
    (41) stmt -> . LIST NAME ASSIGN LSQB RSQB SEMICOL
    (42) stmt -> . IF LPAREN exp RPAREN LCURLY S RCURLY block
    (46) stmt -> . DO LCURLY S RCURLY block_w

    RCURLY          reduce using rule 2 (S -> .)
    PRINT           shift and go to state 3
    VARTYPE         shift and go to state 4
    NAME            shift and go to state 5
    LIST            shift and go to state 6
    IF              shift and go to state 7
    DO              shift and go to state 8

    S                              shift and go to state 127
    stmt                           shift and go to state 2

state 125

    (47) block_w -> WHILE LPAREN exp RPAREN SEMICOL .

    PRINT           reduce using rule 47 (block_w -> WHILE LPAREN exp RPAREN SEMICOL .)
    VARTYPE         reduce using rule 47 (block_w -> WHILE LPAREN exp RPAREN SEMICOL .)
    NAME            reduce using rule 47 (block_w -> WHILE LPAREN exp RPAREN SEMICOL .)
    LIST            reduce using rule 47 (block_w -> WHILE LPAREN exp RPAREN SEMICOL .)
    IF              reduce using rule 47 (block_w -> WHILE LPAREN exp RPAREN SEMICOL .)
    DO              reduce using rule 47 (block_w -> WHILE LPAREN exp RPAREN SEMICOL .)
    $end            reduce using rule 47 (block_w -> WHILE LPAREN exp RPAREN SEMICOL .)
    RCURLY          reduce using rule 47 (block_w -> WHILE LPAREN exp RPAREN SEMICOL .)
    SEMICOL         reduce using rule 47 (block_w -> WHILE LPAREN exp RPAREN SEMICOL .)


state 126

    (43) block -> ELSEIF LPAREN exp . RPAREN LCURLY S RCURLY block
    (23) exp -> exp . PLUS exp
    (24) exp -> exp . MINUS exp
    (25) exp -> exp . MULTIPLICATION exp
    (26) exp -> exp . DIVISION exp
    (27) exp -> exp . MODULO exp
    (28) exp -> exp . GREATERTHAN exp
    (29) exp -> exp . LESSTHAN exp
    (30) exp -> exp . GREATERTHANOREQUALTO exp
    (31) exp -> exp . LESSTHANOREQUALTO exp
    (32) exp -> exp . EQUALTO exp
    (33) exp -> exp . NOTEQUALTO exp
    (34) exp -> exp . COMMA exp
    (35) exp -> exp . AND exp
    (36) exp -> exp . OR exp
    (37) exp -> exp . POW exp

    RPAREN          shift and go to state 128
    PLUS            shift and go to state 30
    MINUS           shift and go to state 31
    MULTIPLICATION  shift and go to state 32
    DIVISION        shift and go to state 33
    MODULO          shift and go to state 34
    GREATERTHAN     shift and go to state 35
    LESSTHAN        shift and go to state 36
    GREATERTHANOREQUALTO shift and go to state 37
    LESSTHANOREQUALTO shift and go to state 38
    EQUALTO         shift and go to state 39
    NOTEQUALTO      shift and go to state 40
    COMMA           shift and go to state 77
    AND             shift and go to state 41
    OR              shift and go to state 42
    POW             shift and go to state 43


state 127

    (44) block -> ELSE LCURLY S . RCURLY

    RCURLY          shift and go to state 129


state 128

    (43) block -> ELSEIF LPAREN exp RPAREN . LCURLY S RCURLY block

    LCURLY          shift and go to state 130


state 129

    (44) block -> ELSE LCURLY S RCURLY .

    PRINT           reduce using rule 44 (block -> ELSE LCURLY S RCURLY .)
    VARTYPE         reduce using rule 44 (block -> ELSE LCURLY S RCURLY .)
    NAME            reduce using rule 44 (block -> ELSE LCURLY S RCURLY .)
    LIST            reduce using rule 44 (block -> ELSE LCURLY S RCURLY .)
    IF              reduce using rule 44 (block -> ELSE LCURLY S RCURLY .)
    DO              reduce using rule 44 (block -> ELSE LCURLY S RCURLY .)
    $end            reduce using rule 44 (block -> ELSE LCURLY S RCURLY .)
    RCURLY          reduce using rule 44 (block -> ELSE LCURLY S RCURLY .)
    SEMICOL         reduce using rule 44 (block -> ELSE LCURLY S RCURLY .)


state 130

    (43) block -> ELSEIF LPAREN exp RPAREN LCURLY . S RCURLY block
    (1) S -> . stmt S
    (2) S -> .
    (4) stmt -> . PRINT exp COMMA exp SEMICOL
    (5) stmt -> . PRINT exp SEMICOL
    (6) stmt -> . PRINT LPAREN exp RPAREN SEMICOL
    (7) stmt -> . VARTYPE NAME ASSIGN exp SEMICOL
    (8) stmt -> . VARTYPE NAME ASSIGN stmt SEMICOL
    (9) stmt -> . NAME ASSIGN exp SEMICOL
    (14) stmt -> . NAME INCREMENT SEMICOL
    (15) stmt -> . NAME DECREMENT SEMICOL
    (20) stmt -> . NAME PUSH LPAREN exp RPAREN SEMICOL
    (40) stmt -> . LIST NAME ASSIGN LSQB exp RSQB SEMICOL
    (41) stmt -> . LIST NAME ASSIGN LSQB RSQB SEMICOL
    (42) stmt -> . IF LPAREN exp RPAREN LCURLY S RCURLY block
    (46) stmt -> . DO LCURLY S RCURLY block_w

    RCURLY          reduce using rule 2 (S -> .)
    PRINT           shift and go to state 3
    VARTYPE         shift and go to state 4
    NAME            shift and go to state 5
    LIST            shift and go to state 6
    IF              shift and go to state 7
    DO              shift and go to state 8

    S                              shift and go to state 131
    stmt                           shift and go to state 2

state 131

    (43) block -> ELSEIF LPAREN exp RPAREN LCURLY S . RCURLY block

    RCURLY          shift and go to state 132


state 132

    (43) block -> ELSEIF LPAREN exp RPAREN LCURLY S RCURLY . block
    (43) block -> . ELSEIF LPAREN exp RPAREN LCURLY S RCURLY block
    (44) block -> . ELSE LCURLY S RCURLY
    (45) block -> .

    ELSEIF          shift and go to state 120
    ELSE            shift and go to state 121
    PRINT           reduce using rule 45 (block -> .)
    VARTYPE         reduce using rule 45 (block -> .)
    NAME            reduce using rule 45 (block -> .)
    LIST            reduce using rule 45 (block -> .)
    IF              reduce using rule 45 (block -> .)
    DO              reduce using rule 45 (block -> .)
    $end            reduce using rule 45 (block -> .)
    RCURLY          reduce using rule 45 (block -> .)
    SEMICOL         reduce using rule 45 (block -> .)

    block                          shift and go to state 133

state 133

    (43) block -> ELSEIF LPAREN exp RPAREN LCURLY S RCURLY block .

    PRINT           reduce using rule 43 (block -> ELSEIF LPAREN exp RPAREN LCURLY S RCURLY block .)
    VARTYPE         reduce using rule 43 (block -> ELSEIF LPAREN exp RPAREN LCURLY S RCURLY block .)
    NAME            reduce using rule 43 (block -> ELSEIF LPAREN exp RPAREN LCURLY S RCURLY block .)
    LIST            reduce using rule 43 (block -> ELSEIF LPAREN exp RPAREN LCURLY S RCURLY block .)
    IF              reduce using rule 43 (block -> ELSEIF LPAREN exp RPAREN LCURLY S RCURLY block .)
    DO              reduce using rule 43 (block -> ELSEIF LPAREN exp RPAREN LCURLY S RCURLY block .)
    $end            reduce using rule 43 (block -> ELSEIF LPAREN exp RPAREN LCURLY S RCURLY block .)
    RCURLY          reduce using rule 43 (block -> ELSEIF LPAREN exp RPAREN LCURLY S RCURLY block .)
    SEMICOL         reduce using rule 43 (block -> ELSEIF LPAREN exp RPAREN LCURLY S RCURLY block .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for PLUS in state 50 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 50 resolved as shift
WARNING: shift/reduce conflict for MULTIPLICATION in state 50 resolved as shift
WARNING: shift/reduce conflict for DIVISION in state 50 resolved as shift
WARNING: shift/reduce conflict for MODULO in state 50 resolved as shift
WARNING: shift/reduce conflict for GREATERTHAN in state 50 resolved as shift
WARNING: shift/reduce conflict for LESSTHAN in state 50 resolved as shift
WARNING: shift/reduce conflict for GREATERTHANOREQUALTO in state 50 resolved as shift
WARNING: shift/reduce conflict for LESSTHANOREQUALTO in state 50 resolved as shift
WARNING: shift/reduce conflict for EQUALTO in state 50 resolved as shift
WARNING: shift/reduce conflict for NOTEQUALTO in state 50 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 50 resolved as shift
WARNING: shift/reduce conflict for AND in state 50 resolved as shift
WARNING: shift/reduce conflict for OR in state 50 resolved as shift
WARNING: shift/reduce conflict for POW in state 50 resolved as shift
WARNING: shift/reduce conflict for SEMICOL in state 60 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 60 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 60 resolved as shift
WARNING: shift/reduce conflict for MULTIPLICATION in state 60 resolved as shift
WARNING: shift/reduce conflict for DIVISION in state 60 resolved as shift
WARNING: shift/reduce conflict for MODULO in state 60 resolved as shift
WARNING: shift/reduce conflict for GREATERTHAN in state 60 resolved as shift
WARNING: shift/reduce conflict for LESSTHAN in state 60 resolved as shift
WARNING: shift/reduce conflict for GREATERTHANOREQUALTO in state 60 resolved as shift
WARNING: shift/reduce conflict for LESSTHANOREQUALTO in state 60 resolved as shift
WARNING: shift/reduce conflict for EQUALTO in state 60 resolved as shift
WARNING: shift/reduce conflict for NOTEQUALTO in state 60 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 60 resolved as shift
WARNING: shift/reduce conflict for AND in state 60 resolved as shift
WARNING: shift/reduce conflict for OR in state 60 resolved as shift
WARNING: shift/reduce conflict for POW in state 60 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 72 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 72 resolved as shift
WARNING: shift/reduce conflict for MULTIPLICATION in state 72 resolved as shift
WARNING: shift/reduce conflict for DIVISION in state 72 resolved as shift
WARNING: shift/reduce conflict for MODULO in state 72 resolved as shift
WARNING: shift/reduce conflict for GREATERTHAN in state 72 resolved as shift
WARNING: shift/reduce conflict for LESSTHAN in state 72 resolved as shift
WARNING: shift/reduce conflict for GREATERTHANOREQUALTO in state 72 resolved as shift
WARNING: shift/reduce conflict for LESSTHANOREQUALTO in state 72 resolved as shift
WARNING: shift/reduce conflict for EQUALTO in state 72 resolved as shift
WARNING: shift/reduce conflict for NOTEQUALTO in state 72 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 72 resolved as shift
WARNING: shift/reduce conflict for AND in state 72 resolved as shift
WARNING: shift/reduce conflict for OR in state 72 resolved as shift
WARNING: shift/reduce conflict for POW in state 72 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 73 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 73 resolved as shift
WARNING: shift/reduce conflict for MULTIPLICATION in state 73 resolved as shift
WARNING: shift/reduce conflict for DIVISION in state 73 resolved as shift
WARNING: shift/reduce conflict for MODULO in state 73 resolved as shift
WARNING: shift/reduce conflict for GREATERTHAN in state 73 resolved as shift
WARNING: shift/reduce conflict for LESSTHAN in state 73 resolved as shift
WARNING: shift/reduce conflict for GREATERTHANOREQUALTO in state 73 resolved as shift
WARNING: shift/reduce conflict for LESSTHANOREQUALTO in state 73 resolved as shift
WARNING: shift/reduce conflict for EQUALTO in state 73 resolved as shift
WARNING: shift/reduce conflict for NOTEQUALTO in state 73 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 73 resolved as shift
WARNING: shift/reduce conflict for AND in state 73 resolved as shift
WARNING: shift/reduce conflict for OR in state 73 resolved as shift
WARNING: shift/reduce conflict for POW in state 73 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 93 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 93 resolved as shift
WARNING: shift/reduce conflict for MULTIPLICATION in state 93 resolved as shift
WARNING: shift/reduce conflict for DIVISION in state 93 resolved as shift
WARNING: shift/reduce conflict for MODULO in state 93 resolved as shift
WARNING: shift/reduce conflict for GREATERTHAN in state 93 resolved as shift
WARNING: shift/reduce conflict for LESSTHAN in state 93 resolved as shift
WARNING: shift/reduce conflict for GREATERTHANOREQUALTO in state 93 resolved as shift
WARNING: shift/reduce conflict for LESSTHANOREQUALTO in state 93 resolved as shift
WARNING: shift/reduce conflict for EQUALTO in state 93 resolved as shift
WARNING: shift/reduce conflict for NOTEQUALTO in state 93 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 93 resolved as shift
WARNING: shift/reduce conflict for AND in state 93 resolved as shift
WARNING: shift/reduce conflict for OR in state 93 resolved as shift
WARNING: shift/reduce conflict for POW in state 93 resolved as shift
