Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> S
Rule 1     S -> stmt S
Rule 2     S -> <empty>
Rule 3     exp -> LPAREN exp RPAREN
Rule 4     stmt -> PRINT exp COMMA exp SEMICOL
Rule 5     stmt -> PRINT exp SEMICOL
Rule 6     stmt -> PRINT LPAREN exp RPAREN SEMICOL
Rule 7     stmt -> VARTYPE NAME ASSIGN exp SEMICOL
Rule 8     stmt -> VARTYPE NAME ASSIGN stmt SEMICOL
Rule 9     stmt -> NAME ASSIGN exp SEMICOL
Rule 10    stmt -> VARTYPE NAME
Rule 11    exp -> FLOAT
Rule 12    exp -> INT
Rule 13    exp -> BOOL
Rule 14    exp -> CHAR
Rule 15    stmt -> NAME INCREMENT SEMICOL
Rule 16    stmt -> NAME DECREMENT SEMICOL
Rule 17    exp -> NAME LSQB INT RSQB
Rule 18    exp -> NAME POP LPAREN INT RPAREN
Rule 19    exp -> NAME INDEX LPAREN INT RPAREN
Rule 20    exp -> NAME SLICE LPAREN INT COMMA INT RPAREN
Rule 21    stmt -> NAME PUSH LPAREN exp RPAREN SEMICOL
Rule 22    exp -> NAME
Rule 23    exp -> NOT exp
Rule 24    exp -> exp PLUS exp
Rule 25    exp -> exp MINUS exp
Rule 26    exp -> exp MULTIPLICATION exp
Rule 27    exp -> exp DIVISION exp
Rule 28    exp -> exp MODULO exp
Rule 29    exp -> exp GREATERTHAN exp
Rule 30    exp -> exp LESSTHAN exp
Rule 31    exp -> exp GREATERTHANOREQUALTO exp
Rule 32    exp -> exp LESSTHANOREQUALTO exp
Rule 33    exp -> exp EQUALTO exp
Rule 34    exp -> exp NOTEQUALTO exp
Rule 35    exp -> exp COMMA exp
Rule 36    exp -> exp AND exp
Rule 37    exp -> exp OR exp
Rule 38    exp -> exp POW exp
Rule 39    exp -> STRING
Rule 40    exp -> MINUS exp
Rule 41    stmt -> LIST NAME ASSIGN LSQB exp RSQB SEMICOL
Rule 42    stmt -> LIST NAME ASSIGN LSQB RSQB SEMICOL
Rule 43    stmt -> IF LPAREN exp RPAREN LCURLY S RCURLY block
Rule 44    block -> ELSEIF LPAREN exp RPAREN LCURLY S RCURLY block
Rule 45    block -> ELSE LCURLY S RCURLY
Rule 46    block -> <empty>
Rule 47    stmt -> DO LCURLY S RCURLY block_w
Rule 48    block_w -> WHILE LPAREN exp RPAREN SEMICOL
Rule 49    stmt -> FUNCTION NAME LPAREN stmt RPAREN LCURLY S RCURLY
Rule 50    stmt -> RETURN LPAREN exp RPAREN SEMICOL
Rule 51    exp -> NAME LPAREN exp RPAREN

Terminals, with rules where they appear

AND                  : 36
ASSIGN               : 7 8 9 41 42
BOOL                 : 13
CHAR                 : 14
COMMA                : 4 20 35
DECREMENT            : 16
DIVISION             : 27
DO                   : 47
ELSE                 : 45
ELSEIF               : 44
EQUALTO              : 33
FLOAT                : 11
FUNCTION             : 49
GREATERTHAN          : 29
GREATERTHANOREQUALTO : 31
IF                   : 43
INCREMENT            : 15
INDEX                : 19
INT                  : 12 17 18 19 20 20
LCURLY               : 43 44 45 47 49
LESSTHAN             : 30
LESSTHANOREQUALTO    : 32
LIST                 : 41 42
LPAREN               : 3 6 18 19 20 21 43 44 48 49 50 51
LSQB                 : 17 41 42
MINUS                : 25 40
MODULO               : 28
MULTIPLICATION       : 26
NAME                 : 7 8 9 10 15 16 17 18 19 20 21 22 41 42 49 51
NOT                  : 23
NOTEQUALTO           : 34
OR                   : 37
PLUS                 : 24
POP                  : 18
POW                  : 38
PRINT                : 4 5 6
PUSH                 : 21
RCURLY               : 43 44 45 47 49
RETURN               : 50
RPAREN               : 3 6 18 19 20 21 43 44 48 49 50 51
RSQB                 : 17 41 42
SEMICOL              : 4 5 6 7 8 9 15 16 21 41 42 48 50
SLICE                : 20
STRING               : 39
VARTYPE              : 7 8 10
WHILE                : 48
error                : 

Nonterminals, with rules where they appear

S                    : 1 43 44 45 47 49 0
block                : 43 44
block_w              : 47
exp                  : 3 4 4 5 6 7 9 21 23 24 24 25 25 26 26 27 27 28 28 29 29 30 30 31 31 32 32 33 33 34 34 35 35 36 36 37 37 38 38 40 41 43 44 48 50 51
stmt                 : 1 8 49

Parsing method: LALR

state 0

    (0) S' -> . S
    (1) S -> . stmt S
    (2) S -> .
    (4) stmt -> . PRINT exp COMMA exp SEMICOL
    (5) stmt -> . PRINT exp SEMICOL
    (6) stmt -> . PRINT LPAREN exp RPAREN SEMICOL
    (7) stmt -> . VARTYPE NAME ASSIGN exp SEMICOL
    (8) stmt -> . VARTYPE NAME ASSIGN stmt SEMICOL
    (9) stmt -> . NAME ASSIGN exp SEMICOL
    (10) stmt -> . VARTYPE NAME
    (15) stmt -> . NAME INCREMENT SEMICOL
    (16) stmt -> . NAME DECREMENT SEMICOL
    (21) stmt -> . NAME PUSH LPAREN exp RPAREN SEMICOL
    (41) stmt -> . LIST NAME ASSIGN LSQB exp RSQB SEMICOL
    (42) stmt -> . LIST NAME ASSIGN LSQB RSQB SEMICOL
    (43) stmt -> . IF LPAREN exp RPAREN LCURLY S RCURLY block
    (47) stmt -> . DO LCURLY S RCURLY block_w
    (49) stmt -> . FUNCTION NAME LPAREN stmt RPAREN LCURLY S RCURLY
    (50) stmt -> . RETURN LPAREN exp RPAREN SEMICOL

    $end            reduce using rule 2 (S -> .)
    PRINT           shift and go to state 3
    VARTYPE         shift and go to state 4
    NAME            shift and go to state 5
    LIST            shift and go to state 6
    IF              shift and go to state 7
    DO              shift and go to state 8
    FUNCTION        shift and go to state 9
    RETURN          shift and go to state 10

    S                              shift and go to state 1
    stmt                           shift and go to state 2

state 1

    (0) S' -> S .



state 2

    (1) S -> stmt . S
    (1) S -> . stmt S
    (2) S -> .
    (4) stmt -> . PRINT exp COMMA exp SEMICOL
    (5) stmt -> . PRINT exp SEMICOL
    (6) stmt -> . PRINT LPAREN exp RPAREN SEMICOL
    (7) stmt -> . VARTYPE NAME ASSIGN exp SEMICOL
    (8) stmt -> . VARTYPE NAME ASSIGN stmt SEMICOL
    (9) stmt -> . NAME ASSIGN exp SEMICOL
    (10) stmt -> . VARTYPE NAME
    (15) stmt -> . NAME INCREMENT SEMICOL
    (16) stmt -> . NAME DECREMENT SEMICOL
    (21) stmt -> . NAME PUSH LPAREN exp RPAREN SEMICOL
    (41) stmt -> . LIST NAME ASSIGN LSQB exp RSQB SEMICOL
    (42) stmt -> . LIST NAME ASSIGN LSQB RSQB SEMICOL
    (43) stmt -> . IF LPAREN exp RPAREN LCURLY S RCURLY block
    (47) stmt -> . DO LCURLY S RCURLY block_w
    (49) stmt -> . FUNCTION NAME LPAREN stmt RPAREN LCURLY S RCURLY
    (50) stmt -> . RETURN LPAREN exp RPAREN SEMICOL

    $end            reduce using rule 2 (S -> .)
    RCURLY          reduce using rule 2 (S -> .)
    PRINT           shift and go to state 3
    VARTYPE         shift and go to state 4
    NAME            shift and go to state 5
    LIST            shift and go to state 6
    IF              shift and go to state 7
    DO              shift and go to state 8
    FUNCTION        shift and go to state 9
    RETURN          shift and go to state 10

    stmt                           shift and go to state 2
    S                              shift and go to state 11

state 3

    (4) stmt -> PRINT . exp COMMA exp SEMICOL
    (5) stmt -> PRINT . exp SEMICOL
    (6) stmt -> PRINT . LPAREN exp RPAREN SEMICOL
    (3) exp -> . LPAREN exp RPAREN
    (11) exp -> . FLOAT
    (12) exp -> . INT
    (13) exp -> . BOOL
    (14) exp -> . CHAR
    (17) exp -> . NAME LSQB INT RSQB
    (18) exp -> . NAME POP LPAREN INT RPAREN
    (19) exp -> . NAME INDEX LPAREN INT RPAREN
    (20) exp -> . NAME SLICE LPAREN INT COMMA INT RPAREN
    (22) exp -> . NAME
    (23) exp -> . NOT exp
    (24) exp -> . exp PLUS exp
    (25) exp -> . exp MINUS exp
    (26) exp -> . exp MULTIPLICATION exp
    (27) exp -> . exp DIVISION exp
    (28) exp -> . exp MODULO exp
    (29) exp -> . exp GREATERTHAN exp
    (30) exp -> . exp LESSTHAN exp
    (31) exp -> . exp GREATERTHANOREQUALTO exp
    (32) exp -> . exp LESSTHANOREQUALTO exp
    (33) exp -> . exp EQUALTO exp
    (34) exp -> . exp NOTEQUALTO exp
    (35) exp -> . exp COMMA exp
    (36) exp -> . exp AND exp
    (37) exp -> . exp OR exp
    (38) exp -> . exp POW exp
    (39) exp -> . STRING
    (40) exp -> . MINUS exp
    (51) exp -> . NAME LPAREN exp RPAREN

    LPAREN          shift and go to state 13
    FLOAT           shift and go to state 14
    INT             shift and go to state 15
    BOOL            shift and go to state 16
    CHAR            shift and go to state 17
    NAME            shift and go to state 18
    NOT             shift and go to state 19
    STRING          shift and go to state 21
    MINUS           shift and go to state 20

    exp                            shift and go to state 12

state 4

    (7) stmt -> VARTYPE . NAME ASSIGN exp SEMICOL
    (8) stmt -> VARTYPE . NAME ASSIGN stmt SEMICOL
    (10) stmt -> VARTYPE . NAME

    NAME            shift and go to state 22


state 5

    (9) stmt -> NAME . ASSIGN exp SEMICOL
    (15) stmt -> NAME . INCREMENT SEMICOL
    (16) stmt -> NAME . DECREMENT SEMICOL
    (21) stmt -> NAME . PUSH LPAREN exp RPAREN SEMICOL

    ASSIGN          shift and go to state 23
    INCREMENT       shift and go to state 24
    DECREMENT       shift and go to state 25
    PUSH            shift and go to state 26


state 6

    (41) stmt -> LIST . NAME ASSIGN LSQB exp RSQB SEMICOL
    (42) stmt -> LIST . NAME ASSIGN LSQB RSQB SEMICOL

    NAME            shift and go to state 27


state 7

    (43) stmt -> IF . LPAREN exp RPAREN LCURLY S RCURLY block

    LPAREN          shift and go to state 28


state 8

    (47) stmt -> DO . LCURLY S RCURLY block_w

    LCURLY          shift and go to state 29


state 9

    (49) stmt -> FUNCTION . NAME LPAREN stmt RPAREN LCURLY S RCURLY

    NAME            shift and go to state 30


state 10

    (50) stmt -> RETURN . LPAREN exp RPAREN SEMICOL

    LPAREN          shift and go to state 31


state 11

    (1) S -> stmt S .

    $end            reduce using rule 1 (S -> stmt S .)
    RCURLY          reduce using rule 1 (S -> stmt S .)


state 12

    (4) stmt -> PRINT exp . COMMA exp SEMICOL
    (5) stmt -> PRINT exp . SEMICOL
    (24) exp -> exp . PLUS exp
    (25) exp -> exp . MINUS exp
    (26) exp -> exp . MULTIPLICATION exp
    (27) exp -> exp . DIVISION exp
    (28) exp -> exp . MODULO exp
    (29) exp -> exp . GREATERTHAN exp
    (30) exp -> exp . LESSTHAN exp
    (31) exp -> exp . GREATERTHANOREQUALTO exp
    (32) exp -> exp . LESSTHANOREQUALTO exp
    (33) exp -> exp . EQUALTO exp
    (34) exp -> exp . NOTEQUALTO exp
    (35) exp -> exp . COMMA exp
    (36) exp -> exp . AND exp
    (37) exp -> exp . OR exp
    (38) exp -> exp . POW exp

    COMMA           shift and go to state 32
    SEMICOL         shift and go to state 33
    PLUS            shift and go to state 34
    MINUS           shift and go to state 35
    MULTIPLICATION  shift and go to state 36
    DIVISION        shift and go to state 37
    MODULO          shift and go to state 38
    GREATERTHAN     shift and go to state 39
    LESSTHAN        shift and go to state 40
    GREATERTHANOREQUALTO shift and go to state 41
    LESSTHANOREQUALTO shift and go to state 42
    EQUALTO         shift and go to state 43
    NOTEQUALTO      shift and go to state 44
    AND             shift and go to state 45
    OR              shift and go to state 46
    POW             shift and go to state 47


state 13

    (6) stmt -> PRINT LPAREN . exp RPAREN SEMICOL
    (3) exp -> LPAREN . exp RPAREN
    (3) exp -> . LPAREN exp RPAREN
    (11) exp -> . FLOAT
    (12) exp -> . INT
    (13) exp -> . BOOL
    (14) exp -> . CHAR
    (17) exp -> . NAME LSQB INT RSQB
    (18) exp -> . NAME POP LPAREN INT RPAREN
    (19) exp -> . NAME INDEX LPAREN INT RPAREN
    (20) exp -> . NAME SLICE LPAREN INT COMMA INT RPAREN
    (22) exp -> . NAME
    (23) exp -> . NOT exp
    (24) exp -> . exp PLUS exp
    (25) exp -> . exp MINUS exp
    (26) exp -> . exp MULTIPLICATION exp
    (27) exp -> . exp DIVISION exp
    (28) exp -> . exp MODULO exp
    (29) exp -> . exp GREATERTHAN exp
    (30) exp -> . exp LESSTHAN exp
    (31) exp -> . exp GREATERTHANOREQUALTO exp
    (32) exp -> . exp LESSTHANOREQUALTO exp
    (33) exp -> . exp EQUALTO exp
    (34) exp -> . exp NOTEQUALTO exp
    (35) exp -> . exp COMMA exp
    (36) exp -> . exp AND exp
    (37) exp -> . exp OR exp
    (38) exp -> . exp POW exp
    (39) exp -> . STRING
    (40) exp -> . MINUS exp
    (51) exp -> . NAME LPAREN exp RPAREN

    LPAREN          shift and go to state 48
    FLOAT           shift and go to state 14
    INT             shift and go to state 15
    BOOL            shift and go to state 16
    CHAR            shift and go to state 17
    NAME            shift and go to state 18
    NOT             shift and go to state 19
    STRING          shift and go to state 21
    MINUS           shift and go to state 20

    exp                            shift and go to state 49

state 14

    (11) exp -> FLOAT .

    COMMA           reduce using rule 11 (exp -> FLOAT .)
    SEMICOL         reduce using rule 11 (exp -> FLOAT .)
    PLUS            reduce using rule 11 (exp -> FLOAT .)
    MINUS           reduce using rule 11 (exp -> FLOAT .)
    MULTIPLICATION  reduce using rule 11 (exp -> FLOAT .)
    DIVISION        reduce using rule 11 (exp -> FLOAT .)
    MODULO          reduce using rule 11 (exp -> FLOAT .)
    GREATERTHAN     reduce using rule 11 (exp -> FLOAT .)
    LESSTHAN        reduce using rule 11 (exp -> FLOAT .)
    GREATERTHANOREQUALTO reduce using rule 11 (exp -> FLOAT .)
    LESSTHANOREQUALTO reduce using rule 11 (exp -> FLOAT .)
    EQUALTO         reduce using rule 11 (exp -> FLOAT .)
    NOTEQUALTO      reduce using rule 11 (exp -> FLOAT .)
    AND             reduce using rule 11 (exp -> FLOAT .)
    OR              reduce using rule 11 (exp -> FLOAT .)
    POW             reduce using rule 11 (exp -> FLOAT .)
    RPAREN          reduce using rule 11 (exp -> FLOAT .)
    RSQB            reduce using rule 11 (exp -> FLOAT .)


state 15

    (12) exp -> INT .

    COMMA           reduce using rule 12 (exp -> INT .)
    SEMICOL         reduce using rule 12 (exp -> INT .)
    PLUS            reduce using rule 12 (exp -> INT .)
    MINUS           reduce using rule 12 (exp -> INT .)
    MULTIPLICATION  reduce using rule 12 (exp -> INT .)
    DIVISION        reduce using rule 12 (exp -> INT .)
    MODULO          reduce using rule 12 (exp -> INT .)
    GREATERTHAN     reduce using rule 12 (exp -> INT .)
    LESSTHAN        reduce using rule 12 (exp -> INT .)
    GREATERTHANOREQUALTO reduce using rule 12 (exp -> INT .)
    LESSTHANOREQUALTO reduce using rule 12 (exp -> INT .)
    EQUALTO         reduce using rule 12 (exp -> INT .)
    NOTEQUALTO      reduce using rule 12 (exp -> INT .)
    AND             reduce using rule 12 (exp -> INT .)
    OR              reduce using rule 12 (exp -> INT .)
    POW             reduce using rule 12 (exp -> INT .)
    RPAREN          reduce using rule 12 (exp -> INT .)
    RSQB            reduce using rule 12 (exp -> INT .)


state 16

    (13) exp -> BOOL .

    COMMA           reduce using rule 13 (exp -> BOOL .)
    SEMICOL         reduce using rule 13 (exp -> BOOL .)
    PLUS            reduce using rule 13 (exp -> BOOL .)
    MINUS           reduce using rule 13 (exp -> BOOL .)
    MULTIPLICATION  reduce using rule 13 (exp -> BOOL .)
    DIVISION        reduce using rule 13 (exp -> BOOL .)
    MODULO          reduce using rule 13 (exp -> BOOL .)
    GREATERTHAN     reduce using rule 13 (exp -> BOOL .)
    LESSTHAN        reduce using rule 13 (exp -> BOOL .)
    GREATERTHANOREQUALTO reduce using rule 13 (exp -> BOOL .)
    LESSTHANOREQUALTO reduce using rule 13 (exp -> BOOL .)
    EQUALTO         reduce using rule 13 (exp -> BOOL .)
    NOTEQUALTO      reduce using rule 13 (exp -> BOOL .)
    AND             reduce using rule 13 (exp -> BOOL .)
    OR              reduce using rule 13 (exp -> BOOL .)
    POW             reduce using rule 13 (exp -> BOOL .)
    RPAREN          reduce using rule 13 (exp -> BOOL .)
    RSQB            reduce using rule 13 (exp -> BOOL .)


state 17

    (14) exp -> CHAR .

    COMMA           reduce using rule 14 (exp -> CHAR .)
    SEMICOL         reduce using rule 14 (exp -> CHAR .)
    PLUS            reduce using rule 14 (exp -> CHAR .)
    MINUS           reduce using rule 14 (exp -> CHAR .)
    MULTIPLICATION  reduce using rule 14 (exp -> CHAR .)
    DIVISION        reduce using rule 14 (exp -> CHAR .)
    MODULO          reduce using rule 14 (exp -> CHAR .)
    GREATERTHAN     reduce using rule 14 (exp -> CHAR .)
    LESSTHAN        reduce using rule 14 (exp -> CHAR .)
    GREATERTHANOREQUALTO reduce using rule 14 (exp -> CHAR .)
    LESSTHANOREQUALTO reduce using rule 14 (exp -> CHAR .)
    EQUALTO         reduce using rule 14 (exp -> CHAR .)
    NOTEQUALTO      reduce using rule 14 (exp -> CHAR .)
    AND             reduce using rule 14 (exp -> CHAR .)
    OR              reduce using rule 14 (exp -> CHAR .)
    POW             reduce using rule 14 (exp -> CHAR .)
    RPAREN          reduce using rule 14 (exp -> CHAR .)
    RSQB            reduce using rule 14 (exp -> CHAR .)


state 18

    (17) exp -> NAME . LSQB INT RSQB
    (18) exp -> NAME . POP LPAREN INT RPAREN
    (19) exp -> NAME . INDEX LPAREN INT RPAREN
    (20) exp -> NAME . SLICE LPAREN INT COMMA INT RPAREN
    (22) exp -> NAME .
    (51) exp -> NAME . LPAREN exp RPAREN

    LSQB            shift and go to state 50
    POP             shift and go to state 51
    INDEX           shift and go to state 53
    SLICE           shift and go to state 54
    COMMA           reduce using rule 22 (exp -> NAME .)
    SEMICOL         reduce using rule 22 (exp -> NAME .)
    PLUS            reduce using rule 22 (exp -> NAME .)
    MINUS           reduce using rule 22 (exp -> NAME .)
    MULTIPLICATION  reduce using rule 22 (exp -> NAME .)
    DIVISION        reduce using rule 22 (exp -> NAME .)
    MODULO          reduce using rule 22 (exp -> NAME .)
    GREATERTHAN     reduce using rule 22 (exp -> NAME .)
    LESSTHAN        reduce using rule 22 (exp -> NAME .)
    GREATERTHANOREQUALTO reduce using rule 22 (exp -> NAME .)
    LESSTHANOREQUALTO reduce using rule 22 (exp -> NAME .)
    EQUALTO         reduce using rule 22 (exp -> NAME .)
    NOTEQUALTO      reduce using rule 22 (exp -> NAME .)
    AND             reduce using rule 22 (exp -> NAME .)
    OR              reduce using rule 22 (exp -> NAME .)
    POW             reduce using rule 22 (exp -> NAME .)
    RPAREN          reduce using rule 22 (exp -> NAME .)
    RSQB            reduce using rule 22 (exp -> NAME .)
    LPAREN          shift and go to state 52


state 19

    (23) exp -> NOT . exp
    (3) exp -> . LPAREN exp RPAREN
    (11) exp -> . FLOAT
    (12) exp -> . INT
    (13) exp -> . BOOL
    (14) exp -> . CHAR
    (17) exp -> . NAME LSQB INT RSQB
    (18) exp -> . NAME POP LPAREN INT RPAREN
    (19) exp -> . NAME INDEX LPAREN INT RPAREN
    (20) exp -> . NAME SLICE LPAREN INT COMMA INT RPAREN
    (22) exp -> . NAME
    (23) exp -> . NOT exp
    (24) exp -> . exp PLUS exp
    (25) exp -> . exp MINUS exp
    (26) exp -> . exp MULTIPLICATION exp
    (27) exp -> . exp DIVISION exp
    (28) exp -> . exp MODULO exp
    (29) exp -> . exp GREATERTHAN exp
    (30) exp -> . exp LESSTHAN exp
    (31) exp -> . exp GREATERTHANOREQUALTO exp
    (32) exp -> . exp LESSTHANOREQUALTO exp
    (33) exp -> . exp EQUALTO exp
    (34) exp -> . exp NOTEQUALTO exp
    (35) exp -> . exp COMMA exp
    (36) exp -> . exp AND exp
    (37) exp -> . exp OR exp
    (38) exp -> . exp POW exp
    (39) exp -> . STRING
    (40) exp -> . MINUS exp
    (51) exp -> . NAME LPAREN exp RPAREN

    LPAREN          shift and go to state 48
    FLOAT           shift and go to state 14
    INT             shift and go to state 15
    BOOL            shift and go to state 16
    CHAR            shift and go to state 17
    NAME            shift and go to state 18
    NOT             shift and go to state 19
    STRING          shift and go to state 21
    MINUS           shift and go to state 20

    exp                            shift and go to state 55

state 20

    (40) exp -> MINUS . exp
    (3) exp -> . LPAREN exp RPAREN
    (11) exp -> . FLOAT
    (12) exp -> . INT
    (13) exp -> . BOOL
    (14) exp -> . CHAR
    (17) exp -> . NAME LSQB INT RSQB
    (18) exp -> . NAME POP LPAREN INT RPAREN
    (19) exp -> . NAME INDEX LPAREN INT RPAREN
    (20) exp -> . NAME SLICE LPAREN INT COMMA INT RPAREN
    (22) exp -> . NAME
    (23) exp -> . NOT exp
    (24) exp -> . exp PLUS exp
    (25) exp -> . exp MINUS exp
    (26) exp -> . exp MULTIPLICATION exp
    (27) exp -> . exp DIVISION exp
    (28) exp -> . exp MODULO exp
    (29) exp -> . exp GREATERTHAN exp
    (30) exp -> . exp LESSTHAN exp
    (31) exp -> . exp GREATERTHANOREQUALTO exp
    (32) exp -> . exp LESSTHANOREQUALTO exp
    (33) exp -> . exp EQUALTO exp
    (34) exp -> . exp NOTEQUALTO exp
    (35) exp -> . exp COMMA exp
    (36) exp -> . exp AND exp
    (37) exp -> . exp OR exp
    (38) exp -> . exp POW exp
    (39) exp -> . STRING
    (40) exp -> . MINUS exp
    (51) exp -> . NAME LPAREN exp RPAREN

    LPAREN          shift and go to state 48
    FLOAT           shift and go to state 14
    INT             shift and go to state 15
    BOOL            shift and go to state 16
    CHAR            shift and go to state 17
    NAME            shift and go to state 18
    NOT             shift and go to state 19
    STRING          shift and go to state 21
    MINUS           shift and go to state 20

    exp                            shift and go to state 56

state 21

    (39) exp -> STRING .

    COMMA           reduce using rule 39 (exp -> STRING .)
    SEMICOL         reduce using rule 39 (exp -> STRING .)
    PLUS            reduce using rule 39 (exp -> STRING .)
    MINUS           reduce using rule 39 (exp -> STRING .)
    MULTIPLICATION  reduce using rule 39 (exp -> STRING .)
    DIVISION        reduce using rule 39 (exp -> STRING .)
    MODULO          reduce using rule 39 (exp -> STRING .)
    GREATERTHAN     reduce using rule 39 (exp -> STRING .)
    LESSTHAN        reduce using rule 39 (exp -> STRING .)
    GREATERTHANOREQUALTO reduce using rule 39 (exp -> STRING .)
    LESSTHANOREQUALTO reduce using rule 39 (exp -> STRING .)
    EQUALTO         reduce using rule 39 (exp -> STRING .)
    NOTEQUALTO      reduce using rule 39 (exp -> STRING .)
    AND             reduce using rule 39 (exp -> STRING .)
    OR              reduce using rule 39 (exp -> STRING .)
    POW             reduce using rule 39 (exp -> STRING .)
    RPAREN          reduce using rule 39 (exp -> STRING .)
    RSQB            reduce using rule 39 (exp -> STRING .)


state 22

    (7) stmt -> VARTYPE NAME . ASSIGN exp SEMICOL
    (8) stmt -> VARTYPE NAME . ASSIGN stmt SEMICOL
    (10) stmt -> VARTYPE NAME .

    ASSIGN          shift and go to state 57
    PRINT           reduce using rule 10 (stmt -> VARTYPE NAME .)
    VARTYPE         reduce using rule 10 (stmt -> VARTYPE NAME .)
    NAME            reduce using rule 10 (stmt -> VARTYPE NAME .)
    LIST            reduce using rule 10 (stmt -> VARTYPE NAME .)
    IF              reduce using rule 10 (stmt -> VARTYPE NAME .)
    DO              reduce using rule 10 (stmt -> VARTYPE NAME .)
    FUNCTION        reduce using rule 10 (stmt -> VARTYPE NAME .)
    RETURN          reduce using rule 10 (stmt -> VARTYPE NAME .)
    $end            reduce using rule 10 (stmt -> VARTYPE NAME .)
    RCURLY          reduce using rule 10 (stmt -> VARTYPE NAME .)
    SEMICOL         reduce using rule 10 (stmt -> VARTYPE NAME .)
    RPAREN          reduce using rule 10 (stmt -> VARTYPE NAME .)


state 23

    (9) stmt -> NAME ASSIGN . exp SEMICOL
    (3) exp -> . LPAREN exp RPAREN
    (11) exp -> . FLOAT
    (12) exp -> . INT
    (13) exp -> . BOOL
    (14) exp -> . CHAR
    (17) exp -> . NAME LSQB INT RSQB
    (18) exp -> . NAME POP LPAREN INT RPAREN
    (19) exp -> . NAME INDEX LPAREN INT RPAREN
    (20) exp -> . NAME SLICE LPAREN INT COMMA INT RPAREN
    (22) exp -> . NAME
    (23) exp -> . NOT exp
    (24) exp -> . exp PLUS exp
    (25) exp -> . exp MINUS exp
    (26) exp -> . exp MULTIPLICATION exp
    (27) exp -> . exp DIVISION exp
    (28) exp -> . exp MODULO exp
    (29) exp -> . exp GREATERTHAN exp
    (30) exp -> . exp LESSTHAN exp
    (31) exp -> . exp GREATERTHANOREQUALTO exp
    (32) exp -> . exp LESSTHANOREQUALTO exp
    (33) exp -> . exp EQUALTO exp
    (34) exp -> . exp NOTEQUALTO exp
    (35) exp -> . exp COMMA exp
    (36) exp -> . exp AND exp
    (37) exp -> . exp OR exp
    (38) exp -> . exp POW exp
    (39) exp -> . STRING
    (40) exp -> . MINUS exp
    (51) exp -> . NAME LPAREN exp RPAREN

    LPAREN          shift and go to state 48
    FLOAT           shift and go to state 14
    INT             shift and go to state 15
    BOOL            shift and go to state 16
    CHAR            shift and go to state 17
    NAME            shift and go to state 18
    NOT             shift and go to state 19
    STRING          shift and go to state 21
    MINUS           shift and go to state 20

    exp                            shift and go to state 58

state 24

    (15) stmt -> NAME INCREMENT . SEMICOL

    SEMICOL         shift and go to state 59


state 25

    (16) stmt -> NAME DECREMENT . SEMICOL

    SEMICOL         shift and go to state 60


state 26

    (21) stmt -> NAME PUSH . LPAREN exp RPAREN SEMICOL

    LPAREN          shift and go to state 61


state 27

    (41) stmt -> LIST NAME . ASSIGN LSQB exp RSQB SEMICOL
    (42) stmt -> LIST NAME . ASSIGN LSQB RSQB SEMICOL

    ASSIGN          shift and go to state 62


state 28

    (43) stmt -> IF LPAREN . exp RPAREN LCURLY S RCURLY block
    (3) exp -> . LPAREN exp RPAREN
    (11) exp -> . FLOAT
    (12) exp -> . INT
    (13) exp -> . BOOL
    (14) exp -> . CHAR
    (17) exp -> . NAME LSQB INT RSQB
    (18) exp -> . NAME POP LPAREN INT RPAREN
    (19) exp -> . NAME INDEX LPAREN INT RPAREN
    (20) exp -> . NAME SLICE LPAREN INT COMMA INT RPAREN
    (22) exp -> . NAME
    (23) exp -> . NOT exp
    (24) exp -> . exp PLUS exp
    (25) exp -> . exp MINUS exp
    (26) exp -> . exp MULTIPLICATION exp
    (27) exp -> . exp DIVISION exp
    (28) exp -> . exp MODULO exp
    (29) exp -> . exp GREATERTHAN exp
    (30) exp -> . exp LESSTHAN exp
    (31) exp -> . exp GREATERTHANOREQUALTO exp
    (32) exp -> . exp LESSTHANOREQUALTO exp
    (33) exp -> . exp EQUALTO exp
    (34) exp -> . exp NOTEQUALTO exp
    (35) exp -> . exp COMMA exp
    (36) exp -> . exp AND exp
    (37) exp -> . exp OR exp
    (38) exp -> . exp POW exp
    (39) exp -> . STRING
    (40) exp -> . MINUS exp
    (51) exp -> . NAME LPAREN exp RPAREN

    LPAREN          shift and go to state 48
    FLOAT           shift and go to state 14
    INT             shift and go to state 15
    BOOL            shift and go to state 16
    CHAR            shift and go to state 17
    NAME            shift and go to state 18
    NOT             shift and go to state 19
    STRING          shift and go to state 21
    MINUS           shift and go to state 20

    exp                            shift and go to state 63

state 29

    (47) stmt -> DO LCURLY . S RCURLY block_w
    (1) S -> . stmt S
    (2) S -> .
    (4) stmt -> . PRINT exp COMMA exp SEMICOL
    (5) stmt -> . PRINT exp SEMICOL
    (6) stmt -> . PRINT LPAREN exp RPAREN SEMICOL
    (7) stmt -> . VARTYPE NAME ASSIGN exp SEMICOL
    (8) stmt -> . VARTYPE NAME ASSIGN stmt SEMICOL
    (9) stmt -> . NAME ASSIGN exp SEMICOL
    (10) stmt -> . VARTYPE NAME
    (15) stmt -> . NAME INCREMENT SEMICOL
    (16) stmt -> . NAME DECREMENT SEMICOL
    (21) stmt -> . NAME PUSH LPAREN exp RPAREN SEMICOL
    (41) stmt -> . LIST NAME ASSIGN LSQB exp RSQB SEMICOL
    (42) stmt -> . LIST NAME ASSIGN LSQB RSQB SEMICOL
    (43) stmt -> . IF LPAREN exp RPAREN LCURLY S RCURLY block
    (47) stmt -> . DO LCURLY S RCURLY block_w
    (49) stmt -> . FUNCTION NAME LPAREN stmt RPAREN LCURLY S RCURLY
    (50) stmt -> . RETURN LPAREN exp RPAREN SEMICOL

    RCURLY          reduce using rule 2 (S -> .)
    PRINT           shift and go to state 3
    VARTYPE         shift and go to state 4
    NAME            shift and go to state 5
    LIST            shift and go to state 6
    IF              shift and go to state 7
    DO              shift and go to state 8
    FUNCTION        shift and go to state 9
    RETURN          shift and go to state 10

    S                              shift and go to state 64
    stmt                           shift and go to state 2

state 30

    (49) stmt -> FUNCTION NAME . LPAREN stmt RPAREN LCURLY S RCURLY

    LPAREN          shift and go to state 65


state 31

    (50) stmt -> RETURN LPAREN . exp RPAREN SEMICOL
    (3) exp -> . LPAREN exp RPAREN
    (11) exp -> . FLOAT
    (12) exp -> . INT
    (13) exp -> . BOOL
    (14) exp -> . CHAR
    (17) exp -> . NAME LSQB INT RSQB
    (18) exp -> . NAME POP LPAREN INT RPAREN
    (19) exp -> . NAME INDEX LPAREN INT RPAREN
    (20) exp -> . NAME SLICE LPAREN INT COMMA INT RPAREN
    (22) exp -> . NAME
    (23) exp -> . NOT exp
    (24) exp -> . exp PLUS exp
    (25) exp -> . exp MINUS exp
    (26) exp -> . exp MULTIPLICATION exp
    (27) exp -> . exp DIVISION exp
    (28) exp -> . exp MODULO exp
    (29) exp -> . exp GREATERTHAN exp
    (30) exp -> . exp LESSTHAN exp
    (31) exp -> . exp GREATERTHANOREQUALTO exp
    (32) exp -> . exp LESSTHANOREQUALTO exp
    (33) exp -> . exp EQUALTO exp
    (34) exp -> . exp NOTEQUALTO exp
    (35) exp -> . exp COMMA exp
    (36) exp -> . exp AND exp
    (37) exp -> . exp OR exp
    (38) exp -> . exp POW exp
    (39) exp -> . STRING
    (40) exp -> . MINUS exp
    (51) exp -> . NAME LPAREN exp RPAREN

    LPAREN          shift and go to state 48
    FLOAT           shift and go to state 14
    INT             shift and go to state 15
    BOOL            shift and go to state 16
    CHAR            shift and go to state 17
    NAME            shift and go to state 18
    NOT             shift and go to state 19
    STRING          shift and go to state 21
    MINUS           shift and go to state 20

    exp                            shift and go to state 66

state 32

    (4) stmt -> PRINT exp COMMA . exp SEMICOL
    (35) exp -> exp COMMA . exp
    (3) exp -> . LPAREN exp RPAREN
    (11) exp -> . FLOAT
    (12) exp -> . INT
    (13) exp -> . BOOL
    (14) exp -> . CHAR
    (17) exp -> . NAME LSQB INT RSQB
    (18) exp -> . NAME POP LPAREN INT RPAREN
    (19) exp -> . NAME INDEX LPAREN INT RPAREN
    (20) exp -> . NAME SLICE LPAREN INT COMMA INT RPAREN
    (22) exp -> . NAME
    (23) exp -> . NOT exp
    (24) exp -> . exp PLUS exp
    (25) exp -> . exp MINUS exp
    (26) exp -> . exp MULTIPLICATION exp
    (27) exp -> . exp DIVISION exp
    (28) exp -> . exp MODULO exp
    (29) exp -> . exp GREATERTHAN exp
    (30) exp -> . exp LESSTHAN exp
    (31) exp -> . exp GREATERTHANOREQUALTO exp
    (32) exp -> . exp LESSTHANOREQUALTO exp
    (33) exp -> . exp EQUALTO exp
    (34) exp -> . exp NOTEQUALTO exp
    (35) exp -> . exp COMMA exp
    (36) exp -> . exp AND exp
    (37) exp -> . exp OR exp
    (38) exp -> . exp POW exp
    (39) exp -> . STRING
    (40) exp -> . MINUS exp
    (51) exp -> . NAME LPAREN exp RPAREN

    LPAREN          shift and go to state 48
    FLOAT           shift and go to state 14
    INT             shift and go to state 15
    BOOL            shift and go to state 16
    CHAR            shift and go to state 17
    NAME            shift and go to state 18
    NOT             shift and go to state 19
    STRING          shift and go to state 21
    MINUS           shift and go to state 20

    exp                            shift and go to state 67

state 33

    (5) stmt -> PRINT exp SEMICOL .

    PRINT           reduce using rule 5 (stmt -> PRINT exp SEMICOL .)
    VARTYPE         reduce using rule 5 (stmt -> PRINT exp SEMICOL .)
    NAME            reduce using rule 5 (stmt -> PRINT exp SEMICOL .)
    LIST            reduce using rule 5 (stmt -> PRINT exp SEMICOL .)
    IF              reduce using rule 5 (stmt -> PRINT exp SEMICOL .)
    DO              reduce using rule 5 (stmt -> PRINT exp SEMICOL .)
    FUNCTION        reduce using rule 5 (stmt -> PRINT exp SEMICOL .)
    RETURN          reduce using rule 5 (stmt -> PRINT exp SEMICOL .)
    $end            reduce using rule 5 (stmt -> PRINT exp SEMICOL .)
    RCURLY          reduce using rule 5 (stmt -> PRINT exp SEMICOL .)
    SEMICOL         reduce using rule 5 (stmt -> PRINT exp SEMICOL .)
    RPAREN          reduce using rule 5 (stmt -> PRINT exp SEMICOL .)


state 34

    (24) exp -> exp PLUS . exp
    (3) exp -> . LPAREN exp RPAREN
    (11) exp -> . FLOAT
    (12) exp -> . INT
    (13) exp -> . BOOL
    (14) exp -> . CHAR
    (17) exp -> . NAME LSQB INT RSQB
    (18) exp -> . NAME POP LPAREN INT RPAREN
    (19) exp -> . NAME INDEX LPAREN INT RPAREN
    (20) exp -> . NAME SLICE LPAREN INT COMMA INT RPAREN
    (22) exp -> . NAME
    (23) exp -> . NOT exp
    (24) exp -> . exp PLUS exp
    (25) exp -> . exp MINUS exp
    (26) exp -> . exp MULTIPLICATION exp
    (27) exp -> . exp DIVISION exp
    (28) exp -> . exp MODULO exp
    (29) exp -> . exp GREATERTHAN exp
    (30) exp -> . exp LESSTHAN exp
    (31) exp -> . exp GREATERTHANOREQUALTO exp
    (32) exp -> . exp LESSTHANOREQUALTO exp
    (33) exp -> . exp EQUALTO exp
    (34) exp -> . exp NOTEQUALTO exp
    (35) exp -> . exp COMMA exp
    (36) exp -> . exp AND exp
    (37) exp -> . exp OR exp
    (38) exp -> . exp POW exp
    (39) exp -> . STRING
    (40) exp -> . MINUS exp
    (51) exp -> . NAME LPAREN exp RPAREN

    LPAREN          shift and go to state 48
    FLOAT           shift and go to state 14
    INT             shift and go to state 15
    BOOL            shift and go to state 16
    CHAR            shift and go to state 17
    NAME            shift and go to state 18
    NOT             shift and go to state 19
    STRING          shift and go to state 21
    MINUS           shift and go to state 20

    exp                            shift and go to state 68

state 35

    (25) exp -> exp MINUS . exp
    (3) exp -> . LPAREN exp RPAREN
    (11) exp -> . FLOAT
    (12) exp -> . INT
    (13) exp -> . BOOL
    (14) exp -> . CHAR
    (17) exp -> . NAME LSQB INT RSQB
    (18) exp -> . NAME POP LPAREN INT RPAREN
    (19) exp -> . NAME INDEX LPAREN INT RPAREN
    (20) exp -> . NAME SLICE LPAREN INT COMMA INT RPAREN
    (22) exp -> . NAME
    (23) exp -> . NOT exp
    (24) exp -> . exp PLUS exp
    (25) exp -> . exp MINUS exp
    (26) exp -> . exp MULTIPLICATION exp
    (27) exp -> . exp DIVISION exp
    (28) exp -> . exp MODULO exp
    (29) exp -> . exp GREATERTHAN exp
    (30) exp -> . exp LESSTHAN exp
    (31) exp -> . exp GREATERTHANOREQUALTO exp
    (32) exp -> . exp LESSTHANOREQUALTO exp
    (33) exp -> . exp EQUALTO exp
    (34) exp -> . exp NOTEQUALTO exp
    (35) exp -> . exp COMMA exp
    (36) exp -> . exp AND exp
    (37) exp -> . exp OR exp
    (38) exp -> . exp POW exp
    (39) exp -> . STRING
    (40) exp -> . MINUS exp
    (51) exp -> . NAME LPAREN exp RPAREN

    LPAREN          shift and go to state 48
    FLOAT           shift and go to state 14
    INT             shift and go to state 15
    BOOL            shift and go to state 16
    CHAR            shift and go to state 17
    NAME            shift and go to state 18
    NOT             shift and go to state 19
    STRING          shift and go to state 21
    MINUS           shift and go to state 20

    exp                            shift and go to state 69

state 36

    (26) exp -> exp MULTIPLICATION . exp
    (3) exp -> . LPAREN exp RPAREN
    (11) exp -> . FLOAT
    (12) exp -> . INT
    (13) exp -> . BOOL
    (14) exp -> . CHAR
    (17) exp -> . NAME LSQB INT RSQB
    (18) exp -> . NAME POP LPAREN INT RPAREN
    (19) exp -> . NAME INDEX LPAREN INT RPAREN
    (20) exp -> . NAME SLICE LPAREN INT COMMA INT RPAREN
    (22) exp -> . NAME
    (23) exp -> . NOT exp
    (24) exp -> . exp PLUS exp
    (25) exp -> . exp MINUS exp
    (26) exp -> . exp MULTIPLICATION exp
    (27) exp -> . exp DIVISION exp
    (28) exp -> . exp MODULO exp
    (29) exp -> . exp GREATERTHAN exp
    (30) exp -> . exp LESSTHAN exp
    (31) exp -> . exp GREATERTHANOREQUALTO exp
    (32) exp -> . exp LESSTHANOREQUALTO exp
    (33) exp -> . exp EQUALTO exp
    (34) exp -> . exp NOTEQUALTO exp
    (35) exp -> . exp COMMA exp
    (36) exp -> . exp AND exp
    (37) exp -> . exp OR exp
    (38) exp -> . exp POW exp
    (39) exp -> . STRING
    (40) exp -> . MINUS exp
    (51) exp -> . NAME LPAREN exp RPAREN

    LPAREN          shift and go to state 48
    FLOAT           shift and go to state 14
    INT             shift and go to state 15
    BOOL            shift and go to state 16
    CHAR            shift and go to state 17
    NAME            shift and go to state 18
    NOT             shift and go to state 19
    STRING          shift and go to state 21
    MINUS           shift and go to state 20

    exp                            shift and go to state 70

state 37

    (27) exp -> exp DIVISION . exp
    (3) exp -> . LPAREN exp RPAREN
    (11) exp -> . FLOAT
    (12) exp -> . INT
    (13) exp -> . BOOL
    (14) exp -> . CHAR
    (17) exp -> . NAME LSQB INT RSQB
    (18) exp -> . NAME POP LPAREN INT RPAREN
    (19) exp -> . NAME INDEX LPAREN INT RPAREN
    (20) exp -> . NAME SLICE LPAREN INT COMMA INT RPAREN
    (22) exp -> . NAME
    (23) exp -> . NOT exp
    (24) exp -> . exp PLUS exp
    (25) exp -> . exp MINUS exp
    (26) exp -> . exp MULTIPLICATION exp
    (27) exp -> . exp DIVISION exp
    (28) exp -> . exp MODULO exp
    (29) exp -> . exp GREATERTHAN exp
    (30) exp -> . exp LESSTHAN exp
    (31) exp -> . exp GREATERTHANOREQUALTO exp
    (32) exp -> . exp LESSTHANOREQUALTO exp
    (33) exp -> . exp EQUALTO exp
    (34) exp -> . exp NOTEQUALTO exp
    (35) exp -> . exp COMMA exp
    (36) exp -> . exp AND exp
    (37) exp -> . exp OR exp
    (38) exp -> . exp POW exp
    (39) exp -> . STRING
    (40) exp -> . MINUS exp
    (51) exp -> . NAME LPAREN exp RPAREN

    LPAREN          shift and go to state 48
    FLOAT           shift and go to state 14
    INT             shift and go to state 15
    BOOL            shift and go to state 16
    CHAR            shift and go to state 17
    NAME            shift and go to state 18
    NOT             shift and go to state 19
    STRING          shift and go to state 21
    MINUS           shift and go to state 20

    exp                            shift and go to state 71

state 38

    (28) exp -> exp MODULO . exp
    (3) exp -> . LPAREN exp RPAREN
    (11) exp -> . FLOAT
    (12) exp -> . INT
    (13) exp -> . BOOL
    (14) exp -> . CHAR
    (17) exp -> . NAME LSQB INT RSQB
    (18) exp -> . NAME POP LPAREN INT RPAREN
    (19) exp -> . NAME INDEX LPAREN INT RPAREN
    (20) exp -> . NAME SLICE LPAREN INT COMMA INT RPAREN
    (22) exp -> . NAME
    (23) exp -> . NOT exp
    (24) exp -> . exp PLUS exp
    (25) exp -> . exp MINUS exp
    (26) exp -> . exp MULTIPLICATION exp
    (27) exp -> . exp DIVISION exp
    (28) exp -> . exp MODULO exp
    (29) exp -> . exp GREATERTHAN exp
    (30) exp -> . exp LESSTHAN exp
    (31) exp -> . exp GREATERTHANOREQUALTO exp
    (32) exp -> . exp LESSTHANOREQUALTO exp
    (33) exp -> . exp EQUALTO exp
    (34) exp -> . exp NOTEQUALTO exp
    (35) exp -> . exp COMMA exp
    (36) exp -> . exp AND exp
    (37) exp -> . exp OR exp
    (38) exp -> . exp POW exp
    (39) exp -> . STRING
    (40) exp -> . MINUS exp
    (51) exp -> . NAME LPAREN exp RPAREN

    LPAREN          shift and go to state 48
    FLOAT           shift and go to state 14
    INT             shift and go to state 15
    BOOL            shift and go to state 16
    CHAR            shift and go to state 17
    NAME            shift and go to state 18
    NOT             shift and go to state 19
    STRING          shift and go to state 21
    MINUS           shift and go to state 20

    exp                            shift and go to state 72

state 39

    (29) exp -> exp GREATERTHAN . exp
    (3) exp -> . LPAREN exp RPAREN
    (11) exp -> . FLOAT
    (12) exp -> . INT
    (13) exp -> . BOOL
    (14) exp -> . CHAR
    (17) exp -> . NAME LSQB INT RSQB
    (18) exp -> . NAME POP LPAREN INT RPAREN
    (19) exp -> . NAME INDEX LPAREN INT RPAREN
    (20) exp -> . NAME SLICE LPAREN INT COMMA INT RPAREN
    (22) exp -> . NAME
    (23) exp -> . NOT exp
    (24) exp -> . exp PLUS exp
    (25) exp -> . exp MINUS exp
    (26) exp -> . exp MULTIPLICATION exp
    (27) exp -> . exp DIVISION exp
    (28) exp -> . exp MODULO exp
    (29) exp -> . exp GREATERTHAN exp
    (30) exp -> . exp LESSTHAN exp
    (31) exp -> . exp GREATERTHANOREQUALTO exp
    (32) exp -> . exp LESSTHANOREQUALTO exp
    (33) exp -> . exp EQUALTO exp
    (34) exp -> . exp NOTEQUALTO exp
    (35) exp -> . exp COMMA exp
    (36) exp -> . exp AND exp
    (37) exp -> . exp OR exp
    (38) exp -> . exp POW exp
    (39) exp -> . STRING
    (40) exp -> . MINUS exp
    (51) exp -> . NAME LPAREN exp RPAREN

    LPAREN          shift and go to state 48
    FLOAT           shift and go to state 14
    INT             shift and go to state 15
    BOOL            shift and go to state 16
    CHAR            shift and go to state 17
    NAME            shift and go to state 18
    NOT             shift and go to state 19
    STRING          shift and go to state 21
    MINUS           shift and go to state 20

    exp                            shift and go to state 73

state 40

    (30) exp -> exp LESSTHAN . exp
    (3) exp -> . LPAREN exp RPAREN
    (11) exp -> . FLOAT
    (12) exp -> . INT
    (13) exp -> . BOOL
    (14) exp -> . CHAR
    (17) exp -> . NAME LSQB INT RSQB
    (18) exp -> . NAME POP LPAREN INT RPAREN
    (19) exp -> . NAME INDEX LPAREN INT RPAREN
    (20) exp -> . NAME SLICE LPAREN INT COMMA INT RPAREN
    (22) exp -> . NAME
    (23) exp -> . NOT exp
    (24) exp -> . exp PLUS exp
    (25) exp -> . exp MINUS exp
    (26) exp -> . exp MULTIPLICATION exp
    (27) exp -> . exp DIVISION exp
    (28) exp -> . exp MODULO exp
    (29) exp -> . exp GREATERTHAN exp
    (30) exp -> . exp LESSTHAN exp
    (31) exp -> . exp GREATERTHANOREQUALTO exp
    (32) exp -> . exp LESSTHANOREQUALTO exp
    (33) exp -> . exp EQUALTO exp
    (34) exp -> . exp NOTEQUALTO exp
    (35) exp -> . exp COMMA exp
    (36) exp -> . exp AND exp
    (37) exp -> . exp OR exp
    (38) exp -> . exp POW exp
    (39) exp -> . STRING
    (40) exp -> . MINUS exp
    (51) exp -> . NAME LPAREN exp RPAREN

    LPAREN          shift and go to state 48
    FLOAT           shift and go to state 14
    INT             shift and go to state 15
    BOOL            shift and go to state 16
    CHAR            shift and go to state 17
    NAME            shift and go to state 18
    NOT             shift and go to state 19
    STRING          shift and go to state 21
    MINUS           shift and go to state 20

    exp                            shift and go to state 74

state 41

    (31) exp -> exp GREATERTHANOREQUALTO . exp
    (3) exp -> . LPAREN exp RPAREN
    (11) exp -> . FLOAT
    (12) exp -> . INT
    (13) exp -> . BOOL
    (14) exp -> . CHAR
    (17) exp -> . NAME LSQB INT RSQB
    (18) exp -> . NAME POP LPAREN INT RPAREN
    (19) exp -> . NAME INDEX LPAREN INT RPAREN
    (20) exp -> . NAME SLICE LPAREN INT COMMA INT RPAREN
    (22) exp -> . NAME
    (23) exp -> . NOT exp
    (24) exp -> . exp PLUS exp
    (25) exp -> . exp MINUS exp
    (26) exp -> . exp MULTIPLICATION exp
    (27) exp -> . exp DIVISION exp
    (28) exp -> . exp MODULO exp
    (29) exp -> . exp GREATERTHAN exp
    (30) exp -> . exp LESSTHAN exp
    (31) exp -> . exp GREATERTHANOREQUALTO exp
    (32) exp -> . exp LESSTHANOREQUALTO exp
    (33) exp -> . exp EQUALTO exp
    (34) exp -> . exp NOTEQUALTO exp
    (35) exp -> . exp COMMA exp
    (36) exp -> . exp AND exp
    (37) exp -> . exp OR exp
    (38) exp -> . exp POW exp
    (39) exp -> . STRING
    (40) exp -> . MINUS exp
    (51) exp -> . NAME LPAREN exp RPAREN

    LPAREN          shift and go to state 48
    FLOAT           shift and go to state 14
    INT             shift and go to state 15
    BOOL            shift and go to state 16
    CHAR            shift and go to state 17
    NAME            shift and go to state 18
    NOT             shift and go to state 19
    STRING          shift and go to state 21
    MINUS           shift and go to state 20

    exp                            shift and go to state 75

state 42

    (32) exp -> exp LESSTHANOREQUALTO . exp
    (3) exp -> . LPAREN exp RPAREN
    (11) exp -> . FLOAT
    (12) exp -> . INT
    (13) exp -> . BOOL
    (14) exp -> . CHAR
    (17) exp -> . NAME LSQB INT RSQB
    (18) exp -> . NAME POP LPAREN INT RPAREN
    (19) exp -> . NAME INDEX LPAREN INT RPAREN
    (20) exp -> . NAME SLICE LPAREN INT COMMA INT RPAREN
    (22) exp -> . NAME
    (23) exp -> . NOT exp
    (24) exp -> . exp PLUS exp
    (25) exp -> . exp MINUS exp
    (26) exp -> . exp MULTIPLICATION exp
    (27) exp -> . exp DIVISION exp
    (28) exp -> . exp MODULO exp
    (29) exp -> . exp GREATERTHAN exp
    (30) exp -> . exp LESSTHAN exp
    (31) exp -> . exp GREATERTHANOREQUALTO exp
    (32) exp -> . exp LESSTHANOREQUALTO exp
    (33) exp -> . exp EQUALTO exp
    (34) exp -> . exp NOTEQUALTO exp
    (35) exp -> . exp COMMA exp
    (36) exp -> . exp AND exp
    (37) exp -> . exp OR exp
    (38) exp -> . exp POW exp
    (39) exp -> . STRING
    (40) exp -> . MINUS exp
    (51) exp -> . NAME LPAREN exp RPAREN

    LPAREN          shift and go to state 48
    FLOAT           shift and go to state 14
    INT             shift and go to state 15
    BOOL            shift and go to state 16
    CHAR            shift and go to state 17
    NAME            shift and go to state 18
    NOT             shift and go to state 19
    STRING          shift and go to state 21
    MINUS           shift and go to state 20

    exp                            shift and go to state 76

state 43

    (33) exp -> exp EQUALTO . exp
    (3) exp -> . LPAREN exp RPAREN
    (11) exp -> . FLOAT
    (12) exp -> . INT
    (13) exp -> . BOOL
    (14) exp -> . CHAR
    (17) exp -> . NAME LSQB INT RSQB
    (18) exp -> . NAME POP LPAREN INT RPAREN
    (19) exp -> . NAME INDEX LPAREN INT RPAREN
    (20) exp -> . NAME SLICE LPAREN INT COMMA INT RPAREN
    (22) exp -> . NAME
    (23) exp -> . NOT exp
    (24) exp -> . exp PLUS exp
    (25) exp -> . exp MINUS exp
    (26) exp -> . exp MULTIPLICATION exp
    (27) exp -> . exp DIVISION exp
    (28) exp -> . exp MODULO exp
    (29) exp -> . exp GREATERTHAN exp
    (30) exp -> . exp LESSTHAN exp
    (31) exp -> . exp GREATERTHANOREQUALTO exp
    (32) exp -> . exp LESSTHANOREQUALTO exp
    (33) exp -> . exp EQUALTO exp
    (34) exp -> . exp NOTEQUALTO exp
    (35) exp -> . exp COMMA exp
    (36) exp -> . exp AND exp
    (37) exp -> . exp OR exp
    (38) exp -> . exp POW exp
    (39) exp -> . STRING
    (40) exp -> . MINUS exp
    (51) exp -> . NAME LPAREN exp RPAREN

    LPAREN          shift and go to state 48
    FLOAT           shift and go to state 14
    INT             shift and go to state 15
    BOOL            shift and go to state 16
    CHAR            shift and go to state 17
    NAME            shift and go to state 18
    NOT             shift and go to state 19
    STRING          shift and go to state 21
    MINUS           shift and go to state 20

    exp                            shift and go to state 77

state 44

    (34) exp -> exp NOTEQUALTO . exp
    (3) exp -> . LPAREN exp RPAREN
    (11) exp -> . FLOAT
    (12) exp -> . INT
    (13) exp -> . BOOL
    (14) exp -> . CHAR
    (17) exp -> . NAME LSQB INT RSQB
    (18) exp -> . NAME POP LPAREN INT RPAREN
    (19) exp -> . NAME INDEX LPAREN INT RPAREN
    (20) exp -> . NAME SLICE LPAREN INT COMMA INT RPAREN
    (22) exp -> . NAME
    (23) exp -> . NOT exp
    (24) exp -> . exp PLUS exp
    (25) exp -> . exp MINUS exp
    (26) exp -> . exp MULTIPLICATION exp
    (27) exp -> . exp DIVISION exp
    (28) exp -> . exp MODULO exp
    (29) exp -> . exp GREATERTHAN exp
    (30) exp -> . exp LESSTHAN exp
    (31) exp -> . exp GREATERTHANOREQUALTO exp
    (32) exp -> . exp LESSTHANOREQUALTO exp
    (33) exp -> . exp EQUALTO exp
    (34) exp -> . exp NOTEQUALTO exp
    (35) exp -> . exp COMMA exp
    (36) exp -> . exp AND exp
    (37) exp -> . exp OR exp
    (38) exp -> . exp POW exp
    (39) exp -> . STRING
    (40) exp -> . MINUS exp
    (51) exp -> . NAME LPAREN exp RPAREN

    LPAREN          shift and go to state 48
    FLOAT           shift and go to state 14
    INT             shift and go to state 15
    BOOL            shift and go to state 16
    CHAR            shift and go to state 17
    NAME            shift and go to state 18
    NOT             shift and go to state 19
    STRING          shift and go to state 21
    MINUS           shift and go to state 20

    exp                            shift and go to state 78

state 45

    (36) exp -> exp AND . exp
    (3) exp -> . LPAREN exp RPAREN
    (11) exp -> . FLOAT
    (12) exp -> . INT
    (13) exp -> . BOOL
    (14) exp -> . CHAR
    (17) exp -> . NAME LSQB INT RSQB
    (18) exp -> . NAME POP LPAREN INT RPAREN
    (19) exp -> . NAME INDEX LPAREN INT RPAREN
    (20) exp -> . NAME SLICE LPAREN INT COMMA INT RPAREN
    (22) exp -> . NAME
    (23) exp -> . NOT exp
    (24) exp -> . exp PLUS exp
    (25) exp -> . exp MINUS exp
    (26) exp -> . exp MULTIPLICATION exp
    (27) exp -> . exp DIVISION exp
    (28) exp -> . exp MODULO exp
    (29) exp -> . exp GREATERTHAN exp
    (30) exp -> . exp LESSTHAN exp
    (31) exp -> . exp GREATERTHANOREQUALTO exp
    (32) exp -> . exp LESSTHANOREQUALTO exp
    (33) exp -> . exp EQUALTO exp
    (34) exp -> . exp NOTEQUALTO exp
    (35) exp -> . exp COMMA exp
    (36) exp -> . exp AND exp
    (37) exp -> . exp OR exp
    (38) exp -> . exp POW exp
    (39) exp -> . STRING
    (40) exp -> . MINUS exp
    (51) exp -> . NAME LPAREN exp RPAREN

    LPAREN          shift and go to state 48
    FLOAT           shift and go to state 14
    INT             shift and go to state 15
    BOOL            shift and go to state 16
    CHAR            shift and go to state 17
    NAME            shift and go to state 18
    NOT             shift and go to state 19
    STRING          shift and go to state 21
    MINUS           shift and go to state 20

    exp                            shift and go to state 79

state 46

    (37) exp -> exp OR . exp
    (3) exp -> . LPAREN exp RPAREN
    (11) exp -> . FLOAT
    (12) exp -> . INT
    (13) exp -> . BOOL
    (14) exp -> . CHAR
    (17) exp -> . NAME LSQB INT RSQB
    (18) exp -> . NAME POP LPAREN INT RPAREN
    (19) exp -> . NAME INDEX LPAREN INT RPAREN
    (20) exp -> . NAME SLICE LPAREN INT COMMA INT RPAREN
    (22) exp -> . NAME
    (23) exp -> . NOT exp
    (24) exp -> . exp PLUS exp
    (25) exp -> . exp MINUS exp
    (26) exp -> . exp MULTIPLICATION exp
    (27) exp -> . exp DIVISION exp
    (28) exp -> . exp MODULO exp
    (29) exp -> . exp GREATERTHAN exp
    (30) exp -> . exp LESSTHAN exp
    (31) exp -> . exp GREATERTHANOREQUALTO exp
    (32) exp -> . exp LESSTHANOREQUALTO exp
    (33) exp -> . exp EQUALTO exp
    (34) exp -> . exp NOTEQUALTO exp
    (35) exp -> . exp COMMA exp
    (36) exp -> . exp AND exp
    (37) exp -> . exp OR exp
    (38) exp -> . exp POW exp
    (39) exp -> . STRING
    (40) exp -> . MINUS exp
    (51) exp -> . NAME LPAREN exp RPAREN

    LPAREN          shift and go to state 48
    FLOAT           shift and go to state 14
    INT             shift and go to state 15
    BOOL            shift and go to state 16
    CHAR            shift and go to state 17
    NAME            shift and go to state 18
    NOT             shift and go to state 19
    STRING          shift and go to state 21
    MINUS           shift and go to state 20

    exp                            shift and go to state 80

state 47

    (38) exp -> exp POW . exp
    (3) exp -> . LPAREN exp RPAREN
    (11) exp -> . FLOAT
    (12) exp -> . INT
    (13) exp -> . BOOL
    (14) exp -> . CHAR
    (17) exp -> . NAME LSQB INT RSQB
    (18) exp -> . NAME POP LPAREN INT RPAREN
    (19) exp -> . NAME INDEX LPAREN INT RPAREN
    (20) exp -> . NAME SLICE LPAREN INT COMMA INT RPAREN
    (22) exp -> . NAME
    (23) exp -> . NOT exp
    (24) exp -> . exp PLUS exp
    (25) exp -> . exp MINUS exp
    (26) exp -> . exp MULTIPLICATION exp
    (27) exp -> . exp DIVISION exp
    (28) exp -> . exp MODULO exp
    (29) exp -> . exp GREATERTHAN exp
    (30) exp -> . exp LESSTHAN exp
    (31) exp -> . exp GREATERTHANOREQUALTO exp
    (32) exp -> . exp LESSTHANOREQUALTO exp
    (33) exp -> . exp EQUALTO exp
    (34) exp -> . exp NOTEQUALTO exp
    (35) exp -> . exp COMMA exp
    (36) exp -> . exp AND exp
    (37) exp -> . exp OR exp
    (38) exp -> . exp POW exp
    (39) exp -> . STRING
    (40) exp -> . MINUS exp
    (51) exp -> . NAME LPAREN exp RPAREN

    LPAREN          shift and go to state 48
    FLOAT           shift and go to state 14
    INT             shift and go to state 15
    BOOL            shift and go to state 16
    CHAR            shift and go to state 17
    NAME            shift and go to state 18
    NOT             shift and go to state 19
    STRING          shift and go to state 21
    MINUS           shift and go to state 20

    exp                            shift and go to state 81

state 48

    (3) exp -> LPAREN . exp RPAREN
    (3) exp -> . LPAREN exp RPAREN
    (11) exp -> . FLOAT
    (12) exp -> . INT
    (13) exp -> . BOOL
    (14) exp -> . CHAR
    (17) exp -> . NAME LSQB INT RSQB
    (18) exp -> . NAME POP LPAREN INT RPAREN
    (19) exp -> . NAME INDEX LPAREN INT RPAREN
    (20) exp -> . NAME SLICE LPAREN INT COMMA INT RPAREN
    (22) exp -> . NAME
    (23) exp -> . NOT exp
    (24) exp -> . exp PLUS exp
    (25) exp -> . exp MINUS exp
    (26) exp -> . exp MULTIPLICATION exp
    (27) exp -> . exp DIVISION exp
    (28) exp -> . exp MODULO exp
    (29) exp -> . exp GREATERTHAN exp
    (30) exp -> . exp LESSTHAN exp
    (31) exp -> . exp GREATERTHANOREQUALTO exp
    (32) exp -> . exp LESSTHANOREQUALTO exp
    (33) exp -> . exp EQUALTO exp
    (34) exp -> . exp NOTEQUALTO exp
    (35) exp -> . exp COMMA exp
    (36) exp -> . exp AND exp
    (37) exp -> . exp OR exp
    (38) exp -> . exp POW exp
    (39) exp -> . STRING
    (40) exp -> . MINUS exp
    (51) exp -> . NAME LPAREN exp RPAREN

    LPAREN          shift and go to state 48
    FLOAT           shift and go to state 14
    INT             shift and go to state 15
    BOOL            shift and go to state 16
    CHAR            shift and go to state 17
    NAME            shift and go to state 18
    NOT             shift and go to state 19
    STRING          shift and go to state 21
    MINUS           shift and go to state 20

    exp                            shift and go to state 82

state 49

    (6) stmt -> PRINT LPAREN exp . RPAREN SEMICOL
    (3) exp -> LPAREN exp . RPAREN
    (24) exp -> exp . PLUS exp
    (25) exp -> exp . MINUS exp
    (26) exp -> exp . MULTIPLICATION exp
    (27) exp -> exp . DIVISION exp
    (28) exp -> exp . MODULO exp
    (29) exp -> exp . GREATERTHAN exp
    (30) exp -> exp . LESSTHAN exp
    (31) exp -> exp . GREATERTHANOREQUALTO exp
    (32) exp -> exp . LESSTHANOREQUALTO exp
    (33) exp -> exp . EQUALTO exp
    (34) exp -> exp . NOTEQUALTO exp
    (35) exp -> exp . COMMA exp
    (36) exp -> exp . AND exp
    (37) exp -> exp . OR exp
    (38) exp -> exp . POW exp

    RPAREN          shift and go to state 83
    PLUS            shift and go to state 34
    MINUS           shift and go to state 35
    MULTIPLICATION  shift and go to state 36
    DIVISION        shift and go to state 37
    MODULO          shift and go to state 38
    GREATERTHAN     shift and go to state 39
    LESSTHAN        shift and go to state 40
    GREATERTHANOREQUALTO shift and go to state 41
    LESSTHANOREQUALTO shift and go to state 42
    EQUALTO         shift and go to state 43
    NOTEQUALTO      shift and go to state 44
    COMMA           shift and go to state 84
    AND             shift and go to state 45
    OR              shift and go to state 46
    POW             shift and go to state 47


state 50

    (17) exp -> NAME LSQB . INT RSQB

    INT             shift and go to state 85


state 51

    (18) exp -> NAME POP . LPAREN INT RPAREN

    LPAREN          shift and go to state 86


state 52

    (51) exp -> NAME LPAREN . exp RPAREN
    (3) exp -> . LPAREN exp RPAREN
    (11) exp -> . FLOAT
    (12) exp -> . INT
    (13) exp -> . BOOL
    (14) exp -> . CHAR
    (17) exp -> . NAME LSQB INT RSQB
    (18) exp -> . NAME POP LPAREN INT RPAREN
    (19) exp -> . NAME INDEX LPAREN INT RPAREN
    (20) exp -> . NAME SLICE LPAREN INT COMMA INT RPAREN
    (22) exp -> . NAME
    (23) exp -> . NOT exp
    (24) exp -> . exp PLUS exp
    (25) exp -> . exp MINUS exp
    (26) exp -> . exp MULTIPLICATION exp
    (27) exp -> . exp DIVISION exp
    (28) exp -> . exp MODULO exp
    (29) exp -> . exp GREATERTHAN exp
    (30) exp -> . exp LESSTHAN exp
    (31) exp -> . exp GREATERTHANOREQUALTO exp
    (32) exp -> . exp LESSTHANOREQUALTO exp
    (33) exp -> . exp EQUALTO exp
    (34) exp -> . exp NOTEQUALTO exp
    (35) exp -> . exp COMMA exp
    (36) exp -> . exp AND exp
    (37) exp -> . exp OR exp
    (38) exp -> . exp POW exp
    (39) exp -> . STRING
    (40) exp -> . MINUS exp
    (51) exp -> . NAME LPAREN exp RPAREN

    LPAREN          shift and go to state 48
    FLOAT           shift and go to state 14
    INT             shift and go to state 15
    BOOL            shift and go to state 16
    CHAR            shift and go to state 17
    NAME            shift and go to state 18
    NOT             shift and go to state 19
    STRING          shift and go to state 21
    MINUS           shift and go to state 20

    exp                            shift and go to state 87

state 53

    (19) exp -> NAME INDEX . LPAREN INT RPAREN

    LPAREN          shift and go to state 88


state 54

    (20) exp -> NAME SLICE . LPAREN INT COMMA INT RPAREN

    LPAREN          shift and go to state 89


state 55

    (23) exp -> NOT exp .
    (24) exp -> exp . PLUS exp
    (25) exp -> exp . MINUS exp
    (26) exp -> exp . MULTIPLICATION exp
    (27) exp -> exp . DIVISION exp
    (28) exp -> exp . MODULO exp
    (29) exp -> exp . GREATERTHAN exp
    (30) exp -> exp . LESSTHAN exp
    (31) exp -> exp . GREATERTHANOREQUALTO exp
    (32) exp -> exp . LESSTHANOREQUALTO exp
    (33) exp -> exp . EQUALTO exp
    (34) exp -> exp . NOTEQUALTO exp
    (35) exp -> exp . COMMA exp
    (36) exp -> exp . AND exp
    (37) exp -> exp . OR exp
    (38) exp -> exp . POW exp

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MULTIPLICATION resolved as shift
  ! shift/reduce conflict for DIVISION resolved as shift
  ! shift/reduce conflict for MODULO resolved as shift
  ! shift/reduce conflict for GREATERTHAN resolved as shift
  ! shift/reduce conflict for LESSTHAN resolved as shift
  ! shift/reduce conflict for GREATERTHANOREQUALTO resolved as shift
  ! shift/reduce conflict for LESSTHANOREQUALTO resolved as shift
  ! shift/reduce conflict for EQUALTO resolved as shift
  ! shift/reduce conflict for NOTEQUALTO resolved as shift
  ! shift/reduce conflict for COMMA resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for POW resolved as shift
    SEMICOL         reduce using rule 23 (exp -> NOT exp .)
    RPAREN          reduce using rule 23 (exp -> NOT exp .)
    RSQB            reduce using rule 23 (exp -> NOT exp .)
    PLUS            shift and go to state 34
    MINUS           shift and go to state 35
    MULTIPLICATION  shift and go to state 36
    DIVISION        shift and go to state 37
    MODULO          shift and go to state 38
    GREATERTHAN     shift and go to state 39
    LESSTHAN        shift and go to state 40
    GREATERTHANOREQUALTO shift and go to state 41
    LESSTHANOREQUALTO shift and go to state 42
    EQUALTO         shift and go to state 43
    NOTEQUALTO      shift and go to state 44
    COMMA           shift and go to state 84
    AND             shift and go to state 45
    OR              shift and go to state 46
    POW             shift and go to state 47

  ! COMMA           [ reduce using rule 23 (exp -> NOT exp .) ]
  ! PLUS            [ reduce using rule 23 (exp -> NOT exp .) ]
  ! MINUS           [ reduce using rule 23 (exp -> NOT exp .) ]
  ! MULTIPLICATION  [ reduce using rule 23 (exp -> NOT exp .) ]
  ! DIVISION        [ reduce using rule 23 (exp -> NOT exp .) ]
  ! MODULO          [ reduce using rule 23 (exp -> NOT exp .) ]
  ! GREATERTHAN     [ reduce using rule 23 (exp -> NOT exp .) ]
  ! LESSTHAN        [ reduce using rule 23 (exp -> NOT exp .) ]
  ! GREATERTHANOREQUALTO [ reduce using rule 23 (exp -> NOT exp .) ]
  ! LESSTHANOREQUALTO [ reduce using rule 23 (exp -> NOT exp .) ]
  ! EQUALTO         [ reduce using rule 23 (exp -> NOT exp .) ]
  ! NOTEQUALTO      [ reduce using rule 23 (exp -> NOT exp .) ]
  ! AND             [ reduce using rule 23 (exp -> NOT exp .) ]
  ! OR              [ reduce using rule 23 (exp -> NOT exp .) ]
  ! POW             [ reduce using rule 23 (exp -> NOT exp .) ]


state 56

    (40) exp -> MINUS exp .
    (24) exp -> exp . PLUS exp
    (25) exp -> exp . MINUS exp
    (26) exp -> exp . MULTIPLICATION exp
    (27) exp -> exp . DIVISION exp
    (28) exp -> exp . MODULO exp
    (29) exp -> exp . GREATERTHAN exp
    (30) exp -> exp . LESSTHAN exp
    (31) exp -> exp . GREATERTHANOREQUALTO exp
    (32) exp -> exp . LESSTHANOREQUALTO exp
    (33) exp -> exp . EQUALTO exp
    (34) exp -> exp . NOTEQUALTO exp
    (35) exp -> exp . COMMA exp
    (36) exp -> exp . AND exp
    (37) exp -> exp . OR exp
    (38) exp -> exp . POW exp

    COMMA           reduce using rule 40 (exp -> MINUS exp .)
    SEMICOL         reduce using rule 40 (exp -> MINUS exp .)
    PLUS            reduce using rule 40 (exp -> MINUS exp .)
    MINUS           reduce using rule 40 (exp -> MINUS exp .)
    MULTIPLICATION  reduce using rule 40 (exp -> MINUS exp .)
    DIVISION        reduce using rule 40 (exp -> MINUS exp .)
    MODULO          reduce using rule 40 (exp -> MINUS exp .)
    GREATERTHAN     reduce using rule 40 (exp -> MINUS exp .)
    LESSTHAN        reduce using rule 40 (exp -> MINUS exp .)
    GREATERTHANOREQUALTO reduce using rule 40 (exp -> MINUS exp .)
    LESSTHANOREQUALTO reduce using rule 40 (exp -> MINUS exp .)
    EQUALTO         reduce using rule 40 (exp -> MINUS exp .)
    NOTEQUALTO      reduce using rule 40 (exp -> MINUS exp .)
    AND             reduce using rule 40 (exp -> MINUS exp .)
    OR              reduce using rule 40 (exp -> MINUS exp .)
    RPAREN          reduce using rule 40 (exp -> MINUS exp .)
    RSQB            reduce using rule 40 (exp -> MINUS exp .)
    POW             shift and go to state 47

  ! POW             [ reduce using rule 40 (exp -> MINUS exp .) ]
  ! PLUS            [ shift and go to state 34 ]
  ! MINUS           [ shift and go to state 35 ]
  ! MULTIPLICATION  [ shift and go to state 36 ]
  ! DIVISION        [ shift and go to state 37 ]
  ! MODULO          [ shift and go to state 38 ]
  ! GREATERTHAN     [ shift and go to state 39 ]
  ! LESSTHAN        [ shift and go to state 40 ]
  ! GREATERTHANOREQUALTO [ shift and go to state 41 ]
  ! LESSTHANOREQUALTO [ shift and go to state 42 ]
  ! EQUALTO         [ shift and go to state 43 ]
  ! NOTEQUALTO      [ shift and go to state 44 ]
  ! COMMA           [ shift and go to state 84 ]
  ! AND             [ shift and go to state 45 ]
  ! OR              [ shift and go to state 46 ]


state 57

    (7) stmt -> VARTYPE NAME ASSIGN . exp SEMICOL
    (8) stmt -> VARTYPE NAME ASSIGN . stmt SEMICOL
    (3) exp -> . LPAREN exp RPAREN
    (11) exp -> . FLOAT
    (12) exp -> . INT
    (13) exp -> . BOOL
    (14) exp -> . CHAR
    (17) exp -> . NAME LSQB INT RSQB
    (18) exp -> . NAME POP LPAREN INT RPAREN
    (19) exp -> . NAME INDEX LPAREN INT RPAREN
    (20) exp -> . NAME SLICE LPAREN INT COMMA INT RPAREN
    (22) exp -> . NAME
    (23) exp -> . NOT exp
    (24) exp -> . exp PLUS exp
    (25) exp -> . exp MINUS exp
    (26) exp -> . exp MULTIPLICATION exp
    (27) exp -> . exp DIVISION exp
    (28) exp -> . exp MODULO exp
    (29) exp -> . exp GREATERTHAN exp
    (30) exp -> . exp LESSTHAN exp
    (31) exp -> . exp GREATERTHANOREQUALTO exp
    (32) exp -> . exp LESSTHANOREQUALTO exp
    (33) exp -> . exp EQUALTO exp
    (34) exp -> . exp NOTEQUALTO exp
    (35) exp -> . exp COMMA exp
    (36) exp -> . exp AND exp
    (37) exp -> . exp OR exp
    (38) exp -> . exp POW exp
    (39) exp -> . STRING
    (40) exp -> . MINUS exp
    (51) exp -> . NAME LPAREN exp RPAREN
    (4) stmt -> . PRINT exp COMMA exp SEMICOL
    (5) stmt -> . PRINT exp SEMICOL
    (6) stmt -> . PRINT LPAREN exp RPAREN SEMICOL
    (7) stmt -> . VARTYPE NAME ASSIGN exp SEMICOL
    (8) stmt -> . VARTYPE NAME ASSIGN stmt SEMICOL
    (9) stmt -> . NAME ASSIGN exp SEMICOL
    (10) stmt -> . VARTYPE NAME
    (15) stmt -> . NAME INCREMENT SEMICOL
    (16) stmt -> . NAME DECREMENT SEMICOL
    (21) stmt -> . NAME PUSH LPAREN exp RPAREN SEMICOL
    (41) stmt -> . LIST NAME ASSIGN LSQB exp RSQB SEMICOL
    (42) stmt -> . LIST NAME ASSIGN LSQB RSQB SEMICOL
    (43) stmt -> . IF LPAREN exp RPAREN LCURLY S RCURLY block
    (47) stmt -> . DO LCURLY S RCURLY block_w
    (49) stmt -> . FUNCTION NAME LPAREN stmt RPAREN LCURLY S RCURLY
    (50) stmt -> . RETURN LPAREN exp RPAREN SEMICOL

    LPAREN          shift and go to state 48
    FLOAT           shift and go to state 14
    INT             shift and go to state 15
    BOOL            shift and go to state 16
    CHAR            shift and go to state 17
    NAME            shift and go to state 90
    NOT             shift and go to state 19
    STRING          shift and go to state 21
    MINUS           shift and go to state 20
    PRINT           shift and go to state 3
    VARTYPE         shift and go to state 4
    LIST            shift and go to state 6
    IF              shift and go to state 7
    DO              shift and go to state 8
    FUNCTION        shift and go to state 9
    RETURN          shift and go to state 10

    exp                            shift and go to state 91
    stmt                           shift and go to state 92

state 58

    (9) stmt -> NAME ASSIGN exp . SEMICOL
    (24) exp -> exp . PLUS exp
    (25) exp -> exp . MINUS exp
    (26) exp -> exp . MULTIPLICATION exp
    (27) exp -> exp . DIVISION exp
    (28) exp -> exp . MODULO exp
    (29) exp -> exp . GREATERTHAN exp
    (30) exp -> exp . LESSTHAN exp
    (31) exp -> exp . GREATERTHANOREQUALTO exp
    (32) exp -> exp . LESSTHANOREQUALTO exp
    (33) exp -> exp . EQUALTO exp
    (34) exp -> exp . NOTEQUALTO exp
    (35) exp -> exp . COMMA exp
    (36) exp -> exp . AND exp
    (37) exp -> exp . OR exp
    (38) exp -> exp . POW exp

    SEMICOL         shift and go to state 93
    PLUS            shift and go to state 34
    MINUS           shift and go to state 35
    MULTIPLICATION  shift and go to state 36
    DIVISION        shift and go to state 37
    MODULO          shift and go to state 38
    GREATERTHAN     shift and go to state 39
    LESSTHAN        shift and go to state 40
    GREATERTHANOREQUALTO shift and go to state 41
    LESSTHANOREQUALTO shift and go to state 42
    EQUALTO         shift and go to state 43
    NOTEQUALTO      shift and go to state 44
    COMMA           shift and go to state 84
    AND             shift and go to state 45
    OR              shift and go to state 46
    POW             shift and go to state 47


state 59

    (15) stmt -> NAME INCREMENT SEMICOL .

    PRINT           reduce using rule 15 (stmt -> NAME INCREMENT SEMICOL .)
    VARTYPE         reduce using rule 15 (stmt -> NAME INCREMENT SEMICOL .)
    NAME            reduce using rule 15 (stmt -> NAME INCREMENT SEMICOL .)
    LIST            reduce using rule 15 (stmt -> NAME INCREMENT SEMICOL .)
    IF              reduce using rule 15 (stmt -> NAME INCREMENT SEMICOL .)
    DO              reduce using rule 15 (stmt -> NAME INCREMENT SEMICOL .)
    FUNCTION        reduce using rule 15 (stmt -> NAME INCREMENT SEMICOL .)
    RETURN          reduce using rule 15 (stmt -> NAME INCREMENT SEMICOL .)
    $end            reduce using rule 15 (stmt -> NAME INCREMENT SEMICOL .)
    RCURLY          reduce using rule 15 (stmt -> NAME INCREMENT SEMICOL .)
    SEMICOL         reduce using rule 15 (stmt -> NAME INCREMENT SEMICOL .)
    RPAREN          reduce using rule 15 (stmt -> NAME INCREMENT SEMICOL .)


state 60

    (16) stmt -> NAME DECREMENT SEMICOL .

    PRINT           reduce using rule 16 (stmt -> NAME DECREMENT SEMICOL .)
    VARTYPE         reduce using rule 16 (stmt -> NAME DECREMENT SEMICOL .)
    NAME            reduce using rule 16 (stmt -> NAME DECREMENT SEMICOL .)
    LIST            reduce using rule 16 (stmt -> NAME DECREMENT SEMICOL .)
    IF              reduce using rule 16 (stmt -> NAME DECREMENT SEMICOL .)
    DO              reduce using rule 16 (stmt -> NAME DECREMENT SEMICOL .)
    FUNCTION        reduce using rule 16 (stmt -> NAME DECREMENT SEMICOL .)
    RETURN          reduce using rule 16 (stmt -> NAME DECREMENT SEMICOL .)
    $end            reduce using rule 16 (stmt -> NAME DECREMENT SEMICOL .)
    RCURLY          reduce using rule 16 (stmt -> NAME DECREMENT SEMICOL .)
    SEMICOL         reduce using rule 16 (stmt -> NAME DECREMENT SEMICOL .)
    RPAREN          reduce using rule 16 (stmt -> NAME DECREMENT SEMICOL .)


state 61

    (21) stmt -> NAME PUSH LPAREN . exp RPAREN SEMICOL
    (3) exp -> . LPAREN exp RPAREN
    (11) exp -> . FLOAT
    (12) exp -> . INT
    (13) exp -> . BOOL
    (14) exp -> . CHAR
    (17) exp -> . NAME LSQB INT RSQB
    (18) exp -> . NAME POP LPAREN INT RPAREN
    (19) exp -> . NAME INDEX LPAREN INT RPAREN
    (20) exp -> . NAME SLICE LPAREN INT COMMA INT RPAREN
    (22) exp -> . NAME
    (23) exp -> . NOT exp
    (24) exp -> . exp PLUS exp
    (25) exp -> . exp MINUS exp
    (26) exp -> . exp MULTIPLICATION exp
    (27) exp -> . exp DIVISION exp
    (28) exp -> . exp MODULO exp
    (29) exp -> . exp GREATERTHAN exp
    (30) exp -> . exp LESSTHAN exp
    (31) exp -> . exp GREATERTHANOREQUALTO exp
    (32) exp -> . exp LESSTHANOREQUALTO exp
    (33) exp -> . exp EQUALTO exp
    (34) exp -> . exp NOTEQUALTO exp
    (35) exp -> . exp COMMA exp
    (36) exp -> . exp AND exp
    (37) exp -> . exp OR exp
    (38) exp -> . exp POW exp
    (39) exp -> . STRING
    (40) exp -> . MINUS exp
    (51) exp -> . NAME LPAREN exp RPAREN

    LPAREN          shift and go to state 48
    FLOAT           shift and go to state 14
    INT             shift and go to state 15
    BOOL            shift and go to state 16
    CHAR            shift and go to state 17
    NAME            shift and go to state 18
    NOT             shift and go to state 19
    STRING          shift and go to state 21
    MINUS           shift and go to state 20

    exp                            shift and go to state 94

state 62

    (41) stmt -> LIST NAME ASSIGN . LSQB exp RSQB SEMICOL
    (42) stmt -> LIST NAME ASSIGN . LSQB RSQB SEMICOL

    LSQB            shift and go to state 95


state 63

    (43) stmt -> IF LPAREN exp . RPAREN LCURLY S RCURLY block
    (24) exp -> exp . PLUS exp
    (25) exp -> exp . MINUS exp
    (26) exp -> exp . MULTIPLICATION exp
    (27) exp -> exp . DIVISION exp
    (28) exp -> exp . MODULO exp
    (29) exp -> exp . GREATERTHAN exp
    (30) exp -> exp . LESSTHAN exp
    (31) exp -> exp . GREATERTHANOREQUALTO exp
    (32) exp -> exp . LESSTHANOREQUALTO exp
    (33) exp -> exp . EQUALTO exp
    (34) exp -> exp . NOTEQUALTO exp
    (35) exp -> exp . COMMA exp
    (36) exp -> exp . AND exp
    (37) exp -> exp . OR exp
    (38) exp -> exp . POW exp

    RPAREN          shift and go to state 96
    PLUS            shift and go to state 34
    MINUS           shift and go to state 35
    MULTIPLICATION  shift and go to state 36
    DIVISION        shift and go to state 37
    MODULO          shift and go to state 38
    GREATERTHAN     shift and go to state 39
    LESSTHAN        shift and go to state 40
    GREATERTHANOREQUALTO shift and go to state 41
    LESSTHANOREQUALTO shift and go to state 42
    EQUALTO         shift and go to state 43
    NOTEQUALTO      shift and go to state 44
    COMMA           shift and go to state 84
    AND             shift and go to state 45
    OR              shift and go to state 46
    POW             shift and go to state 47


state 64

    (47) stmt -> DO LCURLY S . RCURLY block_w

    RCURLY          shift and go to state 97


state 65

    (49) stmt -> FUNCTION NAME LPAREN . stmt RPAREN LCURLY S RCURLY
    (4) stmt -> . PRINT exp COMMA exp SEMICOL
    (5) stmt -> . PRINT exp SEMICOL
    (6) stmt -> . PRINT LPAREN exp RPAREN SEMICOL
    (7) stmt -> . VARTYPE NAME ASSIGN exp SEMICOL
    (8) stmt -> . VARTYPE NAME ASSIGN stmt SEMICOL
    (9) stmt -> . NAME ASSIGN exp SEMICOL
    (10) stmt -> . VARTYPE NAME
    (15) stmt -> . NAME INCREMENT SEMICOL
    (16) stmt -> . NAME DECREMENT SEMICOL
    (21) stmt -> . NAME PUSH LPAREN exp RPAREN SEMICOL
    (41) stmt -> . LIST NAME ASSIGN LSQB exp RSQB SEMICOL
    (42) stmt -> . LIST NAME ASSIGN LSQB RSQB SEMICOL
    (43) stmt -> . IF LPAREN exp RPAREN LCURLY S RCURLY block
    (47) stmt -> . DO LCURLY S RCURLY block_w
    (49) stmt -> . FUNCTION NAME LPAREN stmt RPAREN LCURLY S RCURLY
    (50) stmt -> . RETURN LPAREN exp RPAREN SEMICOL

    PRINT           shift and go to state 3
    VARTYPE         shift and go to state 4
    NAME            shift and go to state 5
    LIST            shift and go to state 6
    IF              shift and go to state 7
    DO              shift and go to state 8
    FUNCTION        shift and go to state 9
    RETURN          shift and go to state 10

    stmt                           shift and go to state 98

state 66

    (50) stmt -> RETURN LPAREN exp . RPAREN SEMICOL
    (24) exp -> exp . PLUS exp
    (25) exp -> exp . MINUS exp
    (26) exp -> exp . MULTIPLICATION exp
    (27) exp -> exp . DIVISION exp
    (28) exp -> exp . MODULO exp
    (29) exp -> exp . GREATERTHAN exp
    (30) exp -> exp . LESSTHAN exp
    (31) exp -> exp . GREATERTHANOREQUALTO exp
    (32) exp -> exp . LESSTHANOREQUALTO exp
    (33) exp -> exp . EQUALTO exp
    (34) exp -> exp . NOTEQUALTO exp
    (35) exp -> exp . COMMA exp
    (36) exp -> exp . AND exp
    (37) exp -> exp . OR exp
    (38) exp -> exp . POW exp

    RPAREN          shift and go to state 99
    PLUS            shift and go to state 34
    MINUS           shift and go to state 35
    MULTIPLICATION  shift and go to state 36
    DIVISION        shift and go to state 37
    MODULO          shift and go to state 38
    GREATERTHAN     shift and go to state 39
    LESSTHAN        shift and go to state 40
    GREATERTHANOREQUALTO shift and go to state 41
    LESSTHANOREQUALTO shift and go to state 42
    EQUALTO         shift and go to state 43
    NOTEQUALTO      shift and go to state 44
    COMMA           shift and go to state 84
    AND             shift and go to state 45
    OR              shift and go to state 46
    POW             shift and go to state 47


state 67

    (4) stmt -> PRINT exp COMMA exp . SEMICOL
    (35) exp -> exp COMMA exp .
    (24) exp -> exp . PLUS exp
    (25) exp -> exp . MINUS exp
    (26) exp -> exp . MULTIPLICATION exp
    (27) exp -> exp . DIVISION exp
    (28) exp -> exp . MODULO exp
    (29) exp -> exp . GREATERTHAN exp
    (30) exp -> exp . LESSTHAN exp
    (31) exp -> exp . GREATERTHANOREQUALTO exp
    (32) exp -> exp . LESSTHANOREQUALTO exp
    (33) exp -> exp . EQUALTO exp
    (34) exp -> exp . NOTEQUALTO exp
    (35) exp -> exp . COMMA exp
    (36) exp -> exp . AND exp
    (37) exp -> exp . OR exp
    (38) exp -> exp . POW exp

  ! shift/reduce conflict for SEMICOL resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MULTIPLICATION resolved as shift
  ! shift/reduce conflict for DIVISION resolved as shift
  ! shift/reduce conflict for MODULO resolved as shift
  ! shift/reduce conflict for GREATERTHAN resolved as shift
  ! shift/reduce conflict for LESSTHAN resolved as shift
  ! shift/reduce conflict for GREATERTHANOREQUALTO resolved as shift
  ! shift/reduce conflict for LESSTHANOREQUALTO resolved as shift
  ! shift/reduce conflict for EQUALTO resolved as shift
  ! shift/reduce conflict for NOTEQUALTO resolved as shift
  ! shift/reduce conflict for COMMA resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for POW resolved as shift
    SEMICOL         shift and go to state 100
    PLUS            shift and go to state 34
    MINUS           shift and go to state 35
    MULTIPLICATION  shift and go to state 36
    DIVISION        shift and go to state 37
    MODULO          shift and go to state 38
    GREATERTHAN     shift and go to state 39
    LESSTHAN        shift and go to state 40
    GREATERTHANOREQUALTO shift and go to state 41
    LESSTHANOREQUALTO shift and go to state 42
    EQUALTO         shift and go to state 43
    NOTEQUALTO      shift and go to state 44
    COMMA           shift and go to state 84
    AND             shift and go to state 45
    OR              shift and go to state 46
    POW             shift and go to state 47

  ! COMMA           [ reduce using rule 35 (exp -> exp COMMA exp .) ]
  ! SEMICOL         [ reduce using rule 35 (exp -> exp COMMA exp .) ]
  ! PLUS            [ reduce using rule 35 (exp -> exp COMMA exp .) ]
  ! MINUS           [ reduce using rule 35 (exp -> exp COMMA exp .) ]
  ! MULTIPLICATION  [ reduce using rule 35 (exp -> exp COMMA exp .) ]
  ! DIVISION        [ reduce using rule 35 (exp -> exp COMMA exp .) ]
  ! MODULO          [ reduce using rule 35 (exp -> exp COMMA exp .) ]
  ! GREATERTHAN     [ reduce using rule 35 (exp -> exp COMMA exp .) ]
  ! LESSTHAN        [ reduce using rule 35 (exp -> exp COMMA exp .) ]
  ! GREATERTHANOREQUALTO [ reduce using rule 35 (exp -> exp COMMA exp .) ]
  ! LESSTHANOREQUALTO [ reduce using rule 35 (exp -> exp COMMA exp .) ]
  ! EQUALTO         [ reduce using rule 35 (exp -> exp COMMA exp .) ]
  ! NOTEQUALTO      [ reduce using rule 35 (exp -> exp COMMA exp .) ]
  ! AND             [ reduce using rule 35 (exp -> exp COMMA exp .) ]
  ! OR              [ reduce using rule 35 (exp -> exp COMMA exp .) ]
  ! POW             [ reduce using rule 35 (exp -> exp COMMA exp .) ]


state 68

    (24) exp -> exp PLUS exp .
    (24) exp -> exp . PLUS exp
    (25) exp -> exp . MINUS exp
    (26) exp -> exp . MULTIPLICATION exp
    (27) exp -> exp . DIVISION exp
    (28) exp -> exp . MODULO exp
    (29) exp -> exp . GREATERTHAN exp
    (30) exp -> exp . LESSTHAN exp
    (31) exp -> exp . GREATERTHANOREQUALTO exp
    (32) exp -> exp . LESSTHANOREQUALTO exp
    (33) exp -> exp . EQUALTO exp
    (34) exp -> exp . NOTEQUALTO exp
    (35) exp -> exp . COMMA exp
    (36) exp -> exp . AND exp
    (37) exp -> exp . OR exp
    (38) exp -> exp . POW exp

    COMMA           reduce using rule 24 (exp -> exp PLUS exp .)
    SEMICOL         reduce using rule 24 (exp -> exp PLUS exp .)
    PLUS            reduce using rule 24 (exp -> exp PLUS exp .)
    MINUS           reduce using rule 24 (exp -> exp PLUS exp .)
    GREATERTHAN     reduce using rule 24 (exp -> exp PLUS exp .)
    LESSTHAN        reduce using rule 24 (exp -> exp PLUS exp .)
    GREATERTHANOREQUALTO reduce using rule 24 (exp -> exp PLUS exp .)
    LESSTHANOREQUALTO reduce using rule 24 (exp -> exp PLUS exp .)
    EQUALTO         reduce using rule 24 (exp -> exp PLUS exp .)
    NOTEQUALTO      reduce using rule 24 (exp -> exp PLUS exp .)
    AND             reduce using rule 24 (exp -> exp PLUS exp .)
    OR              reduce using rule 24 (exp -> exp PLUS exp .)
    RPAREN          reduce using rule 24 (exp -> exp PLUS exp .)
    RSQB            reduce using rule 24 (exp -> exp PLUS exp .)
    MULTIPLICATION  shift and go to state 36
    DIVISION        shift and go to state 37
    MODULO          shift and go to state 38
    POW             shift and go to state 47

  ! MULTIPLICATION  [ reduce using rule 24 (exp -> exp PLUS exp .) ]
  ! DIVISION        [ reduce using rule 24 (exp -> exp PLUS exp .) ]
  ! MODULO          [ reduce using rule 24 (exp -> exp PLUS exp .) ]
  ! POW             [ reduce using rule 24 (exp -> exp PLUS exp .) ]
  ! PLUS            [ shift and go to state 34 ]
  ! MINUS           [ shift and go to state 35 ]
  ! GREATERTHAN     [ shift and go to state 39 ]
  ! LESSTHAN        [ shift and go to state 40 ]
  ! GREATERTHANOREQUALTO [ shift and go to state 41 ]
  ! LESSTHANOREQUALTO [ shift and go to state 42 ]
  ! EQUALTO         [ shift and go to state 43 ]
  ! NOTEQUALTO      [ shift and go to state 44 ]
  ! COMMA           [ shift and go to state 84 ]
  ! AND             [ shift and go to state 45 ]
  ! OR              [ shift and go to state 46 ]


state 69

    (25) exp -> exp MINUS exp .
    (24) exp -> exp . PLUS exp
    (25) exp -> exp . MINUS exp
    (26) exp -> exp . MULTIPLICATION exp
    (27) exp -> exp . DIVISION exp
    (28) exp -> exp . MODULO exp
    (29) exp -> exp . GREATERTHAN exp
    (30) exp -> exp . LESSTHAN exp
    (31) exp -> exp . GREATERTHANOREQUALTO exp
    (32) exp -> exp . LESSTHANOREQUALTO exp
    (33) exp -> exp . EQUALTO exp
    (34) exp -> exp . NOTEQUALTO exp
    (35) exp -> exp . COMMA exp
    (36) exp -> exp . AND exp
    (37) exp -> exp . OR exp
    (38) exp -> exp . POW exp

    COMMA           reduce using rule 25 (exp -> exp MINUS exp .)
    SEMICOL         reduce using rule 25 (exp -> exp MINUS exp .)
    PLUS            reduce using rule 25 (exp -> exp MINUS exp .)
    MINUS           reduce using rule 25 (exp -> exp MINUS exp .)
    GREATERTHAN     reduce using rule 25 (exp -> exp MINUS exp .)
    LESSTHAN        reduce using rule 25 (exp -> exp MINUS exp .)
    GREATERTHANOREQUALTO reduce using rule 25 (exp -> exp MINUS exp .)
    LESSTHANOREQUALTO reduce using rule 25 (exp -> exp MINUS exp .)
    EQUALTO         reduce using rule 25 (exp -> exp MINUS exp .)
    NOTEQUALTO      reduce using rule 25 (exp -> exp MINUS exp .)
    AND             reduce using rule 25 (exp -> exp MINUS exp .)
    OR              reduce using rule 25 (exp -> exp MINUS exp .)
    RPAREN          reduce using rule 25 (exp -> exp MINUS exp .)
    RSQB            reduce using rule 25 (exp -> exp MINUS exp .)
    MULTIPLICATION  shift and go to state 36
    DIVISION        shift and go to state 37
    MODULO          shift and go to state 38
    POW             shift and go to state 47

  ! MULTIPLICATION  [ reduce using rule 25 (exp -> exp MINUS exp .) ]
  ! DIVISION        [ reduce using rule 25 (exp -> exp MINUS exp .) ]
  ! MODULO          [ reduce using rule 25 (exp -> exp MINUS exp .) ]
  ! POW             [ reduce using rule 25 (exp -> exp MINUS exp .) ]
  ! PLUS            [ shift and go to state 34 ]
  ! MINUS           [ shift and go to state 35 ]
  ! GREATERTHAN     [ shift and go to state 39 ]
  ! LESSTHAN        [ shift and go to state 40 ]
  ! GREATERTHANOREQUALTO [ shift and go to state 41 ]
  ! LESSTHANOREQUALTO [ shift and go to state 42 ]
  ! EQUALTO         [ shift and go to state 43 ]
  ! NOTEQUALTO      [ shift and go to state 44 ]
  ! COMMA           [ shift and go to state 84 ]
  ! AND             [ shift and go to state 45 ]
  ! OR              [ shift and go to state 46 ]


state 70

    (26) exp -> exp MULTIPLICATION exp .
    (24) exp -> exp . PLUS exp
    (25) exp -> exp . MINUS exp
    (26) exp -> exp . MULTIPLICATION exp
    (27) exp -> exp . DIVISION exp
    (28) exp -> exp . MODULO exp
    (29) exp -> exp . GREATERTHAN exp
    (30) exp -> exp . LESSTHAN exp
    (31) exp -> exp . GREATERTHANOREQUALTO exp
    (32) exp -> exp . LESSTHANOREQUALTO exp
    (33) exp -> exp . EQUALTO exp
    (34) exp -> exp . NOTEQUALTO exp
    (35) exp -> exp . COMMA exp
    (36) exp -> exp . AND exp
    (37) exp -> exp . OR exp
    (38) exp -> exp . POW exp

    COMMA           reduce using rule 26 (exp -> exp MULTIPLICATION exp .)
    SEMICOL         reduce using rule 26 (exp -> exp MULTIPLICATION exp .)
    PLUS            reduce using rule 26 (exp -> exp MULTIPLICATION exp .)
    MINUS           reduce using rule 26 (exp -> exp MULTIPLICATION exp .)
    MULTIPLICATION  reduce using rule 26 (exp -> exp MULTIPLICATION exp .)
    DIVISION        reduce using rule 26 (exp -> exp MULTIPLICATION exp .)
    MODULO          reduce using rule 26 (exp -> exp MULTIPLICATION exp .)
    GREATERTHAN     reduce using rule 26 (exp -> exp MULTIPLICATION exp .)
    LESSTHAN        reduce using rule 26 (exp -> exp MULTIPLICATION exp .)
    GREATERTHANOREQUALTO reduce using rule 26 (exp -> exp MULTIPLICATION exp .)
    LESSTHANOREQUALTO reduce using rule 26 (exp -> exp MULTIPLICATION exp .)
    EQUALTO         reduce using rule 26 (exp -> exp MULTIPLICATION exp .)
    NOTEQUALTO      reduce using rule 26 (exp -> exp MULTIPLICATION exp .)
    AND             reduce using rule 26 (exp -> exp MULTIPLICATION exp .)
    OR              reduce using rule 26 (exp -> exp MULTIPLICATION exp .)
    RPAREN          reduce using rule 26 (exp -> exp MULTIPLICATION exp .)
    RSQB            reduce using rule 26 (exp -> exp MULTIPLICATION exp .)
    POW             shift and go to state 47

  ! POW             [ reduce using rule 26 (exp -> exp MULTIPLICATION exp .) ]
  ! PLUS            [ shift and go to state 34 ]
  ! MINUS           [ shift and go to state 35 ]
  ! MULTIPLICATION  [ shift and go to state 36 ]
  ! DIVISION        [ shift and go to state 37 ]
  ! MODULO          [ shift and go to state 38 ]
  ! GREATERTHAN     [ shift and go to state 39 ]
  ! LESSTHAN        [ shift and go to state 40 ]
  ! GREATERTHANOREQUALTO [ shift and go to state 41 ]
  ! LESSTHANOREQUALTO [ shift and go to state 42 ]
  ! EQUALTO         [ shift and go to state 43 ]
  ! NOTEQUALTO      [ shift and go to state 44 ]
  ! COMMA           [ shift and go to state 84 ]
  ! AND             [ shift and go to state 45 ]
  ! OR              [ shift and go to state 46 ]


state 71

    (27) exp -> exp DIVISION exp .
    (24) exp -> exp . PLUS exp
    (25) exp -> exp . MINUS exp
    (26) exp -> exp . MULTIPLICATION exp
    (27) exp -> exp . DIVISION exp
    (28) exp -> exp . MODULO exp
    (29) exp -> exp . GREATERTHAN exp
    (30) exp -> exp . LESSTHAN exp
    (31) exp -> exp . GREATERTHANOREQUALTO exp
    (32) exp -> exp . LESSTHANOREQUALTO exp
    (33) exp -> exp . EQUALTO exp
    (34) exp -> exp . NOTEQUALTO exp
    (35) exp -> exp . COMMA exp
    (36) exp -> exp . AND exp
    (37) exp -> exp . OR exp
    (38) exp -> exp . POW exp

    COMMA           reduce using rule 27 (exp -> exp DIVISION exp .)
    SEMICOL         reduce using rule 27 (exp -> exp DIVISION exp .)
    PLUS            reduce using rule 27 (exp -> exp DIVISION exp .)
    MINUS           reduce using rule 27 (exp -> exp DIVISION exp .)
    MULTIPLICATION  reduce using rule 27 (exp -> exp DIVISION exp .)
    DIVISION        reduce using rule 27 (exp -> exp DIVISION exp .)
    MODULO          reduce using rule 27 (exp -> exp DIVISION exp .)
    GREATERTHAN     reduce using rule 27 (exp -> exp DIVISION exp .)
    LESSTHAN        reduce using rule 27 (exp -> exp DIVISION exp .)
    GREATERTHANOREQUALTO reduce using rule 27 (exp -> exp DIVISION exp .)
    LESSTHANOREQUALTO reduce using rule 27 (exp -> exp DIVISION exp .)
    EQUALTO         reduce using rule 27 (exp -> exp DIVISION exp .)
    NOTEQUALTO      reduce using rule 27 (exp -> exp DIVISION exp .)
    AND             reduce using rule 27 (exp -> exp DIVISION exp .)
    OR              reduce using rule 27 (exp -> exp DIVISION exp .)
    RPAREN          reduce using rule 27 (exp -> exp DIVISION exp .)
    RSQB            reduce using rule 27 (exp -> exp DIVISION exp .)
    POW             shift and go to state 47

  ! POW             [ reduce using rule 27 (exp -> exp DIVISION exp .) ]
  ! PLUS            [ shift and go to state 34 ]
  ! MINUS           [ shift and go to state 35 ]
  ! MULTIPLICATION  [ shift and go to state 36 ]
  ! DIVISION        [ shift and go to state 37 ]
  ! MODULO          [ shift and go to state 38 ]
  ! GREATERTHAN     [ shift and go to state 39 ]
  ! LESSTHAN        [ shift and go to state 40 ]
  ! GREATERTHANOREQUALTO [ shift and go to state 41 ]
  ! LESSTHANOREQUALTO [ shift and go to state 42 ]
  ! EQUALTO         [ shift and go to state 43 ]
  ! NOTEQUALTO      [ shift and go to state 44 ]
  ! COMMA           [ shift and go to state 84 ]
  ! AND             [ shift and go to state 45 ]
  ! OR              [ shift and go to state 46 ]


state 72

    (28) exp -> exp MODULO exp .
    (24) exp -> exp . PLUS exp
    (25) exp -> exp . MINUS exp
    (26) exp -> exp . MULTIPLICATION exp
    (27) exp -> exp . DIVISION exp
    (28) exp -> exp . MODULO exp
    (29) exp -> exp . GREATERTHAN exp
    (30) exp -> exp . LESSTHAN exp
    (31) exp -> exp . GREATERTHANOREQUALTO exp
    (32) exp -> exp . LESSTHANOREQUALTO exp
    (33) exp -> exp . EQUALTO exp
    (34) exp -> exp . NOTEQUALTO exp
    (35) exp -> exp . COMMA exp
    (36) exp -> exp . AND exp
    (37) exp -> exp . OR exp
    (38) exp -> exp . POW exp

    COMMA           reduce using rule 28 (exp -> exp MODULO exp .)
    SEMICOL         reduce using rule 28 (exp -> exp MODULO exp .)
    PLUS            reduce using rule 28 (exp -> exp MODULO exp .)
    MINUS           reduce using rule 28 (exp -> exp MODULO exp .)
    MULTIPLICATION  reduce using rule 28 (exp -> exp MODULO exp .)
    DIVISION        reduce using rule 28 (exp -> exp MODULO exp .)
    MODULO          reduce using rule 28 (exp -> exp MODULO exp .)
    GREATERTHAN     reduce using rule 28 (exp -> exp MODULO exp .)
    LESSTHAN        reduce using rule 28 (exp -> exp MODULO exp .)
    GREATERTHANOREQUALTO reduce using rule 28 (exp -> exp MODULO exp .)
    LESSTHANOREQUALTO reduce using rule 28 (exp -> exp MODULO exp .)
    EQUALTO         reduce using rule 28 (exp -> exp MODULO exp .)
    NOTEQUALTO      reduce using rule 28 (exp -> exp MODULO exp .)
    AND             reduce using rule 28 (exp -> exp MODULO exp .)
    OR              reduce using rule 28 (exp -> exp MODULO exp .)
    RPAREN          reduce using rule 28 (exp -> exp MODULO exp .)
    RSQB            reduce using rule 28 (exp -> exp MODULO exp .)
    POW             shift and go to state 47

  ! POW             [ reduce using rule 28 (exp -> exp MODULO exp .) ]
  ! PLUS            [ shift and go to state 34 ]
  ! MINUS           [ shift and go to state 35 ]
  ! MULTIPLICATION  [ shift and go to state 36 ]
  ! DIVISION        [ shift and go to state 37 ]
  ! MODULO          [ shift and go to state 38 ]
  ! GREATERTHAN     [ shift and go to state 39 ]
  ! LESSTHAN        [ shift and go to state 40 ]
  ! GREATERTHANOREQUALTO [ shift and go to state 41 ]
  ! LESSTHANOREQUALTO [ shift and go to state 42 ]
  ! EQUALTO         [ shift and go to state 43 ]
  ! NOTEQUALTO      [ shift and go to state 44 ]
  ! COMMA           [ shift and go to state 84 ]
  ! AND             [ shift and go to state 45 ]
  ! OR              [ shift and go to state 46 ]


state 73

    (29) exp -> exp GREATERTHAN exp .
    (24) exp -> exp . PLUS exp
    (25) exp -> exp . MINUS exp
    (26) exp -> exp . MULTIPLICATION exp
    (27) exp -> exp . DIVISION exp
    (28) exp -> exp . MODULO exp
    (29) exp -> exp . GREATERTHAN exp
    (30) exp -> exp . LESSTHAN exp
    (31) exp -> exp . GREATERTHANOREQUALTO exp
    (32) exp -> exp . LESSTHANOREQUALTO exp
    (33) exp -> exp . EQUALTO exp
    (34) exp -> exp . NOTEQUALTO exp
    (35) exp -> exp . COMMA exp
    (36) exp -> exp . AND exp
    (37) exp -> exp . OR exp
    (38) exp -> exp . POW exp

    COMMA           reduce using rule 29 (exp -> exp GREATERTHAN exp .)
    SEMICOL         reduce using rule 29 (exp -> exp GREATERTHAN exp .)
    GREATERTHAN     reduce using rule 29 (exp -> exp GREATERTHAN exp .)
    LESSTHAN        reduce using rule 29 (exp -> exp GREATERTHAN exp .)
    GREATERTHANOREQUALTO reduce using rule 29 (exp -> exp GREATERTHAN exp .)
    LESSTHANOREQUALTO reduce using rule 29 (exp -> exp GREATERTHAN exp .)
    EQUALTO         reduce using rule 29 (exp -> exp GREATERTHAN exp .)
    NOTEQUALTO      reduce using rule 29 (exp -> exp GREATERTHAN exp .)
    AND             reduce using rule 29 (exp -> exp GREATERTHAN exp .)
    OR              reduce using rule 29 (exp -> exp GREATERTHAN exp .)
    RPAREN          reduce using rule 29 (exp -> exp GREATERTHAN exp .)
    RSQB            reduce using rule 29 (exp -> exp GREATERTHAN exp .)
    PLUS            shift and go to state 34
    MINUS           shift and go to state 35
    MULTIPLICATION  shift and go to state 36
    DIVISION        shift and go to state 37
    MODULO          shift and go to state 38
    POW             shift and go to state 47

  ! PLUS            [ reduce using rule 29 (exp -> exp GREATERTHAN exp .) ]
  ! MINUS           [ reduce using rule 29 (exp -> exp GREATERTHAN exp .) ]
  ! MULTIPLICATION  [ reduce using rule 29 (exp -> exp GREATERTHAN exp .) ]
  ! DIVISION        [ reduce using rule 29 (exp -> exp GREATERTHAN exp .) ]
  ! MODULO          [ reduce using rule 29 (exp -> exp GREATERTHAN exp .) ]
  ! POW             [ reduce using rule 29 (exp -> exp GREATERTHAN exp .) ]
  ! GREATERTHAN     [ shift and go to state 39 ]
  ! LESSTHAN        [ shift and go to state 40 ]
  ! GREATERTHANOREQUALTO [ shift and go to state 41 ]
  ! LESSTHANOREQUALTO [ shift and go to state 42 ]
  ! EQUALTO         [ shift and go to state 43 ]
  ! NOTEQUALTO      [ shift and go to state 44 ]
  ! COMMA           [ shift and go to state 84 ]
  ! AND             [ shift and go to state 45 ]
  ! OR              [ shift and go to state 46 ]


state 74

    (30) exp -> exp LESSTHAN exp .
    (24) exp -> exp . PLUS exp
    (25) exp -> exp . MINUS exp
    (26) exp -> exp . MULTIPLICATION exp
    (27) exp -> exp . DIVISION exp
    (28) exp -> exp . MODULO exp
    (29) exp -> exp . GREATERTHAN exp
    (30) exp -> exp . LESSTHAN exp
    (31) exp -> exp . GREATERTHANOREQUALTO exp
    (32) exp -> exp . LESSTHANOREQUALTO exp
    (33) exp -> exp . EQUALTO exp
    (34) exp -> exp . NOTEQUALTO exp
    (35) exp -> exp . COMMA exp
    (36) exp -> exp . AND exp
    (37) exp -> exp . OR exp
    (38) exp -> exp . POW exp

    COMMA           reduce using rule 30 (exp -> exp LESSTHAN exp .)
    SEMICOL         reduce using rule 30 (exp -> exp LESSTHAN exp .)
    GREATERTHAN     reduce using rule 30 (exp -> exp LESSTHAN exp .)
    LESSTHAN        reduce using rule 30 (exp -> exp LESSTHAN exp .)
    GREATERTHANOREQUALTO reduce using rule 30 (exp -> exp LESSTHAN exp .)
    LESSTHANOREQUALTO reduce using rule 30 (exp -> exp LESSTHAN exp .)
    EQUALTO         reduce using rule 30 (exp -> exp LESSTHAN exp .)
    NOTEQUALTO      reduce using rule 30 (exp -> exp LESSTHAN exp .)
    AND             reduce using rule 30 (exp -> exp LESSTHAN exp .)
    OR              reduce using rule 30 (exp -> exp LESSTHAN exp .)
    RPAREN          reduce using rule 30 (exp -> exp LESSTHAN exp .)
    RSQB            reduce using rule 30 (exp -> exp LESSTHAN exp .)
    PLUS            shift and go to state 34
    MINUS           shift and go to state 35
    MULTIPLICATION  shift and go to state 36
    DIVISION        shift and go to state 37
    MODULO          shift and go to state 38
    POW             shift and go to state 47

  ! PLUS            [ reduce using rule 30 (exp -> exp LESSTHAN exp .) ]
  ! MINUS           [ reduce using rule 30 (exp -> exp LESSTHAN exp .) ]
  ! MULTIPLICATION  [ reduce using rule 30 (exp -> exp LESSTHAN exp .) ]
  ! DIVISION        [ reduce using rule 30 (exp -> exp LESSTHAN exp .) ]
  ! MODULO          [ reduce using rule 30 (exp -> exp LESSTHAN exp .) ]
  ! POW             [ reduce using rule 30 (exp -> exp LESSTHAN exp .) ]
  ! GREATERTHAN     [ shift and go to state 39 ]
  ! LESSTHAN        [ shift and go to state 40 ]
  ! GREATERTHANOREQUALTO [ shift and go to state 41 ]
  ! LESSTHANOREQUALTO [ shift and go to state 42 ]
  ! EQUALTO         [ shift and go to state 43 ]
  ! NOTEQUALTO      [ shift and go to state 44 ]
  ! COMMA           [ shift and go to state 84 ]
  ! AND             [ shift and go to state 45 ]
  ! OR              [ shift and go to state 46 ]


state 75

    (31) exp -> exp GREATERTHANOREQUALTO exp .
    (24) exp -> exp . PLUS exp
    (25) exp -> exp . MINUS exp
    (26) exp -> exp . MULTIPLICATION exp
    (27) exp -> exp . DIVISION exp
    (28) exp -> exp . MODULO exp
    (29) exp -> exp . GREATERTHAN exp
    (30) exp -> exp . LESSTHAN exp
    (31) exp -> exp . GREATERTHANOREQUALTO exp
    (32) exp -> exp . LESSTHANOREQUALTO exp
    (33) exp -> exp . EQUALTO exp
    (34) exp -> exp . NOTEQUALTO exp
    (35) exp -> exp . COMMA exp
    (36) exp -> exp . AND exp
    (37) exp -> exp . OR exp
    (38) exp -> exp . POW exp

    COMMA           reduce using rule 31 (exp -> exp GREATERTHANOREQUALTO exp .)
    SEMICOL         reduce using rule 31 (exp -> exp GREATERTHANOREQUALTO exp .)
    GREATERTHAN     reduce using rule 31 (exp -> exp GREATERTHANOREQUALTO exp .)
    LESSTHAN        reduce using rule 31 (exp -> exp GREATERTHANOREQUALTO exp .)
    GREATERTHANOREQUALTO reduce using rule 31 (exp -> exp GREATERTHANOREQUALTO exp .)
    LESSTHANOREQUALTO reduce using rule 31 (exp -> exp GREATERTHANOREQUALTO exp .)
    EQUALTO         reduce using rule 31 (exp -> exp GREATERTHANOREQUALTO exp .)
    NOTEQUALTO      reduce using rule 31 (exp -> exp GREATERTHANOREQUALTO exp .)
    AND             reduce using rule 31 (exp -> exp GREATERTHANOREQUALTO exp .)
    OR              reduce using rule 31 (exp -> exp GREATERTHANOREQUALTO exp .)
    RPAREN          reduce using rule 31 (exp -> exp GREATERTHANOREQUALTO exp .)
    RSQB            reduce using rule 31 (exp -> exp GREATERTHANOREQUALTO exp .)
    PLUS            shift and go to state 34
    MINUS           shift and go to state 35
    MULTIPLICATION  shift and go to state 36
    DIVISION        shift and go to state 37
    MODULO          shift and go to state 38
    POW             shift and go to state 47

  ! PLUS            [ reduce using rule 31 (exp -> exp GREATERTHANOREQUALTO exp .) ]
  ! MINUS           [ reduce using rule 31 (exp -> exp GREATERTHANOREQUALTO exp .) ]
  ! MULTIPLICATION  [ reduce using rule 31 (exp -> exp GREATERTHANOREQUALTO exp .) ]
  ! DIVISION        [ reduce using rule 31 (exp -> exp GREATERTHANOREQUALTO exp .) ]
  ! MODULO          [ reduce using rule 31 (exp -> exp GREATERTHANOREQUALTO exp .) ]
  ! POW             [ reduce using rule 31 (exp -> exp GREATERTHANOREQUALTO exp .) ]
  ! GREATERTHAN     [ shift and go to state 39 ]
  ! LESSTHAN        [ shift and go to state 40 ]
  ! GREATERTHANOREQUALTO [ shift and go to state 41 ]
  ! LESSTHANOREQUALTO [ shift and go to state 42 ]
  ! EQUALTO         [ shift and go to state 43 ]
  ! NOTEQUALTO      [ shift and go to state 44 ]
  ! COMMA           [ shift and go to state 84 ]
  ! AND             [ shift and go to state 45 ]
  ! OR              [ shift and go to state 46 ]


state 76

    (32) exp -> exp LESSTHANOREQUALTO exp .
    (24) exp -> exp . PLUS exp
    (25) exp -> exp . MINUS exp
    (26) exp -> exp . MULTIPLICATION exp
    (27) exp -> exp . DIVISION exp
    (28) exp -> exp . MODULO exp
    (29) exp -> exp . GREATERTHAN exp
    (30) exp -> exp . LESSTHAN exp
    (31) exp -> exp . GREATERTHANOREQUALTO exp
    (32) exp -> exp . LESSTHANOREQUALTO exp
    (33) exp -> exp . EQUALTO exp
    (34) exp -> exp . NOTEQUALTO exp
    (35) exp -> exp . COMMA exp
    (36) exp -> exp . AND exp
    (37) exp -> exp . OR exp
    (38) exp -> exp . POW exp

    COMMA           reduce using rule 32 (exp -> exp LESSTHANOREQUALTO exp .)
    SEMICOL         reduce using rule 32 (exp -> exp LESSTHANOREQUALTO exp .)
    GREATERTHAN     reduce using rule 32 (exp -> exp LESSTHANOREQUALTO exp .)
    LESSTHAN        reduce using rule 32 (exp -> exp LESSTHANOREQUALTO exp .)
    GREATERTHANOREQUALTO reduce using rule 32 (exp -> exp LESSTHANOREQUALTO exp .)
    LESSTHANOREQUALTO reduce using rule 32 (exp -> exp LESSTHANOREQUALTO exp .)
    EQUALTO         reduce using rule 32 (exp -> exp LESSTHANOREQUALTO exp .)
    NOTEQUALTO      reduce using rule 32 (exp -> exp LESSTHANOREQUALTO exp .)
    AND             reduce using rule 32 (exp -> exp LESSTHANOREQUALTO exp .)
    OR              reduce using rule 32 (exp -> exp LESSTHANOREQUALTO exp .)
    RPAREN          reduce using rule 32 (exp -> exp LESSTHANOREQUALTO exp .)
    RSQB            reduce using rule 32 (exp -> exp LESSTHANOREQUALTO exp .)
    PLUS            shift and go to state 34
    MINUS           shift and go to state 35
    MULTIPLICATION  shift and go to state 36
    DIVISION        shift and go to state 37
    MODULO          shift and go to state 38
    POW             shift and go to state 47

  ! PLUS            [ reduce using rule 32 (exp -> exp LESSTHANOREQUALTO exp .) ]
  ! MINUS           [ reduce using rule 32 (exp -> exp LESSTHANOREQUALTO exp .) ]
  ! MULTIPLICATION  [ reduce using rule 32 (exp -> exp LESSTHANOREQUALTO exp .) ]
  ! DIVISION        [ reduce using rule 32 (exp -> exp LESSTHANOREQUALTO exp .) ]
  ! MODULO          [ reduce using rule 32 (exp -> exp LESSTHANOREQUALTO exp .) ]
  ! POW             [ reduce using rule 32 (exp -> exp LESSTHANOREQUALTO exp .) ]
  ! GREATERTHAN     [ shift and go to state 39 ]
  ! LESSTHAN        [ shift and go to state 40 ]
  ! GREATERTHANOREQUALTO [ shift and go to state 41 ]
  ! LESSTHANOREQUALTO [ shift and go to state 42 ]
  ! EQUALTO         [ shift and go to state 43 ]
  ! NOTEQUALTO      [ shift and go to state 44 ]
  ! COMMA           [ shift and go to state 84 ]
  ! AND             [ shift and go to state 45 ]
  ! OR              [ shift and go to state 46 ]


state 77

    (33) exp -> exp EQUALTO exp .
    (24) exp -> exp . PLUS exp
    (25) exp -> exp . MINUS exp
    (26) exp -> exp . MULTIPLICATION exp
    (27) exp -> exp . DIVISION exp
    (28) exp -> exp . MODULO exp
    (29) exp -> exp . GREATERTHAN exp
    (30) exp -> exp . LESSTHAN exp
    (31) exp -> exp . GREATERTHANOREQUALTO exp
    (32) exp -> exp . LESSTHANOREQUALTO exp
    (33) exp -> exp . EQUALTO exp
    (34) exp -> exp . NOTEQUALTO exp
    (35) exp -> exp . COMMA exp
    (36) exp -> exp . AND exp
    (37) exp -> exp . OR exp
    (38) exp -> exp . POW exp

    COMMA           reduce using rule 33 (exp -> exp EQUALTO exp .)
    SEMICOL         reduce using rule 33 (exp -> exp EQUALTO exp .)
    EQUALTO         reduce using rule 33 (exp -> exp EQUALTO exp .)
    NOTEQUALTO      reduce using rule 33 (exp -> exp EQUALTO exp .)
    AND             reduce using rule 33 (exp -> exp EQUALTO exp .)
    OR              reduce using rule 33 (exp -> exp EQUALTO exp .)
    RPAREN          reduce using rule 33 (exp -> exp EQUALTO exp .)
    RSQB            reduce using rule 33 (exp -> exp EQUALTO exp .)
    PLUS            shift and go to state 34
    MINUS           shift and go to state 35
    MULTIPLICATION  shift and go to state 36
    DIVISION        shift and go to state 37
    MODULO          shift and go to state 38
    GREATERTHAN     shift and go to state 39
    LESSTHAN        shift and go to state 40
    GREATERTHANOREQUALTO shift and go to state 41
    LESSTHANOREQUALTO shift and go to state 42
    POW             shift and go to state 47

  ! PLUS            [ reduce using rule 33 (exp -> exp EQUALTO exp .) ]
  ! MINUS           [ reduce using rule 33 (exp -> exp EQUALTO exp .) ]
  ! MULTIPLICATION  [ reduce using rule 33 (exp -> exp EQUALTO exp .) ]
  ! DIVISION        [ reduce using rule 33 (exp -> exp EQUALTO exp .) ]
  ! MODULO          [ reduce using rule 33 (exp -> exp EQUALTO exp .) ]
  ! GREATERTHAN     [ reduce using rule 33 (exp -> exp EQUALTO exp .) ]
  ! LESSTHAN        [ reduce using rule 33 (exp -> exp EQUALTO exp .) ]
  ! GREATERTHANOREQUALTO [ reduce using rule 33 (exp -> exp EQUALTO exp .) ]
  ! LESSTHANOREQUALTO [ reduce using rule 33 (exp -> exp EQUALTO exp .) ]
  ! POW             [ reduce using rule 33 (exp -> exp EQUALTO exp .) ]
  ! EQUALTO         [ shift and go to state 43 ]
  ! NOTEQUALTO      [ shift and go to state 44 ]
  ! COMMA           [ shift and go to state 84 ]
  ! AND             [ shift and go to state 45 ]
  ! OR              [ shift and go to state 46 ]


state 78

    (34) exp -> exp NOTEQUALTO exp .
    (24) exp -> exp . PLUS exp
    (25) exp -> exp . MINUS exp
    (26) exp -> exp . MULTIPLICATION exp
    (27) exp -> exp . DIVISION exp
    (28) exp -> exp . MODULO exp
    (29) exp -> exp . GREATERTHAN exp
    (30) exp -> exp . LESSTHAN exp
    (31) exp -> exp . GREATERTHANOREQUALTO exp
    (32) exp -> exp . LESSTHANOREQUALTO exp
    (33) exp -> exp . EQUALTO exp
    (34) exp -> exp . NOTEQUALTO exp
    (35) exp -> exp . COMMA exp
    (36) exp -> exp . AND exp
    (37) exp -> exp . OR exp
    (38) exp -> exp . POW exp

    COMMA           reduce using rule 34 (exp -> exp NOTEQUALTO exp .)
    SEMICOL         reduce using rule 34 (exp -> exp NOTEQUALTO exp .)
    EQUALTO         reduce using rule 34 (exp -> exp NOTEQUALTO exp .)
    NOTEQUALTO      reduce using rule 34 (exp -> exp NOTEQUALTO exp .)
    AND             reduce using rule 34 (exp -> exp NOTEQUALTO exp .)
    OR              reduce using rule 34 (exp -> exp NOTEQUALTO exp .)
    RPAREN          reduce using rule 34 (exp -> exp NOTEQUALTO exp .)
    RSQB            reduce using rule 34 (exp -> exp NOTEQUALTO exp .)
    PLUS            shift and go to state 34
    MINUS           shift and go to state 35
    MULTIPLICATION  shift and go to state 36
    DIVISION        shift and go to state 37
    MODULO          shift and go to state 38
    GREATERTHAN     shift and go to state 39
    LESSTHAN        shift and go to state 40
    GREATERTHANOREQUALTO shift and go to state 41
    LESSTHANOREQUALTO shift and go to state 42
    POW             shift and go to state 47

  ! PLUS            [ reduce using rule 34 (exp -> exp NOTEQUALTO exp .) ]
  ! MINUS           [ reduce using rule 34 (exp -> exp NOTEQUALTO exp .) ]
  ! MULTIPLICATION  [ reduce using rule 34 (exp -> exp NOTEQUALTO exp .) ]
  ! DIVISION        [ reduce using rule 34 (exp -> exp NOTEQUALTO exp .) ]
  ! MODULO          [ reduce using rule 34 (exp -> exp NOTEQUALTO exp .) ]
  ! GREATERTHAN     [ reduce using rule 34 (exp -> exp NOTEQUALTO exp .) ]
  ! LESSTHAN        [ reduce using rule 34 (exp -> exp NOTEQUALTO exp .) ]
  ! GREATERTHANOREQUALTO [ reduce using rule 34 (exp -> exp NOTEQUALTO exp .) ]
  ! LESSTHANOREQUALTO [ reduce using rule 34 (exp -> exp NOTEQUALTO exp .) ]
  ! POW             [ reduce using rule 34 (exp -> exp NOTEQUALTO exp .) ]
  ! EQUALTO         [ shift and go to state 43 ]
  ! NOTEQUALTO      [ shift and go to state 44 ]
  ! COMMA           [ shift and go to state 84 ]
  ! AND             [ shift and go to state 45 ]
  ! OR              [ shift and go to state 46 ]


state 79

    (36) exp -> exp AND exp .
    (24) exp -> exp . PLUS exp
    (25) exp -> exp . MINUS exp
    (26) exp -> exp . MULTIPLICATION exp
    (27) exp -> exp . DIVISION exp
    (28) exp -> exp . MODULO exp
    (29) exp -> exp . GREATERTHAN exp
    (30) exp -> exp . LESSTHAN exp
    (31) exp -> exp . GREATERTHANOREQUALTO exp
    (32) exp -> exp . LESSTHANOREQUALTO exp
    (33) exp -> exp . EQUALTO exp
    (34) exp -> exp . NOTEQUALTO exp
    (35) exp -> exp . COMMA exp
    (36) exp -> exp . AND exp
    (37) exp -> exp . OR exp
    (38) exp -> exp . POW exp

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MULTIPLICATION resolved as shift
  ! shift/reduce conflict for DIVISION resolved as shift
  ! shift/reduce conflict for MODULO resolved as shift
  ! shift/reduce conflict for GREATERTHAN resolved as shift
  ! shift/reduce conflict for LESSTHAN resolved as shift
  ! shift/reduce conflict for GREATERTHANOREQUALTO resolved as shift
  ! shift/reduce conflict for LESSTHANOREQUALTO resolved as shift
  ! shift/reduce conflict for EQUALTO resolved as shift
  ! shift/reduce conflict for NOTEQUALTO resolved as shift
  ! shift/reduce conflict for COMMA resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for POW resolved as shift
    SEMICOL         reduce using rule 36 (exp -> exp AND exp .)
    RPAREN          reduce using rule 36 (exp -> exp AND exp .)
    RSQB            reduce using rule 36 (exp -> exp AND exp .)
    PLUS            shift and go to state 34
    MINUS           shift and go to state 35
    MULTIPLICATION  shift and go to state 36
    DIVISION        shift and go to state 37
    MODULO          shift and go to state 38
    GREATERTHAN     shift and go to state 39
    LESSTHAN        shift and go to state 40
    GREATERTHANOREQUALTO shift and go to state 41
    LESSTHANOREQUALTO shift and go to state 42
    EQUALTO         shift and go to state 43
    NOTEQUALTO      shift and go to state 44
    COMMA           shift and go to state 84
    AND             shift and go to state 45
    OR              shift and go to state 46
    POW             shift and go to state 47

  ! COMMA           [ reduce using rule 36 (exp -> exp AND exp .) ]
  ! PLUS            [ reduce using rule 36 (exp -> exp AND exp .) ]
  ! MINUS           [ reduce using rule 36 (exp -> exp AND exp .) ]
  ! MULTIPLICATION  [ reduce using rule 36 (exp -> exp AND exp .) ]
  ! DIVISION        [ reduce using rule 36 (exp -> exp AND exp .) ]
  ! MODULO          [ reduce using rule 36 (exp -> exp AND exp .) ]
  ! GREATERTHAN     [ reduce using rule 36 (exp -> exp AND exp .) ]
  ! LESSTHAN        [ reduce using rule 36 (exp -> exp AND exp .) ]
  ! GREATERTHANOREQUALTO [ reduce using rule 36 (exp -> exp AND exp .) ]
  ! LESSTHANOREQUALTO [ reduce using rule 36 (exp -> exp AND exp .) ]
  ! EQUALTO         [ reduce using rule 36 (exp -> exp AND exp .) ]
  ! NOTEQUALTO      [ reduce using rule 36 (exp -> exp AND exp .) ]
  ! AND             [ reduce using rule 36 (exp -> exp AND exp .) ]
  ! OR              [ reduce using rule 36 (exp -> exp AND exp .) ]
  ! POW             [ reduce using rule 36 (exp -> exp AND exp .) ]


state 80

    (37) exp -> exp OR exp .
    (24) exp -> exp . PLUS exp
    (25) exp -> exp . MINUS exp
    (26) exp -> exp . MULTIPLICATION exp
    (27) exp -> exp . DIVISION exp
    (28) exp -> exp . MODULO exp
    (29) exp -> exp . GREATERTHAN exp
    (30) exp -> exp . LESSTHAN exp
    (31) exp -> exp . GREATERTHANOREQUALTO exp
    (32) exp -> exp . LESSTHANOREQUALTO exp
    (33) exp -> exp . EQUALTO exp
    (34) exp -> exp . NOTEQUALTO exp
    (35) exp -> exp . COMMA exp
    (36) exp -> exp . AND exp
    (37) exp -> exp . OR exp
    (38) exp -> exp . POW exp

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MULTIPLICATION resolved as shift
  ! shift/reduce conflict for DIVISION resolved as shift
  ! shift/reduce conflict for MODULO resolved as shift
  ! shift/reduce conflict for GREATERTHAN resolved as shift
  ! shift/reduce conflict for LESSTHAN resolved as shift
  ! shift/reduce conflict for GREATERTHANOREQUALTO resolved as shift
  ! shift/reduce conflict for LESSTHANOREQUALTO resolved as shift
  ! shift/reduce conflict for EQUALTO resolved as shift
  ! shift/reduce conflict for NOTEQUALTO resolved as shift
  ! shift/reduce conflict for COMMA resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for POW resolved as shift
    SEMICOL         reduce using rule 37 (exp -> exp OR exp .)
    RPAREN          reduce using rule 37 (exp -> exp OR exp .)
    RSQB            reduce using rule 37 (exp -> exp OR exp .)
    PLUS            shift and go to state 34
    MINUS           shift and go to state 35
    MULTIPLICATION  shift and go to state 36
    DIVISION        shift and go to state 37
    MODULO          shift and go to state 38
    GREATERTHAN     shift and go to state 39
    LESSTHAN        shift and go to state 40
    GREATERTHANOREQUALTO shift and go to state 41
    LESSTHANOREQUALTO shift and go to state 42
    EQUALTO         shift and go to state 43
    NOTEQUALTO      shift and go to state 44
    COMMA           shift and go to state 84
    AND             shift and go to state 45
    OR              shift and go to state 46
    POW             shift and go to state 47

  ! COMMA           [ reduce using rule 37 (exp -> exp OR exp .) ]
  ! PLUS            [ reduce using rule 37 (exp -> exp OR exp .) ]
  ! MINUS           [ reduce using rule 37 (exp -> exp OR exp .) ]
  ! MULTIPLICATION  [ reduce using rule 37 (exp -> exp OR exp .) ]
  ! DIVISION        [ reduce using rule 37 (exp -> exp OR exp .) ]
  ! MODULO          [ reduce using rule 37 (exp -> exp OR exp .) ]
  ! GREATERTHAN     [ reduce using rule 37 (exp -> exp OR exp .) ]
  ! LESSTHAN        [ reduce using rule 37 (exp -> exp OR exp .) ]
  ! GREATERTHANOREQUALTO [ reduce using rule 37 (exp -> exp OR exp .) ]
  ! LESSTHANOREQUALTO [ reduce using rule 37 (exp -> exp OR exp .) ]
  ! EQUALTO         [ reduce using rule 37 (exp -> exp OR exp .) ]
  ! NOTEQUALTO      [ reduce using rule 37 (exp -> exp OR exp .) ]
  ! AND             [ reduce using rule 37 (exp -> exp OR exp .) ]
  ! OR              [ reduce using rule 37 (exp -> exp OR exp .) ]
  ! POW             [ reduce using rule 37 (exp -> exp OR exp .) ]


state 81

    (38) exp -> exp POW exp .
    (24) exp -> exp . PLUS exp
    (25) exp -> exp . MINUS exp
    (26) exp -> exp . MULTIPLICATION exp
    (27) exp -> exp . DIVISION exp
    (28) exp -> exp . MODULO exp
    (29) exp -> exp . GREATERTHAN exp
    (30) exp -> exp . LESSTHAN exp
    (31) exp -> exp . GREATERTHANOREQUALTO exp
    (32) exp -> exp . LESSTHANOREQUALTO exp
    (33) exp -> exp . EQUALTO exp
    (34) exp -> exp . NOTEQUALTO exp
    (35) exp -> exp . COMMA exp
    (36) exp -> exp . AND exp
    (37) exp -> exp . OR exp
    (38) exp -> exp . POW exp

    COMMA           reduce using rule 38 (exp -> exp POW exp .)
    SEMICOL         reduce using rule 38 (exp -> exp POW exp .)
    PLUS            reduce using rule 38 (exp -> exp POW exp .)
    MINUS           reduce using rule 38 (exp -> exp POW exp .)
    MULTIPLICATION  reduce using rule 38 (exp -> exp POW exp .)
    DIVISION        reduce using rule 38 (exp -> exp POW exp .)
    MODULO          reduce using rule 38 (exp -> exp POW exp .)
    GREATERTHAN     reduce using rule 38 (exp -> exp POW exp .)
    LESSTHAN        reduce using rule 38 (exp -> exp POW exp .)
    GREATERTHANOREQUALTO reduce using rule 38 (exp -> exp POW exp .)
    LESSTHANOREQUALTO reduce using rule 38 (exp -> exp POW exp .)
    EQUALTO         reduce using rule 38 (exp -> exp POW exp .)
    NOTEQUALTO      reduce using rule 38 (exp -> exp POW exp .)
    AND             reduce using rule 38 (exp -> exp POW exp .)
    OR              reduce using rule 38 (exp -> exp POW exp .)
    POW             reduce using rule 38 (exp -> exp POW exp .)
    RPAREN          reduce using rule 38 (exp -> exp POW exp .)
    RSQB            reduce using rule 38 (exp -> exp POW exp .)

  ! PLUS            [ shift and go to state 34 ]
  ! MINUS           [ shift and go to state 35 ]
  ! MULTIPLICATION  [ shift and go to state 36 ]
  ! DIVISION        [ shift and go to state 37 ]
  ! MODULO          [ shift and go to state 38 ]
  ! GREATERTHAN     [ shift and go to state 39 ]
  ! LESSTHAN        [ shift and go to state 40 ]
  ! GREATERTHANOREQUALTO [ shift and go to state 41 ]
  ! LESSTHANOREQUALTO [ shift and go to state 42 ]
  ! EQUALTO         [ shift and go to state 43 ]
  ! NOTEQUALTO      [ shift and go to state 44 ]
  ! COMMA           [ shift and go to state 84 ]
  ! AND             [ shift and go to state 45 ]
  ! OR              [ shift and go to state 46 ]
  ! POW             [ shift and go to state 47 ]


state 82

    (3) exp -> LPAREN exp . RPAREN
    (24) exp -> exp . PLUS exp
    (25) exp -> exp . MINUS exp
    (26) exp -> exp . MULTIPLICATION exp
    (27) exp -> exp . DIVISION exp
    (28) exp -> exp . MODULO exp
    (29) exp -> exp . GREATERTHAN exp
    (30) exp -> exp . LESSTHAN exp
    (31) exp -> exp . GREATERTHANOREQUALTO exp
    (32) exp -> exp . LESSTHANOREQUALTO exp
    (33) exp -> exp . EQUALTO exp
    (34) exp -> exp . NOTEQUALTO exp
    (35) exp -> exp . COMMA exp
    (36) exp -> exp . AND exp
    (37) exp -> exp . OR exp
    (38) exp -> exp . POW exp

    RPAREN          shift and go to state 101
    PLUS            shift and go to state 34
    MINUS           shift and go to state 35
    MULTIPLICATION  shift and go to state 36
    DIVISION        shift and go to state 37
    MODULO          shift and go to state 38
    GREATERTHAN     shift and go to state 39
    LESSTHAN        shift and go to state 40
    GREATERTHANOREQUALTO shift and go to state 41
    LESSTHANOREQUALTO shift and go to state 42
    EQUALTO         shift and go to state 43
    NOTEQUALTO      shift and go to state 44
    COMMA           shift and go to state 84
    AND             shift and go to state 45
    OR              shift and go to state 46
    POW             shift and go to state 47


state 83

    (6) stmt -> PRINT LPAREN exp RPAREN . SEMICOL
    (3) exp -> LPAREN exp RPAREN .

    COMMA           reduce using rule 3 (exp -> LPAREN exp RPAREN .)
    SEMICOL         reduce using rule 3 (exp -> LPAREN exp RPAREN .)
    PLUS            reduce using rule 3 (exp -> LPAREN exp RPAREN .)
    MINUS           reduce using rule 3 (exp -> LPAREN exp RPAREN .)
    MULTIPLICATION  reduce using rule 3 (exp -> LPAREN exp RPAREN .)
    DIVISION        reduce using rule 3 (exp -> LPAREN exp RPAREN .)
    MODULO          reduce using rule 3 (exp -> LPAREN exp RPAREN .)
    GREATERTHAN     reduce using rule 3 (exp -> LPAREN exp RPAREN .)
    LESSTHAN        reduce using rule 3 (exp -> LPAREN exp RPAREN .)
    GREATERTHANOREQUALTO reduce using rule 3 (exp -> LPAREN exp RPAREN .)
    LESSTHANOREQUALTO reduce using rule 3 (exp -> LPAREN exp RPAREN .)
    EQUALTO         reduce using rule 3 (exp -> LPAREN exp RPAREN .)
    NOTEQUALTO      reduce using rule 3 (exp -> LPAREN exp RPAREN .)
    AND             reduce using rule 3 (exp -> LPAREN exp RPAREN .)
    OR              reduce using rule 3 (exp -> LPAREN exp RPAREN .)
    POW             reduce using rule 3 (exp -> LPAREN exp RPAREN .)

  ! SEMICOL         [ shift and go to state 102 ]


state 84

    (35) exp -> exp COMMA . exp
    (3) exp -> . LPAREN exp RPAREN
    (11) exp -> . FLOAT
    (12) exp -> . INT
    (13) exp -> . BOOL
    (14) exp -> . CHAR
    (17) exp -> . NAME LSQB INT RSQB
    (18) exp -> . NAME POP LPAREN INT RPAREN
    (19) exp -> . NAME INDEX LPAREN INT RPAREN
    (20) exp -> . NAME SLICE LPAREN INT COMMA INT RPAREN
    (22) exp -> . NAME
    (23) exp -> . NOT exp
    (24) exp -> . exp PLUS exp
    (25) exp -> . exp MINUS exp
    (26) exp -> . exp MULTIPLICATION exp
    (27) exp -> . exp DIVISION exp
    (28) exp -> . exp MODULO exp
    (29) exp -> . exp GREATERTHAN exp
    (30) exp -> . exp LESSTHAN exp
    (31) exp -> . exp GREATERTHANOREQUALTO exp
    (32) exp -> . exp LESSTHANOREQUALTO exp
    (33) exp -> . exp EQUALTO exp
    (34) exp -> . exp NOTEQUALTO exp
    (35) exp -> . exp COMMA exp
    (36) exp -> . exp AND exp
    (37) exp -> . exp OR exp
    (38) exp -> . exp POW exp
    (39) exp -> . STRING
    (40) exp -> . MINUS exp
    (51) exp -> . NAME LPAREN exp RPAREN

    LPAREN          shift and go to state 48
    FLOAT           shift and go to state 14
    INT             shift and go to state 15
    BOOL            shift and go to state 16
    CHAR            shift and go to state 17
    NAME            shift and go to state 18
    NOT             shift and go to state 19
    STRING          shift and go to state 21
    MINUS           shift and go to state 20

    exp                            shift and go to state 103

state 85

    (17) exp -> NAME LSQB INT . RSQB

    RSQB            shift and go to state 104


state 86

    (18) exp -> NAME POP LPAREN . INT RPAREN

    INT             shift and go to state 105


state 87

    (51) exp -> NAME LPAREN exp . RPAREN
    (24) exp -> exp . PLUS exp
    (25) exp -> exp . MINUS exp
    (26) exp -> exp . MULTIPLICATION exp
    (27) exp -> exp . DIVISION exp
    (28) exp -> exp . MODULO exp
    (29) exp -> exp . GREATERTHAN exp
    (30) exp -> exp . LESSTHAN exp
    (31) exp -> exp . GREATERTHANOREQUALTO exp
    (32) exp -> exp . LESSTHANOREQUALTO exp
    (33) exp -> exp . EQUALTO exp
    (34) exp -> exp . NOTEQUALTO exp
    (35) exp -> exp . COMMA exp
    (36) exp -> exp . AND exp
    (37) exp -> exp . OR exp
    (38) exp -> exp . POW exp

    RPAREN          shift and go to state 106
    PLUS            shift and go to state 34
    MINUS           shift and go to state 35
    MULTIPLICATION  shift and go to state 36
    DIVISION        shift and go to state 37
    MODULO          shift and go to state 38
    GREATERTHAN     shift and go to state 39
    LESSTHAN        shift and go to state 40
    GREATERTHANOREQUALTO shift and go to state 41
    LESSTHANOREQUALTO shift and go to state 42
    EQUALTO         shift and go to state 43
    NOTEQUALTO      shift and go to state 44
    COMMA           shift and go to state 84
    AND             shift and go to state 45
    OR              shift and go to state 46
    POW             shift and go to state 47


state 88

    (19) exp -> NAME INDEX LPAREN . INT RPAREN

    INT             shift and go to state 107


state 89

    (20) exp -> NAME SLICE LPAREN . INT COMMA INT RPAREN

    INT             shift and go to state 108


state 90

    (17) exp -> NAME . LSQB INT RSQB
    (18) exp -> NAME . POP LPAREN INT RPAREN
    (19) exp -> NAME . INDEX LPAREN INT RPAREN
    (20) exp -> NAME . SLICE LPAREN INT COMMA INT RPAREN
    (22) exp -> NAME .
    (51) exp -> NAME . LPAREN exp RPAREN
    (9) stmt -> NAME . ASSIGN exp SEMICOL
    (15) stmt -> NAME . INCREMENT SEMICOL
    (16) stmt -> NAME . DECREMENT SEMICOL
    (21) stmt -> NAME . PUSH LPAREN exp RPAREN SEMICOL

    LSQB            shift and go to state 50
    POP             shift and go to state 51
    INDEX           shift and go to state 53
    SLICE           shift and go to state 54
    SEMICOL         reduce using rule 22 (exp -> NAME .)
    PLUS            reduce using rule 22 (exp -> NAME .)
    MINUS           reduce using rule 22 (exp -> NAME .)
    MULTIPLICATION  reduce using rule 22 (exp -> NAME .)
    DIVISION        reduce using rule 22 (exp -> NAME .)
    MODULO          reduce using rule 22 (exp -> NAME .)
    GREATERTHAN     reduce using rule 22 (exp -> NAME .)
    LESSTHAN        reduce using rule 22 (exp -> NAME .)
    GREATERTHANOREQUALTO reduce using rule 22 (exp -> NAME .)
    LESSTHANOREQUALTO reduce using rule 22 (exp -> NAME .)
    EQUALTO         reduce using rule 22 (exp -> NAME .)
    NOTEQUALTO      reduce using rule 22 (exp -> NAME .)
    COMMA           reduce using rule 22 (exp -> NAME .)
    AND             reduce using rule 22 (exp -> NAME .)
    OR              reduce using rule 22 (exp -> NAME .)
    POW             reduce using rule 22 (exp -> NAME .)
    LPAREN          shift and go to state 52
    ASSIGN          shift and go to state 23
    INCREMENT       shift and go to state 24
    DECREMENT       shift and go to state 25
    PUSH            shift and go to state 26


state 91

    (7) stmt -> VARTYPE NAME ASSIGN exp . SEMICOL
    (24) exp -> exp . PLUS exp
    (25) exp -> exp . MINUS exp
    (26) exp -> exp . MULTIPLICATION exp
    (27) exp -> exp . DIVISION exp
    (28) exp -> exp . MODULO exp
    (29) exp -> exp . GREATERTHAN exp
    (30) exp -> exp . LESSTHAN exp
    (31) exp -> exp . GREATERTHANOREQUALTO exp
    (32) exp -> exp . LESSTHANOREQUALTO exp
    (33) exp -> exp . EQUALTO exp
    (34) exp -> exp . NOTEQUALTO exp
    (35) exp -> exp . COMMA exp
    (36) exp -> exp . AND exp
    (37) exp -> exp . OR exp
    (38) exp -> exp . POW exp

    SEMICOL         shift and go to state 109
    PLUS            shift and go to state 34
    MINUS           shift and go to state 35
    MULTIPLICATION  shift and go to state 36
    DIVISION        shift and go to state 37
    MODULO          shift and go to state 38
    GREATERTHAN     shift and go to state 39
    LESSTHAN        shift and go to state 40
    GREATERTHANOREQUALTO shift and go to state 41
    LESSTHANOREQUALTO shift and go to state 42
    EQUALTO         shift and go to state 43
    NOTEQUALTO      shift and go to state 44
    COMMA           shift and go to state 84
    AND             shift and go to state 45
    OR              shift and go to state 46
    POW             shift and go to state 47


state 92

    (8) stmt -> VARTYPE NAME ASSIGN stmt . SEMICOL

    SEMICOL         shift and go to state 110


state 93

    (9) stmt -> NAME ASSIGN exp SEMICOL .

    PRINT           reduce using rule 9 (stmt -> NAME ASSIGN exp SEMICOL .)
    VARTYPE         reduce using rule 9 (stmt -> NAME ASSIGN exp SEMICOL .)
    NAME            reduce using rule 9 (stmt -> NAME ASSIGN exp SEMICOL .)
    LIST            reduce using rule 9 (stmt -> NAME ASSIGN exp SEMICOL .)
    IF              reduce using rule 9 (stmt -> NAME ASSIGN exp SEMICOL .)
    DO              reduce using rule 9 (stmt -> NAME ASSIGN exp SEMICOL .)
    FUNCTION        reduce using rule 9 (stmt -> NAME ASSIGN exp SEMICOL .)
    RETURN          reduce using rule 9 (stmt -> NAME ASSIGN exp SEMICOL .)
    $end            reduce using rule 9 (stmt -> NAME ASSIGN exp SEMICOL .)
    RCURLY          reduce using rule 9 (stmt -> NAME ASSIGN exp SEMICOL .)
    SEMICOL         reduce using rule 9 (stmt -> NAME ASSIGN exp SEMICOL .)
    RPAREN          reduce using rule 9 (stmt -> NAME ASSIGN exp SEMICOL .)


state 94

    (21) stmt -> NAME PUSH LPAREN exp . RPAREN SEMICOL
    (24) exp -> exp . PLUS exp
    (25) exp -> exp . MINUS exp
    (26) exp -> exp . MULTIPLICATION exp
    (27) exp -> exp . DIVISION exp
    (28) exp -> exp . MODULO exp
    (29) exp -> exp . GREATERTHAN exp
    (30) exp -> exp . LESSTHAN exp
    (31) exp -> exp . GREATERTHANOREQUALTO exp
    (32) exp -> exp . LESSTHANOREQUALTO exp
    (33) exp -> exp . EQUALTO exp
    (34) exp -> exp . NOTEQUALTO exp
    (35) exp -> exp . COMMA exp
    (36) exp -> exp . AND exp
    (37) exp -> exp . OR exp
    (38) exp -> exp . POW exp

    RPAREN          shift and go to state 111
    PLUS            shift and go to state 34
    MINUS           shift and go to state 35
    MULTIPLICATION  shift and go to state 36
    DIVISION        shift and go to state 37
    MODULO          shift and go to state 38
    GREATERTHAN     shift and go to state 39
    LESSTHAN        shift and go to state 40
    GREATERTHANOREQUALTO shift and go to state 41
    LESSTHANOREQUALTO shift and go to state 42
    EQUALTO         shift and go to state 43
    NOTEQUALTO      shift and go to state 44
    COMMA           shift and go to state 84
    AND             shift and go to state 45
    OR              shift and go to state 46
    POW             shift and go to state 47


state 95

    (41) stmt -> LIST NAME ASSIGN LSQB . exp RSQB SEMICOL
    (42) stmt -> LIST NAME ASSIGN LSQB . RSQB SEMICOL
    (3) exp -> . LPAREN exp RPAREN
    (11) exp -> . FLOAT
    (12) exp -> . INT
    (13) exp -> . BOOL
    (14) exp -> . CHAR
    (17) exp -> . NAME LSQB INT RSQB
    (18) exp -> . NAME POP LPAREN INT RPAREN
    (19) exp -> . NAME INDEX LPAREN INT RPAREN
    (20) exp -> . NAME SLICE LPAREN INT COMMA INT RPAREN
    (22) exp -> . NAME
    (23) exp -> . NOT exp
    (24) exp -> . exp PLUS exp
    (25) exp -> . exp MINUS exp
    (26) exp -> . exp MULTIPLICATION exp
    (27) exp -> . exp DIVISION exp
    (28) exp -> . exp MODULO exp
    (29) exp -> . exp GREATERTHAN exp
    (30) exp -> . exp LESSTHAN exp
    (31) exp -> . exp GREATERTHANOREQUALTO exp
    (32) exp -> . exp LESSTHANOREQUALTO exp
    (33) exp -> . exp EQUALTO exp
    (34) exp -> . exp NOTEQUALTO exp
    (35) exp -> . exp COMMA exp
    (36) exp -> . exp AND exp
    (37) exp -> . exp OR exp
    (38) exp -> . exp POW exp
    (39) exp -> . STRING
    (40) exp -> . MINUS exp
    (51) exp -> . NAME LPAREN exp RPAREN

    RSQB            shift and go to state 113
    LPAREN          shift and go to state 48
    FLOAT           shift and go to state 14
    INT             shift and go to state 15
    BOOL            shift and go to state 16
    CHAR            shift and go to state 17
    NAME            shift and go to state 18
    NOT             shift and go to state 19
    STRING          shift and go to state 21
    MINUS           shift and go to state 20

    exp                            shift and go to state 112

state 96

    (43) stmt -> IF LPAREN exp RPAREN . LCURLY S RCURLY block

    LCURLY          shift and go to state 114


state 97

    (47) stmt -> DO LCURLY S RCURLY . block_w
    (48) block_w -> . WHILE LPAREN exp RPAREN SEMICOL

    WHILE           shift and go to state 116

    block_w                        shift and go to state 115

state 98

    (49) stmt -> FUNCTION NAME LPAREN stmt . RPAREN LCURLY S RCURLY

    RPAREN          shift and go to state 117


state 99

    (50) stmt -> RETURN LPAREN exp RPAREN . SEMICOL

    SEMICOL         shift and go to state 118


state 100

    (4) stmt -> PRINT exp COMMA exp SEMICOL .

    PRINT           reduce using rule 4 (stmt -> PRINT exp COMMA exp SEMICOL .)
    VARTYPE         reduce using rule 4 (stmt -> PRINT exp COMMA exp SEMICOL .)
    NAME            reduce using rule 4 (stmt -> PRINT exp COMMA exp SEMICOL .)
    LIST            reduce using rule 4 (stmt -> PRINT exp COMMA exp SEMICOL .)
    IF              reduce using rule 4 (stmt -> PRINT exp COMMA exp SEMICOL .)
    DO              reduce using rule 4 (stmt -> PRINT exp COMMA exp SEMICOL .)
    FUNCTION        reduce using rule 4 (stmt -> PRINT exp COMMA exp SEMICOL .)
    RETURN          reduce using rule 4 (stmt -> PRINT exp COMMA exp SEMICOL .)
    $end            reduce using rule 4 (stmt -> PRINT exp COMMA exp SEMICOL .)
    RCURLY          reduce using rule 4 (stmt -> PRINT exp COMMA exp SEMICOL .)
    SEMICOL         reduce using rule 4 (stmt -> PRINT exp COMMA exp SEMICOL .)
    RPAREN          reduce using rule 4 (stmt -> PRINT exp COMMA exp SEMICOL .)


state 101

    (3) exp -> LPAREN exp RPAREN .

    RPAREN          reduce using rule 3 (exp -> LPAREN exp RPAREN .)
    PLUS            reduce using rule 3 (exp -> LPAREN exp RPAREN .)
    MINUS           reduce using rule 3 (exp -> LPAREN exp RPAREN .)
    MULTIPLICATION  reduce using rule 3 (exp -> LPAREN exp RPAREN .)
    DIVISION        reduce using rule 3 (exp -> LPAREN exp RPAREN .)
    MODULO          reduce using rule 3 (exp -> LPAREN exp RPAREN .)
    GREATERTHAN     reduce using rule 3 (exp -> LPAREN exp RPAREN .)
    LESSTHAN        reduce using rule 3 (exp -> LPAREN exp RPAREN .)
    GREATERTHANOREQUALTO reduce using rule 3 (exp -> LPAREN exp RPAREN .)
    LESSTHANOREQUALTO reduce using rule 3 (exp -> LPAREN exp RPAREN .)
    EQUALTO         reduce using rule 3 (exp -> LPAREN exp RPAREN .)
    NOTEQUALTO      reduce using rule 3 (exp -> LPAREN exp RPAREN .)
    COMMA           reduce using rule 3 (exp -> LPAREN exp RPAREN .)
    AND             reduce using rule 3 (exp -> LPAREN exp RPAREN .)
    OR              reduce using rule 3 (exp -> LPAREN exp RPAREN .)
    POW             reduce using rule 3 (exp -> LPAREN exp RPAREN .)
    SEMICOL         reduce using rule 3 (exp -> LPAREN exp RPAREN .)
    RSQB            reduce using rule 3 (exp -> LPAREN exp RPAREN .)


state 102

    (6) stmt -> PRINT LPAREN exp RPAREN SEMICOL .

    PRINT           reduce using rule 6 (stmt -> PRINT LPAREN exp RPAREN SEMICOL .)
    VARTYPE         reduce using rule 6 (stmt -> PRINT LPAREN exp RPAREN SEMICOL .)
    NAME            reduce using rule 6 (stmt -> PRINT LPAREN exp RPAREN SEMICOL .)
    LIST            reduce using rule 6 (stmt -> PRINT LPAREN exp RPAREN SEMICOL .)
    IF              reduce using rule 6 (stmt -> PRINT LPAREN exp RPAREN SEMICOL .)
    DO              reduce using rule 6 (stmt -> PRINT LPAREN exp RPAREN SEMICOL .)
    FUNCTION        reduce using rule 6 (stmt -> PRINT LPAREN exp RPAREN SEMICOL .)
    RETURN          reduce using rule 6 (stmt -> PRINT LPAREN exp RPAREN SEMICOL .)
    $end            reduce using rule 6 (stmt -> PRINT LPAREN exp RPAREN SEMICOL .)
    RCURLY          reduce using rule 6 (stmt -> PRINT LPAREN exp RPAREN SEMICOL .)
    SEMICOL         reduce using rule 6 (stmt -> PRINT LPAREN exp RPAREN SEMICOL .)
    RPAREN          reduce using rule 6 (stmt -> PRINT LPAREN exp RPAREN SEMICOL .)


state 103

    (35) exp -> exp COMMA exp .
    (24) exp -> exp . PLUS exp
    (25) exp -> exp . MINUS exp
    (26) exp -> exp . MULTIPLICATION exp
    (27) exp -> exp . DIVISION exp
    (28) exp -> exp . MODULO exp
    (29) exp -> exp . GREATERTHAN exp
    (30) exp -> exp . LESSTHAN exp
    (31) exp -> exp . GREATERTHANOREQUALTO exp
    (32) exp -> exp . LESSTHANOREQUALTO exp
    (33) exp -> exp . EQUALTO exp
    (34) exp -> exp . NOTEQUALTO exp
    (35) exp -> exp . COMMA exp
    (36) exp -> exp . AND exp
    (37) exp -> exp . OR exp
    (38) exp -> exp . POW exp

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MULTIPLICATION resolved as shift
  ! shift/reduce conflict for DIVISION resolved as shift
  ! shift/reduce conflict for MODULO resolved as shift
  ! shift/reduce conflict for GREATERTHAN resolved as shift
  ! shift/reduce conflict for LESSTHAN resolved as shift
  ! shift/reduce conflict for GREATERTHANOREQUALTO resolved as shift
  ! shift/reduce conflict for LESSTHANOREQUALTO resolved as shift
  ! shift/reduce conflict for EQUALTO resolved as shift
  ! shift/reduce conflict for NOTEQUALTO resolved as shift
  ! shift/reduce conflict for COMMA resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for POW resolved as shift
    RPAREN          reduce using rule 35 (exp -> exp COMMA exp .)
    SEMICOL         reduce using rule 35 (exp -> exp COMMA exp .)
    RSQB            reduce using rule 35 (exp -> exp COMMA exp .)
    PLUS            shift and go to state 34
    MINUS           shift and go to state 35
    MULTIPLICATION  shift and go to state 36
    DIVISION        shift and go to state 37
    MODULO          shift and go to state 38
    GREATERTHAN     shift and go to state 39
    LESSTHAN        shift and go to state 40
    GREATERTHANOREQUALTO shift and go to state 41
    LESSTHANOREQUALTO shift and go to state 42
    EQUALTO         shift and go to state 43
    NOTEQUALTO      shift and go to state 44
    COMMA           shift and go to state 84
    AND             shift and go to state 45
    OR              shift and go to state 46
    POW             shift and go to state 47

  ! PLUS            [ reduce using rule 35 (exp -> exp COMMA exp .) ]
  ! MINUS           [ reduce using rule 35 (exp -> exp COMMA exp .) ]
  ! MULTIPLICATION  [ reduce using rule 35 (exp -> exp COMMA exp .) ]
  ! DIVISION        [ reduce using rule 35 (exp -> exp COMMA exp .) ]
  ! MODULO          [ reduce using rule 35 (exp -> exp COMMA exp .) ]
  ! GREATERTHAN     [ reduce using rule 35 (exp -> exp COMMA exp .) ]
  ! LESSTHAN        [ reduce using rule 35 (exp -> exp COMMA exp .) ]
  ! GREATERTHANOREQUALTO [ reduce using rule 35 (exp -> exp COMMA exp .) ]
  ! LESSTHANOREQUALTO [ reduce using rule 35 (exp -> exp COMMA exp .) ]
  ! EQUALTO         [ reduce using rule 35 (exp -> exp COMMA exp .) ]
  ! NOTEQUALTO      [ reduce using rule 35 (exp -> exp COMMA exp .) ]
  ! COMMA           [ reduce using rule 35 (exp -> exp COMMA exp .) ]
  ! AND             [ reduce using rule 35 (exp -> exp COMMA exp .) ]
  ! OR              [ reduce using rule 35 (exp -> exp COMMA exp .) ]
  ! POW             [ reduce using rule 35 (exp -> exp COMMA exp .) ]


state 104

    (17) exp -> NAME LSQB INT RSQB .

    COMMA           reduce using rule 17 (exp -> NAME LSQB INT RSQB .)
    SEMICOL         reduce using rule 17 (exp -> NAME LSQB INT RSQB .)
    PLUS            reduce using rule 17 (exp -> NAME LSQB INT RSQB .)
    MINUS           reduce using rule 17 (exp -> NAME LSQB INT RSQB .)
    MULTIPLICATION  reduce using rule 17 (exp -> NAME LSQB INT RSQB .)
    DIVISION        reduce using rule 17 (exp -> NAME LSQB INT RSQB .)
    MODULO          reduce using rule 17 (exp -> NAME LSQB INT RSQB .)
    GREATERTHAN     reduce using rule 17 (exp -> NAME LSQB INT RSQB .)
    LESSTHAN        reduce using rule 17 (exp -> NAME LSQB INT RSQB .)
    GREATERTHANOREQUALTO reduce using rule 17 (exp -> NAME LSQB INT RSQB .)
    LESSTHANOREQUALTO reduce using rule 17 (exp -> NAME LSQB INT RSQB .)
    EQUALTO         reduce using rule 17 (exp -> NAME LSQB INT RSQB .)
    NOTEQUALTO      reduce using rule 17 (exp -> NAME LSQB INT RSQB .)
    AND             reduce using rule 17 (exp -> NAME LSQB INT RSQB .)
    OR              reduce using rule 17 (exp -> NAME LSQB INT RSQB .)
    POW             reduce using rule 17 (exp -> NAME LSQB INT RSQB .)
    RPAREN          reduce using rule 17 (exp -> NAME LSQB INT RSQB .)
    RSQB            reduce using rule 17 (exp -> NAME LSQB INT RSQB .)


state 105

    (18) exp -> NAME POP LPAREN INT . RPAREN

    RPAREN          shift and go to state 119


state 106

    (51) exp -> NAME LPAREN exp RPAREN .

    COMMA           reduce using rule 51 (exp -> NAME LPAREN exp RPAREN .)
    SEMICOL         reduce using rule 51 (exp -> NAME LPAREN exp RPAREN .)
    PLUS            reduce using rule 51 (exp -> NAME LPAREN exp RPAREN .)
    MINUS           reduce using rule 51 (exp -> NAME LPAREN exp RPAREN .)
    MULTIPLICATION  reduce using rule 51 (exp -> NAME LPAREN exp RPAREN .)
    DIVISION        reduce using rule 51 (exp -> NAME LPAREN exp RPAREN .)
    MODULO          reduce using rule 51 (exp -> NAME LPAREN exp RPAREN .)
    GREATERTHAN     reduce using rule 51 (exp -> NAME LPAREN exp RPAREN .)
    LESSTHAN        reduce using rule 51 (exp -> NAME LPAREN exp RPAREN .)
    GREATERTHANOREQUALTO reduce using rule 51 (exp -> NAME LPAREN exp RPAREN .)
    LESSTHANOREQUALTO reduce using rule 51 (exp -> NAME LPAREN exp RPAREN .)
    EQUALTO         reduce using rule 51 (exp -> NAME LPAREN exp RPAREN .)
    NOTEQUALTO      reduce using rule 51 (exp -> NAME LPAREN exp RPAREN .)
    AND             reduce using rule 51 (exp -> NAME LPAREN exp RPAREN .)
    OR              reduce using rule 51 (exp -> NAME LPAREN exp RPAREN .)
    POW             reduce using rule 51 (exp -> NAME LPAREN exp RPAREN .)
    RPAREN          reduce using rule 51 (exp -> NAME LPAREN exp RPAREN .)
    RSQB            reduce using rule 51 (exp -> NAME LPAREN exp RPAREN .)


state 107

    (19) exp -> NAME INDEX LPAREN INT . RPAREN

    RPAREN          shift and go to state 120


state 108

    (20) exp -> NAME SLICE LPAREN INT . COMMA INT RPAREN

    COMMA           shift and go to state 121


state 109

    (7) stmt -> VARTYPE NAME ASSIGN exp SEMICOL .

    PRINT           reduce using rule 7 (stmt -> VARTYPE NAME ASSIGN exp SEMICOL .)
    VARTYPE         reduce using rule 7 (stmt -> VARTYPE NAME ASSIGN exp SEMICOL .)
    NAME            reduce using rule 7 (stmt -> VARTYPE NAME ASSIGN exp SEMICOL .)
    LIST            reduce using rule 7 (stmt -> VARTYPE NAME ASSIGN exp SEMICOL .)
    IF              reduce using rule 7 (stmt -> VARTYPE NAME ASSIGN exp SEMICOL .)
    DO              reduce using rule 7 (stmt -> VARTYPE NAME ASSIGN exp SEMICOL .)
    FUNCTION        reduce using rule 7 (stmt -> VARTYPE NAME ASSIGN exp SEMICOL .)
    RETURN          reduce using rule 7 (stmt -> VARTYPE NAME ASSIGN exp SEMICOL .)
    $end            reduce using rule 7 (stmt -> VARTYPE NAME ASSIGN exp SEMICOL .)
    RCURLY          reduce using rule 7 (stmt -> VARTYPE NAME ASSIGN exp SEMICOL .)
    SEMICOL         reduce using rule 7 (stmt -> VARTYPE NAME ASSIGN exp SEMICOL .)
    RPAREN          reduce using rule 7 (stmt -> VARTYPE NAME ASSIGN exp SEMICOL .)


state 110

    (8) stmt -> VARTYPE NAME ASSIGN stmt SEMICOL .

    PRINT           reduce using rule 8 (stmt -> VARTYPE NAME ASSIGN stmt SEMICOL .)
    VARTYPE         reduce using rule 8 (stmt -> VARTYPE NAME ASSIGN stmt SEMICOL .)
    NAME            reduce using rule 8 (stmt -> VARTYPE NAME ASSIGN stmt SEMICOL .)
    LIST            reduce using rule 8 (stmt -> VARTYPE NAME ASSIGN stmt SEMICOL .)
    IF              reduce using rule 8 (stmt -> VARTYPE NAME ASSIGN stmt SEMICOL .)
    DO              reduce using rule 8 (stmt -> VARTYPE NAME ASSIGN stmt SEMICOL .)
    FUNCTION        reduce using rule 8 (stmt -> VARTYPE NAME ASSIGN stmt SEMICOL .)
    RETURN          reduce using rule 8 (stmt -> VARTYPE NAME ASSIGN stmt SEMICOL .)
    $end            reduce using rule 8 (stmt -> VARTYPE NAME ASSIGN stmt SEMICOL .)
    RCURLY          reduce using rule 8 (stmt -> VARTYPE NAME ASSIGN stmt SEMICOL .)
    SEMICOL         reduce using rule 8 (stmt -> VARTYPE NAME ASSIGN stmt SEMICOL .)
    RPAREN          reduce using rule 8 (stmt -> VARTYPE NAME ASSIGN stmt SEMICOL .)


state 111

    (21) stmt -> NAME PUSH LPAREN exp RPAREN . SEMICOL

    SEMICOL         shift and go to state 122


state 112

    (41) stmt -> LIST NAME ASSIGN LSQB exp . RSQB SEMICOL
    (24) exp -> exp . PLUS exp
    (25) exp -> exp . MINUS exp
    (26) exp -> exp . MULTIPLICATION exp
    (27) exp -> exp . DIVISION exp
    (28) exp -> exp . MODULO exp
    (29) exp -> exp . GREATERTHAN exp
    (30) exp -> exp . LESSTHAN exp
    (31) exp -> exp . GREATERTHANOREQUALTO exp
    (32) exp -> exp . LESSTHANOREQUALTO exp
    (33) exp -> exp . EQUALTO exp
    (34) exp -> exp . NOTEQUALTO exp
    (35) exp -> exp . COMMA exp
    (36) exp -> exp . AND exp
    (37) exp -> exp . OR exp
    (38) exp -> exp . POW exp

    RSQB            shift and go to state 123
    PLUS            shift and go to state 34
    MINUS           shift and go to state 35
    MULTIPLICATION  shift and go to state 36
    DIVISION        shift and go to state 37
    MODULO          shift and go to state 38
    GREATERTHAN     shift and go to state 39
    LESSTHAN        shift and go to state 40
    GREATERTHANOREQUALTO shift and go to state 41
    LESSTHANOREQUALTO shift and go to state 42
    EQUALTO         shift and go to state 43
    NOTEQUALTO      shift and go to state 44
    COMMA           shift and go to state 84
    AND             shift and go to state 45
    OR              shift and go to state 46
    POW             shift and go to state 47


state 113

    (42) stmt -> LIST NAME ASSIGN LSQB RSQB . SEMICOL

    SEMICOL         shift and go to state 124


state 114

    (43) stmt -> IF LPAREN exp RPAREN LCURLY . S RCURLY block
    (1) S -> . stmt S
    (2) S -> .
    (4) stmt -> . PRINT exp COMMA exp SEMICOL
    (5) stmt -> . PRINT exp SEMICOL
    (6) stmt -> . PRINT LPAREN exp RPAREN SEMICOL
    (7) stmt -> . VARTYPE NAME ASSIGN exp SEMICOL
    (8) stmt -> . VARTYPE NAME ASSIGN stmt SEMICOL
    (9) stmt -> . NAME ASSIGN exp SEMICOL
    (10) stmt -> . VARTYPE NAME
    (15) stmt -> . NAME INCREMENT SEMICOL
    (16) stmt -> . NAME DECREMENT SEMICOL
    (21) stmt -> . NAME PUSH LPAREN exp RPAREN SEMICOL
    (41) stmt -> . LIST NAME ASSIGN LSQB exp RSQB SEMICOL
    (42) stmt -> . LIST NAME ASSIGN LSQB RSQB SEMICOL
    (43) stmt -> . IF LPAREN exp RPAREN LCURLY S RCURLY block
    (47) stmt -> . DO LCURLY S RCURLY block_w
    (49) stmt -> . FUNCTION NAME LPAREN stmt RPAREN LCURLY S RCURLY
    (50) stmt -> . RETURN LPAREN exp RPAREN SEMICOL

    RCURLY          reduce using rule 2 (S -> .)
    PRINT           shift and go to state 3
    VARTYPE         shift and go to state 4
    NAME            shift and go to state 5
    LIST            shift and go to state 6
    IF              shift and go to state 7
    DO              shift and go to state 8
    FUNCTION        shift and go to state 9
    RETURN          shift and go to state 10

    S                              shift and go to state 125
    stmt                           shift and go to state 2

state 115

    (47) stmt -> DO LCURLY S RCURLY block_w .

    PRINT           reduce using rule 47 (stmt -> DO LCURLY S RCURLY block_w .)
    VARTYPE         reduce using rule 47 (stmt -> DO LCURLY S RCURLY block_w .)
    NAME            reduce using rule 47 (stmt -> DO LCURLY S RCURLY block_w .)
    LIST            reduce using rule 47 (stmt -> DO LCURLY S RCURLY block_w .)
    IF              reduce using rule 47 (stmt -> DO LCURLY S RCURLY block_w .)
    DO              reduce using rule 47 (stmt -> DO LCURLY S RCURLY block_w .)
    FUNCTION        reduce using rule 47 (stmt -> DO LCURLY S RCURLY block_w .)
    RETURN          reduce using rule 47 (stmt -> DO LCURLY S RCURLY block_w .)
    $end            reduce using rule 47 (stmt -> DO LCURLY S RCURLY block_w .)
    RCURLY          reduce using rule 47 (stmt -> DO LCURLY S RCURLY block_w .)
    SEMICOL         reduce using rule 47 (stmt -> DO LCURLY S RCURLY block_w .)
    RPAREN          reduce using rule 47 (stmt -> DO LCURLY S RCURLY block_w .)


state 116

    (48) block_w -> WHILE . LPAREN exp RPAREN SEMICOL

    LPAREN          shift and go to state 126


state 117

    (49) stmt -> FUNCTION NAME LPAREN stmt RPAREN . LCURLY S RCURLY

    LCURLY          shift and go to state 127


state 118

    (50) stmt -> RETURN LPAREN exp RPAREN SEMICOL .

    PRINT           reduce using rule 50 (stmt -> RETURN LPAREN exp RPAREN SEMICOL .)
    VARTYPE         reduce using rule 50 (stmt -> RETURN LPAREN exp RPAREN SEMICOL .)
    NAME            reduce using rule 50 (stmt -> RETURN LPAREN exp RPAREN SEMICOL .)
    LIST            reduce using rule 50 (stmt -> RETURN LPAREN exp RPAREN SEMICOL .)
    IF              reduce using rule 50 (stmt -> RETURN LPAREN exp RPAREN SEMICOL .)
    DO              reduce using rule 50 (stmt -> RETURN LPAREN exp RPAREN SEMICOL .)
    FUNCTION        reduce using rule 50 (stmt -> RETURN LPAREN exp RPAREN SEMICOL .)
    RETURN          reduce using rule 50 (stmt -> RETURN LPAREN exp RPAREN SEMICOL .)
    $end            reduce using rule 50 (stmt -> RETURN LPAREN exp RPAREN SEMICOL .)
    RCURLY          reduce using rule 50 (stmt -> RETURN LPAREN exp RPAREN SEMICOL .)
    SEMICOL         reduce using rule 50 (stmt -> RETURN LPAREN exp RPAREN SEMICOL .)
    RPAREN          reduce using rule 50 (stmt -> RETURN LPAREN exp RPAREN SEMICOL .)


state 119

    (18) exp -> NAME POP LPAREN INT RPAREN .

    COMMA           reduce using rule 18 (exp -> NAME POP LPAREN INT RPAREN .)
    SEMICOL         reduce using rule 18 (exp -> NAME POP LPAREN INT RPAREN .)
    PLUS            reduce using rule 18 (exp -> NAME POP LPAREN INT RPAREN .)
    MINUS           reduce using rule 18 (exp -> NAME POP LPAREN INT RPAREN .)
    MULTIPLICATION  reduce using rule 18 (exp -> NAME POP LPAREN INT RPAREN .)
    DIVISION        reduce using rule 18 (exp -> NAME POP LPAREN INT RPAREN .)
    MODULO          reduce using rule 18 (exp -> NAME POP LPAREN INT RPAREN .)
    GREATERTHAN     reduce using rule 18 (exp -> NAME POP LPAREN INT RPAREN .)
    LESSTHAN        reduce using rule 18 (exp -> NAME POP LPAREN INT RPAREN .)
    GREATERTHANOREQUALTO reduce using rule 18 (exp -> NAME POP LPAREN INT RPAREN .)
    LESSTHANOREQUALTO reduce using rule 18 (exp -> NAME POP LPAREN INT RPAREN .)
    EQUALTO         reduce using rule 18 (exp -> NAME POP LPAREN INT RPAREN .)
    NOTEQUALTO      reduce using rule 18 (exp -> NAME POP LPAREN INT RPAREN .)
    AND             reduce using rule 18 (exp -> NAME POP LPAREN INT RPAREN .)
    OR              reduce using rule 18 (exp -> NAME POP LPAREN INT RPAREN .)
    POW             reduce using rule 18 (exp -> NAME POP LPAREN INT RPAREN .)
    RPAREN          reduce using rule 18 (exp -> NAME POP LPAREN INT RPAREN .)
    RSQB            reduce using rule 18 (exp -> NAME POP LPAREN INT RPAREN .)


state 120

    (19) exp -> NAME INDEX LPAREN INT RPAREN .

    COMMA           reduce using rule 19 (exp -> NAME INDEX LPAREN INT RPAREN .)
    SEMICOL         reduce using rule 19 (exp -> NAME INDEX LPAREN INT RPAREN .)
    PLUS            reduce using rule 19 (exp -> NAME INDEX LPAREN INT RPAREN .)
    MINUS           reduce using rule 19 (exp -> NAME INDEX LPAREN INT RPAREN .)
    MULTIPLICATION  reduce using rule 19 (exp -> NAME INDEX LPAREN INT RPAREN .)
    DIVISION        reduce using rule 19 (exp -> NAME INDEX LPAREN INT RPAREN .)
    MODULO          reduce using rule 19 (exp -> NAME INDEX LPAREN INT RPAREN .)
    GREATERTHAN     reduce using rule 19 (exp -> NAME INDEX LPAREN INT RPAREN .)
    LESSTHAN        reduce using rule 19 (exp -> NAME INDEX LPAREN INT RPAREN .)
    GREATERTHANOREQUALTO reduce using rule 19 (exp -> NAME INDEX LPAREN INT RPAREN .)
    LESSTHANOREQUALTO reduce using rule 19 (exp -> NAME INDEX LPAREN INT RPAREN .)
    EQUALTO         reduce using rule 19 (exp -> NAME INDEX LPAREN INT RPAREN .)
    NOTEQUALTO      reduce using rule 19 (exp -> NAME INDEX LPAREN INT RPAREN .)
    AND             reduce using rule 19 (exp -> NAME INDEX LPAREN INT RPAREN .)
    OR              reduce using rule 19 (exp -> NAME INDEX LPAREN INT RPAREN .)
    POW             reduce using rule 19 (exp -> NAME INDEX LPAREN INT RPAREN .)
    RPAREN          reduce using rule 19 (exp -> NAME INDEX LPAREN INT RPAREN .)
    RSQB            reduce using rule 19 (exp -> NAME INDEX LPAREN INT RPAREN .)


state 121

    (20) exp -> NAME SLICE LPAREN INT COMMA . INT RPAREN

    INT             shift and go to state 128


state 122

    (21) stmt -> NAME PUSH LPAREN exp RPAREN SEMICOL .

    PRINT           reduce using rule 21 (stmt -> NAME PUSH LPAREN exp RPAREN SEMICOL .)
    VARTYPE         reduce using rule 21 (stmt -> NAME PUSH LPAREN exp RPAREN SEMICOL .)
    NAME            reduce using rule 21 (stmt -> NAME PUSH LPAREN exp RPAREN SEMICOL .)
    LIST            reduce using rule 21 (stmt -> NAME PUSH LPAREN exp RPAREN SEMICOL .)
    IF              reduce using rule 21 (stmt -> NAME PUSH LPAREN exp RPAREN SEMICOL .)
    DO              reduce using rule 21 (stmt -> NAME PUSH LPAREN exp RPAREN SEMICOL .)
    FUNCTION        reduce using rule 21 (stmt -> NAME PUSH LPAREN exp RPAREN SEMICOL .)
    RETURN          reduce using rule 21 (stmt -> NAME PUSH LPAREN exp RPAREN SEMICOL .)
    $end            reduce using rule 21 (stmt -> NAME PUSH LPAREN exp RPAREN SEMICOL .)
    RCURLY          reduce using rule 21 (stmt -> NAME PUSH LPAREN exp RPAREN SEMICOL .)
    SEMICOL         reduce using rule 21 (stmt -> NAME PUSH LPAREN exp RPAREN SEMICOL .)
    RPAREN          reduce using rule 21 (stmt -> NAME PUSH LPAREN exp RPAREN SEMICOL .)


state 123

    (41) stmt -> LIST NAME ASSIGN LSQB exp RSQB . SEMICOL

    SEMICOL         shift and go to state 129


state 124

    (42) stmt -> LIST NAME ASSIGN LSQB RSQB SEMICOL .

    PRINT           reduce using rule 42 (stmt -> LIST NAME ASSIGN LSQB RSQB SEMICOL .)
    VARTYPE         reduce using rule 42 (stmt -> LIST NAME ASSIGN LSQB RSQB SEMICOL .)
    NAME            reduce using rule 42 (stmt -> LIST NAME ASSIGN LSQB RSQB SEMICOL .)
    LIST            reduce using rule 42 (stmt -> LIST NAME ASSIGN LSQB RSQB SEMICOL .)
    IF              reduce using rule 42 (stmt -> LIST NAME ASSIGN LSQB RSQB SEMICOL .)
    DO              reduce using rule 42 (stmt -> LIST NAME ASSIGN LSQB RSQB SEMICOL .)
    FUNCTION        reduce using rule 42 (stmt -> LIST NAME ASSIGN LSQB RSQB SEMICOL .)
    RETURN          reduce using rule 42 (stmt -> LIST NAME ASSIGN LSQB RSQB SEMICOL .)
    $end            reduce using rule 42 (stmt -> LIST NAME ASSIGN LSQB RSQB SEMICOL .)
    RCURLY          reduce using rule 42 (stmt -> LIST NAME ASSIGN LSQB RSQB SEMICOL .)
    SEMICOL         reduce using rule 42 (stmt -> LIST NAME ASSIGN LSQB RSQB SEMICOL .)
    RPAREN          reduce using rule 42 (stmt -> LIST NAME ASSIGN LSQB RSQB SEMICOL .)


state 125

    (43) stmt -> IF LPAREN exp RPAREN LCURLY S . RCURLY block

    RCURLY          shift and go to state 130


state 126

    (48) block_w -> WHILE LPAREN . exp RPAREN SEMICOL
    (3) exp -> . LPAREN exp RPAREN
    (11) exp -> . FLOAT
    (12) exp -> . INT
    (13) exp -> . BOOL
    (14) exp -> . CHAR
    (17) exp -> . NAME LSQB INT RSQB
    (18) exp -> . NAME POP LPAREN INT RPAREN
    (19) exp -> . NAME INDEX LPAREN INT RPAREN
    (20) exp -> . NAME SLICE LPAREN INT COMMA INT RPAREN
    (22) exp -> . NAME
    (23) exp -> . NOT exp
    (24) exp -> . exp PLUS exp
    (25) exp -> . exp MINUS exp
    (26) exp -> . exp MULTIPLICATION exp
    (27) exp -> . exp DIVISION exp
    (28) exp -> . exp MODULO exp
    (29) exp -> . exp GREATERTHAN exp
    (30) exp -> . exp LESSTHAN exp
    (31) exp -> . exp GREATERTHANOREQUALTO exp
    (32) exp -> . exp LESSTHANOREQUALTO exp
    (33) exp -> . exp EQUALTO exp
    (34) exp -> . exp NOTEQUALTO exp
    (35) exp -> . exp COMMA exp
    (36) exp -> . exp AND exp
    (37) exp -> . exp OR exp
    (38) exp -> . exp POW exp
    (39) exp -> . STRING
    (40) exp -> . MINUS exp
    (51) exp -> . NAME LPAREN exp RPAREN

    LPAREN          shift and go to state 48
    FLOAT           shift and go to state 14
    INT             shift and go to state 15
    BOOL            shift and go to state 16
    CHAR            shift and go to state 17
    NAME            shift and go to state 18
    NOT             shift and go to state 19
    STRING          shift and go to state 21
    MINUS           shift and go to state 20

    exp                            shift and go to state 131

state 127

    (49) stmt -> FUNCTION NAME LPAREN stmt RPAREN LCURLY . S RCURLY
    (1) S -> . stmt S
    (2) S -> .
    (4) stmt -> . PRINT exp COMMA exp SEMICOL
    (5) stmt -> . PRINT exp SEMICOL
    (6) stmt -> . PRINT LPAREN exp RPAREN SEMICOL
    (7) stmt -> . VARTYPE NAME ASSIGN exp SEMICOL
    (8) stmt -> . VARTYPE NAME ASSIGN stmt SEMICOL
    (9) stmt -> . NAME ASSIGN exp SEMICOL
    (10) stmt -> . VARTYPE NAME
    (15) stmt -> . NAME INCREMENT SEMICOL
    (16) stmt -> . NAME DECREMENT SEMICOL
    (21) stmt -> . NAME PUSH LPAREN exp RPAREN SEMICOL
    (41) stmt -> . LIST NAME ASSIGN LSQB exp RSQB SEMICOL
    (42) stmt -> . LIST NAME ASSIGN LSQB RSQB SEMICOL
    (43) stmt -> . IF LPAREN exp RPAREN LCURLY S RCURLY block
    (47) stmt -> . DO LCURLY S RCURLY block_w
    (49) stmt -> . FUNCTION NAME LPAREN stmt RPAREN LCURLY S RCURLY
    (50) stmt -> . RETURN LPAREN exp RPAREN SEMICOL

    RCURLY          reduce using rule 2 (S -> .)
    PRINT           shift and go to state 3
    VARTYPE         shift and go to state 4
    NAME            shift and go to state 5
    LIST            shift and go to state 6
    IF              shift and go to state 7
    DO              shift and go to state 8
    FUNCTION        shift and go to state 9
    RETURN          shift and go to state 10

    stmt                           shift and go to state 2
    S                              shift and go to state 132

state 128

    (20) exp -> NAME SLICE LPAREN INT COMMA INT . RPAREN

    RPAREN          shift and go to state 133


state 129

    (41) stmt -> LIST NAME ASSIGN LSQB exp RSQB SEMICOL .

    PRINT           reduce using rule 41 (stmt -> LIST NAME ASSIGN LSQB exp RSQB SEMICOL .)
    VARTYPE         reduce using rule 41 (stmt -> LIST NAME ASSIGN LSQB exp RSQB SEMICOL .)
    NAME            reduce using rule 41 (stmt -> LIST NAME ASSIGN LSQB exp RSQB SEMICOL .)
    LIST            reduce using rule 41 (stmt -> LIST NAME ASSIGN LSQB exp RSQB SEMICOL .)
    IF              reduce using rule 41 (stmt -> LIST NAME ASSIGN LSQB exp RSQB SEMICOL .)
    DO              reduce using rule 41 (stmt -> LIST NAME ASSIGN LSQB exp RSQB SEMICOL .)
    FUNCTION        reduce using rule 41 (stmt -> LIST NAME ASSIGN LSQB exp RSQB SEMICOL .)
    RETURN          reduce using rule 41 (stmt -> LIST NAME ASSIGN LSQB exp RSQB SEMICOL .)
    $end            reduce using rule 41 (stmt -> LIST NAME ASSIGN LSQB exp RSQB SEMICOL .)
    RCURLY          reduce using rule 41 (stmt -> LIST NAME ASSIGN LSQB exp RSQB SEMICOL .)
    SEMICOL         reduce using rule 41 (stmt -> LIST NAME ASSIGN LSQB exp RSQB SEMICOL .)
    RPAREN          reduce using rule 41 (stmt -> LIST NAME ASSIGN LSQB exp RSQB SEMICOL .)


state 130

    (43) stmt -> IF LPAREN exp RPAREN LCURLY S RCURLY . block
    (44) block -> . ELSEIF LPAREN exp RPAREN LCURLY S RCURLY block
    (45) block -> . ELSE LCURLY S RCURLY
    (46) block -> .

    ELSEIF          shift and go to state 135
    ELSE            shift and go to state 136
    PRINT           reduce using rule 46 (block -> .)
    VARTYPE         reduce using rule 46 (block -> .)
    NAME            reduce using rule 46 (block -> .)
    LIST            reduce using rule 46 (block -> .)
    IF              reduce using rule 46 (block -> .)
    DO              reduce using rule 46 (block -> .)
    FUNCTION        reduce using rule 46 (block -> .)
    RETURN          reduce using rule 46 (block -> .)
    $end            reduce using rule 46 (block -> .)
    RCURLY          reduce using rule 46 (block -> .)
    SEMICOL         reduce using rule 46 (block -> .)
    RPAREN          reduce using rule 46 (block -> .)

    block                          shift and go to state 134

state 131

    (48) block_w -> WHILE LPAREN exp . RPAREN SEMICOL
    (24) exp -> exp . PLUS exp
    (25) exp -> exp . MINUS exp
    (26) exp -> exp . MULTIPLICATION exp
    (27) exp -> exp . DIVISION exp
    (28) exp -> exp . MODULO exp
    (29) exp -> exp . GREATERTHAN exp
    (30) exp -> exp . LESSTHAN exp
    (31) exp -> exp . GREATERTHANOREQUALTO exp
    (32) exp -> exp . LESSTHANOREQUALTO exp
    (33) exp -> exp . EQUALTO exp
    (34) exp -> exp . NOTEQUALTO exp
    (35) exp -> exp . COMMA exp
    (36) exp -> exp . AND exp
    (37) exp -> exp . OR exp
    (38) exp -> exp . POW exp

    RPAREN          shift and go to state 137
    PLUS            shift and go to state 34
    MINUS           shift and go to state 35
    MULTIPLICATION  shift and go to state 36
    DIVISION        shift and go to state 37
    MODULO          shift and go to state 38
    GREATERTHAN     shift and go to state 39
    LESSTHAN        shift and go to state 40
    GREATERTHANOREQUALTO shift and go to state 41
    LESSTHANOREQUALTO shift and go to state 42
    EQUALTO         shift and go to state 43
    NOTEQUALTO      shift and go to state 44
    COMMA           shift and go to state 84
    AND             shift and go to state 45
    OR              shift and go to state 46
    POW             shift and go to state 47


state 132

    (49) stmt -> FUNCTION NAME LPAREN stmt RPAREN LCURLY S . RCURLY

    RCURLY          shift and go to state 138


state 133

    (20) exp -> NAME SLICE LPAREN INT COMMA INT RPAREN .

    COMMA           reduce using rule 20 (exp -> NAME SLICE LPAREN INT COMMA INT RPAREN .)
    SEMICOL         reduce using rule 20 (exp -> NAME SLICE LPAREN INT COMMA INT RPAREN .)
    PLUS            reduce using rule 20 (exp -> NAME SLICE LPAREN INT COMMA INT RPAREN .)
    MINUS           reduce using rule 20 (exp -> NAME SLICE LPAREN INT COMMA INT RPAREN .)
    MULTIPLICATION  reduce using rule 20 (exp -> NAME SLICE LPAREN INT COMMA INT RPAREN .)
    DIVISION        reduce using rule 20 (exp -> NAME SLICE LPAREN INT COMMA INT RPAREN .)
    MODULO          reduce using rule 20 (exp -> NAME SLICE LPAREN INT COMMA INT RPAREN .)
    GREATERTHAN     reduce using rule 20 (exp -> NAME SLICE LPAREN INT COMMA INT RPAREN .)
    LESSTHAN        reduce using rule 20 (exp -> NAME SLICE LPAREN INT COMMA INT RPAREN .)
    GREATERTHANOREQUALTO reduce using rule 20 (exp -> NAME SLICE LPAREN INT COMMA INT RPAREN .)
    LESSTHANOREQUALTO reduce using rule 20 (exp -> NAME SLICE LPAREN INT COMMA INT RPAREN .)
    EQUALTO         reduce using rule 20 (exp -> NAME SLICE LPAREN INT COMMA INT RPAREN .)
    NOTEQUALTO      reduce using rule 20 (exp -> NAME SLICE LPAREN INT COMMA INT RPAREN .)
    AND             reduce using rule 20 (exp -> NAME SLICE LPAREN INT COMMA INT RPAREN .)
    OR              reduce using rule 20 (exp -> NAME SLICE LPAREN INT COMMA INT RPAREN .)
    POW             reduce using rule 20 (exp -> NAME SLICE LPAREN INT COMMA INT RPAREN .)
    RPAREN          reduce using rule 20 (exp -> NAME SLICE LPAREN INT COMMA INT RPAREN .)
    RSQB            reduce using rule 20 (exp -> NAME SLICE LPAREN INT COMMA INT RPAREN .)


state 134

    (43) stmt -> IF LPAREN exp RPAREN LCURLY S RCURLY block .

    PRINT           reduce using rule 43 (stmt -> IF LPAREN exp RPAREN LCURLY S RCURLY block .)
    VARTYPE         reduce using rule 43 (stmt -> IF LPAREN exp RPAREN LCURLY S RCURLY block .)
    NAME            reduce using rule 43 (stmt -> IF LPAREN exp RPAREN LCURLY S RCURLY block .)
    LIST            reduce using rule 43 (stmt -> IF LPAREN exp RPAREN LCURLY S RCURLY block .)
    IF              reduce using rule 43 (stmt -> IF LPAREN exp RPAREN LCURLY S RCURLY block .)
    DO              reduce using rule 43 (stmt -> IF LPAREN exp RPAREN LCURLY S RCURLY block .)
    FUNCTION        reduce using rule 43 (stmt -> IF LPAREN exp RPAREN LCURLY S RCURLY block .)
    RETURN          reduce using rule 43 (stmt -> IF LPAREN exp RPAREN LCURLY S RCURLY block .)
    $end            reduce using rule 43 (stmt -> IF LPAREN exp RPAREN LCURLY S RCURLY block .)
    RCURLY          reduce using rule 43 (stmt -> IF LPAREN exp RPAREN LCURLY S RCURLY block .)
    SEMICOL         reduce using rule 43 (stmt -> IF LPAREN exp RPAREN LCURLY S RCURLY block .)
    RPAREN          reduce using rule 43 (stmt -> IF LPAREN exp RPAREN LCURLY S RCURLY block .)


state 135

    (44) block -> ELSEIF . LPAREN exp RPAREN LCURLY S RCURLY block

    LPAREN          shift and go to state 139


state 136

    (45) block -> ELSE . LCURLY S RCURLY

    LCURLY          shift and go to state 140


state 137

    (48) block_w -> WHILE LPAREN exp RPAREN . SEMICOL

    SEMICOL         shift and go to state 141


state 138

    (49) stmt -> FUNCTION NAME LPAREN stmt RPAREN LCURLY S RCURLY .

    PRINT           reduce using rule 49 (stmt -> FUNCTION NAME LPAREN stmt RPAREN LCURLY S RCURLY .)
    VARTYPE         reduce using rule 49 (stmt -> FUNCTION NAME LPAREN stmt RPAREN LCURLY S RCURLY .)
    NAME            reduce using rule 49 (stmt -> FUNCTION NAME LPAREN stmt RPAREN LCURLY S RCURLY .)
    LIST            reduce using rule 49 (stmt -> FUNCTION NAME LPAREN stmt RPAREN LCURLY S RCURLY .)
    IF              reduce using rule 49 (stmt -> FUNCTION NAME LPAREN stmt RPAREN LCURLY S RCURLY .)
    DO              reduce using rule 49 (stmt -> FUNCTION NAME LPAREN stmt RPAREN LCURLY S RCURLY .)
    FUNCTION        reduce using rule 49 (stmt -> FUNCTION NAME LPAREN stmt RPAREN LCURLY S RCURLY .)
    RETURN          reduce using rule 49 (stmt -> FUNCTION NAME LPAREN stmt RPAREN LCURLY S RCURLY .)
    $end            reduce using rule 49 (stmt -> FUNCTION NAME LPAREN stmt RPAREN LCURLY S RCURLY .)
    RCURLY          reduce using rule 49 (stmt -> FUNCTION NAME LPAREN stmt RPAREN LCURLY S RCURLY .)
    SEMICOL         reduce using rule 49 (stmt -> FUNCTION NAME LPAREN stmt RPAREN LCURLY S RCURLY .)
    RPAREN          reduce using rule 49 (stmt -> FUNCTION NAME LPAREN stmt RPAREN LCURLY S RCURLY .)


state 139

    (44) block -> ELSEIF LPAREN . exp RPAREN LCURLY S RCURLY block
    (3) exp -> . LPAREN exp RPAREN
    (11) exp -> . FLOAT
    (12) exp -> . INT
    (13) exp -> . BOOL
    (14) exp -> . CHAR
    (17) exp -> . NAME LSQB INT RSQB
    (18) exp -> . NAME POP LPAREN INT RPAREN
    (19) exp -> . NAME INDEX LPAREN INT RPAREN
    (20) exp -> . NAME SLICE LPAREN INT COMMA INT RPAREN
    (22) exp -> . NAME
    (23) exp -> . NOT exp
    (24) exp -> . exp PLUS exp
    (25) exp -> . exp MINUS exp
    (26) exp -> . exp MULTIPLICATION exp
    (27) exp -> . exp DIVISION exp
    (28) exp -> . exp MODULO exp
    (29) exp -> . exp GREATERTHAN exp
    (30) exp -> . exp LESSTHAN exp
    (31) exp -> . exp GREATERTHANOREQUALTO exp
    (32) exp -> . exp LESSTHANOREQUALTO exp
    (33) exp -> . exp EQUALTO exp
    (34) exp -> . exp NOTEQUALTO exp
    (35) exp -> . exp COMMA exp
    (36) exp -> . exp AND exp
    (37) exp -> . exp OR exp
    (38) exp -> . exp POW exp
    (39) exp -> . STRING
    (40) exp -> . MINUS exp
    (51) exp -> . NAME LPAREN exp RPAREN

    LPAREN          shift and go to state 48
    FLOAT           shift and go to state 14
    INT             shift and go to state 15
    BOOL            shift and go to state 16
    CHAR            shift and go to state 17
    NAME            shift and go to state 18
    NOT             shift and go to state 19
    STRING          shift and go to state 21
    MINUS           shift and go to state 20

    exp                            shift and go to state 142

state 140

    (45) block -> ELSE LCURLY . S RCURLY
    (1) S -> . stmt S
    (2) S -> .
    (4) stmt -> . PRINT exp COMMA exp SEMICOL
    (5) stmt -> . PRINT exp SEMICOL
    (6) stmt -> . PRINT LPAREN exp RPAREN SEMICOL
    (7) stmt -> . VARTYPE NAME ASSIGN exp SEMICOL
    (8) stmt -> . VARTYPE NAME ASSIGN stmt SEMICOL
    (9) stmt -> . NAME ASSIGN exp SEMICOL
    (10) stmt -> . VARTYPE NAME
    (15) stmt -> . NAME INCREMENT SEMICOL
    (16) stmt -> . NAME DECREMENT SEMICOL
    (21) stmt -> . NAME PUSH LPAREN exp RPAREN SEMICOL
    (41) stmt -> . LIST NAME ASSIGN LSQB exp RSQB SEMICOL
    (42) stmt -> . LIST NAME ASSIGN LSQB RSQB SEMICOL
    (43) stmt -> . IF LPAREN exp RPAREN LCURLY S RCURLY block
    (47) stmt -> . DO LCURLY S RCURLY block_w
    (49) stmt -> . FUNCTION NAME LPAREN stmt RPAREN LCURLY S RCURLY
    (50) stmt -> . RETURN LPAREN exp RPAREN SEMICOL

    RCURLY          reduce using rule 2 (S -> .)
    PRINT           shift and go to state 3
    VARTYPE         shift and go to state 4
    NAME            shift and go to state 5
    LIST            shift and go to state 6
    IF              shift and go to state 7
    DO              shift and go to state 8
    FUNCTION        shift and go to state 9
    RETURN          shift and go to state 10

    S                              shift and go to state 143
    stmt                           shift and go to state 2

state 141

    (48) block_w -> WHILE LPAREN exp RPAREN SEMICOL .

    PRINT           reduce using rule 48 (block_w -> WHILE LPAREN exp RPAREN SEMICOL .)
    VARTYPE         reduce using rule 48 (block_w -> WHILE LPAREN exp RPAREN SEMICOL .)
    NAME            reduce using rule 48 (block_w -> WHILE LPAREN exp RPAREN SEMICOL .)
    LIST            reduce using rule 48 (block_w -> WHILE LPAREN exp RPAREN SEMICOL .)
    IF              reduce using rule 48 (block_w -> WHILE LPAREN exp RPAREN SEMICOL .)
    DO              reduce using rule 48 (block_w -> WHILE LPAREN exp RPAREN SEMICOL .)
    FUNCTION        reduce using rule 48 (block_w -> WHILE LPAREN exp RPAREN SEMICOL .)
    RETURN          reduce using rule 48 (block_w -> WHILE LPAREN exp RPAREN SEMICOL .)
    $end            reduce using rule 48 (block_w -> WHILE LPAREN exp RPAREN SEMICOL .)
    RCURLY          reduce using rule 48 (block_w -> WHILE LPAREN exp RPAREN SEMICOL .)
    SEMICOL         reduce using rule 48 (block_w -> WHILE LPAREN exp RPAREN SEMICOL .)
    RPAREN          reduce using rule 48 (block_w -> WHILE LPAREN exp RPAREN SEMICOL .)


state 142

    (44) block -> ELSEIF LPAREN exp . RPAREN LCURLY S RCURLY block
    (24) exp -> exp . PLUS exp
    (25) exp -> exp . MINUS exp
    (26) exp -> exp . MULTIPLICATION exp
    (27) exp -> exp . DIVISION exp
    (28) exp -> exp . MODULO exp
    (29) exp -> exp . GREATERTHAN exp
    (30) exp -> exp . LESSTHAN exp
    (31) exp -> exp . GREATERTHANOREQUALTO exp
    (32) exp -> exp . LESSTHANOREQUALTO exp
    (33) exp -> exp . EQUALTO exp
    (34) exp -> exp . NOTEQUALTO exp
    (35) exp -> exp . COMMA exp
    (36) exp -> exp . AND exp
    (37) exp -> exp . OR exp
    (38) exp -> exp . POW exp

    RPAREN          shift and go to state 144
    PLUS            shift and go to state 34
    MINUS           shift and go to state 35
    MULTIPLICATION  shift and go to state 36
    DIVISION        shift and go to state 37
    MODULO          shift and go to state 38
    GREATERTHAN     shift and go to state 39
    LESSTHAN        shift and go to state 40
    GREATERTHANOREQUALTO shift and go to state 41
    LESSTHANOREQUALTO shift and go to state 42
    EQUALTO         shift and go to state 43
    NOTEQUALTO      shift and go to state 44
    COMMA           shift and go to state 84
    AND             shift and go to state 45
    OR              shift and go to state 46
    POW             shift and go to state 47


state 143

    (45) block -> ELSE LCURLY S . RCURLY

    RCURLY          shift and go to state 145


state 144

    (44) block -> ELSEIF LPAREN exp RPAREN . LCURLY S RCURLY block

    LCURLY          shift and go to state 146


state 145

    (45) block -> ELSE LCURLY S RCURLY .

    PRINT           reduce using rule 45 (block -> ELSE LCURLY S RCURLY .)
    VARTYPE         reduce using rule 45 (block -> ELSE LCURLY S RCURLY .)
    NAME            reduce using rule 45 (block -> ELSE LCURLY S RCURLY .)
    LIST            reduce using rule 45 (block -> ELSE LCURLY S RCURLY .)
    IF              reduce using rule 45 (block -> ELSE LCURLY S RCURLY .)
    DO              reduce using rule 45 (block -> ELSE LCURLY S RCURLY .)
    FUNCTION        reduce using rule 45 (block -> ELSE LCURLY S RCURLY .)
    RETURN          reduce using rule 45 (block -> ELSE LCURLY S RCURLY .)
    $end            reduce using rule 45 (block -> ELSE LCURLY S RCURLY .)
    RCURLY          reduce using rule 45 (block -> ELSE LCURLY S RCURLY .)
    SEMICOL         reduce using rule 45 (block -> ELSE LCURLY S RCURLY .)
    RPAREN          reduce using rule 45 (block -> ELSE LCURLY S RCURLY .)


state 146

    (44) block -> ELSEIF LPAREN exp RPAREN LCURLY . S RCURLY block
    (1) S -> . stmt S
    (2) S -> .
    (4) stmt -> . PRINT exp COMMA exp SEMICOL
    (5) stmt -> . PRINT exp SEMICOL
    (6) stmt -> . PRINT LPAREN exp RPAREN SEMICOL
    (7) stmt -> . VARTYPE NAME ASSIGN exp SEMICOL
    (8) stmt -> . VARTYPE NAME ASSIGN stmt SEMICOL
    (9) stmt -> . NAME ASSIGN exp SEMICOL
    (10) stmt -> . VARTYPE NAME
    (15) stmt -> . NAME INCREMENT SEMICOL
    (16) stmt -> . NAME DECREMENT SEMICOL
    (21) stmt -> . NAME PUSH LPAREN exp RPAREN SEMICOL
    (41) stmt -> . LIST NAME ASSIGN LSQB exp RSQB SEMICOL
    (42) stmt -> . LIST NAME ASSIGN LSQB RSQB SEMICOL
    (43) stmt -> . IF LPAREN exp RPAREN LCURLY S RCURLY block
    (47) stmt -> . DO LCURLY S RCURLY block_w
    (49) stmt -> . FUNCTION NAME LPAREN stmt RPAREN LCURLY S RCURLY
    (50) stmt -> . RETURN LPAREN exp RPAREN SEMICOL

    RCURLY          reduce using rule 2 (S -> .)
    PRINT           shift and go to state 3
    VARTYPE         shift and go to state 4
    NAME            shift and go to state 5
    LIST            shift and go to state 6
    IF              shift and go to state 7
    DO              shift and go to state 8
    FUNCTION        shift and go to state 9
    RETURN          shift and go to state 10

    S                              shift and go to state 147
    stmt                           shift and go to state 2

state 147

    (44) block -> ELSEIF LPAREN exp RPAREN LCURLY S . RCURLY block

    RCURLY          shift and go to state 148


state 148

    (44) block -> ELSEIF LPAREN exp RPAREN LCURLY S RCURLY . block
    (44) block -> . ELSEIF LPAREN exp RPAREN LCURLY S RCURLY block
    (45) block -> . ELSE LCURLY S RCURLY
    (46) block -> .

    ELSEIF          shift and go to state 135
    ELSE            shift and go to state 136
    PRINT           reduce using rule 46 (block -> .)
    VARTYPE         reduce using rule 46 (block -> .)
    NAME            reduce using rule 46 (block -> .)
    LIST            reduce using rule 46 (block -> .)
    IF              reduce using rule 46 (block -> .)
    DO              reduce using rule 46 (block -> .)
    FUNCTION        reduce using rule 46 (block -> .)
    RETURN          reduce using rule 46 (block -> .)
    $end            reduce using rule 46 (block -> .)
    RCURLY          reduce using rule 46 (block -> .)
    SEMICOL         reduce using rule 46 (block -> .)
    RPAREN          reduce using rule 46 (block -> .)

    block                          shift and go to state 149

state 149

    (44) block -> ELSEIF LPAREN exp RPAREN LCURLY S RCURLY block .

    PRINT           reduce using rule 44 (block -> ELSEIF LPAREN exp RPAREN LCURLY S RCURLY block .)
    VARTYPE         reduce using rule 44 (block -> ELSEIF LPAREN exp RPAREN LCURLY S RCURLY block .)
    NAME            reduce using rule 44 (block -> ELSEIF LPAREN exp RPAREN LCURLY S RCURLY block .)
    LIST            reduce using rule 44 (block -> ELSEIF LPAREN exp RPAREN LCURLY S RCURLY block .)
    IF              reduce using rule 44 (block -> ELSEIF LPAREN exp RPAREN LCURLY S RCURLY block .)
    DO              reduce using rule 44 (block -> ELSEIF LPAREN exp RPAREN LCURLY S RCURLY block .)
    FUNCTION        reduce using rule 44 (block -> ELSEIF LPAREN exp RPAREN LCURLY S RCURLY block .)
    RETURN          reduce using rule 44 (block -> ELSEIF LPAREN exp RPAREN LCURLY S RCURLY block .)
    $end            reduce using rule 44 (block -> ELSEIF LPAREN exp RPAREN LCURLY S RCURLY block .)
    RCURLY          reduce using rule 44 (block -> ELSEIF LPAREN exp RPAREN LCURLY S RCURLY block .)
    SEMICOL         reduce using rule 44 (block -> ELSEIF LPAREN exp RPAREN LCURLY S RCURLY block .)
    RPAREN          reduce using rule 44 (block -> ELSEIF LPAREN exp RPAREN LCURLY S RCURLY block .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for PLUS in state 55 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 55 resolved as shift
WARNING: shift/reduce conflict for MULTIPLICATION in state 55 resolved as shift
WARNING: shift/reduce conflict for DIVISION in state 55 resolved as shift
WARNING: shift/reduce conflict for MODULO in state 55 resolved as shift
WARNING: shift/reduce conflict for GREATERTHAN in state 55 resolved as shift
WARNING: shift/reduce conflict for LESSTHAN in state 55 resolved as shift
WARNING: shift/reduce conflict for GREATERTHANOREQUALTO in state 55 resolved as shift
WARNING: shift/reduce conflict for LESSTHANOREQUALTO in state 55 resolved as shift
WARNING: shift/reduce conflict for EQUALTO in state 55 resolved as shift
WARNING: shift/reduce conflict for NOTEQUALTO in state 55 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 55 resolved as shift
WARNING: shift/reduce conflict for AND in state 55 resolved as shift
WARNING: shift/reduce conflict for OR in state 55 resolved as shift
WARNING: shift/reduce conflict for POW in state 55 resolved as shift
WARNING: shift/reduce conflict for SEMICOL in state 67 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 67 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 67 resolved as shift
WARNING: shift/reduce conflict for MULTIPLICATION in state 67 resolved as shift
WARNING: shift/reduce conflict for DIVISION in state 67 resolved as shift
WARNING: shift/reduce conflict for MODULO in state 67 resolved as shift
WARNING: shift/reduce conflict for GREATERTHAN in state 67 resolved as shift
WARNING: shift/reduce conflict for LESSTHAN in state 67 resolved as shift
WARNING: shift/reduce conflict for GREATERTHANOREQUALTO in state 67 resolved as shift
WARNING: shift/reduce conflict for LESSTHANOREQUALTO in state 67 resolved as shift
WARNING: shift/reduce conflict for EQUALTO in state 67 resolved as shift
WARNING: shift/reduce conflict for NOTEQUALTO in state 67 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 67 resolved as shift
WARNING: shift/reduce conflict for AND in state 67 resolved as shift
WARNING: shift/reduce conflict for OR in state 67 resolved as shift
WARNING: shift/reduce conflict for POW in state 67 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 79 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 79 resolved as shift
WARNING: shift/reduce conflict for MULTIPLICATION in state 79 resolved as shift
WARNING: shift/reduce conflict for DIVISION in state 79 resolved as shift
WARNING: shift/reduce conflict for MODULO in state 79 resolved as shift
WARNING: shift/reduce conflict for GREATERTHAN in state 79 resolved as shift
WARNING: shift/reduce conflict for LESSTHAN in state 79 resolved as shift
WARNING: shift/reduce conflict for GREATERTHANOREQUALTO in state 79 resolved as shift
WARNING: shift/reduce conflict for LESSTHANOREQUALTO in state 79 resolved as shift
WARNING: shift/reduce conflict for EQUALTO in state 79 resolved as shift
WARNING: shift/reduce conflict for NOTEQUALTO in state 79 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 79 resolved as shift
WARNING: shift/reduce conflict for AND in state 79 resolved as shift
WARNING: shift/reduce conflict for OR in state 79 resolved as shift
WARNING: shift/reduce conflict for POW in state 79 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 80 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 80 resolved as shift
WARNING: shift/reduce conflict for MULTIPLICATION in state 80 resolved as shift
WARNING: shift/reduce conflict for DIVISION in state 80 resolved as shift
WARNING: shift/reduce conflict for MODULO in state 80 resolved as shift
WARNING: shift/reduce conflict for GREATERTHAN in state 80 resolved as shift
WARNING: shift/reduce conflict for LESSTHAN in state 80 resolved as shift
WARNING: shift/reduce conflict for GREATERTHANOREQUALTO in state 80 resolved as shift
WARNING: shift/reduce conflict for LESSTHANOREQUALTO in state 80 resolved as shift
WARNING: shift/reduce conflict for EQUALTO in state 80 resolved as shift
WARNING: shift/reduce conflict for NOTEQUALTO in state 80 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 80 resolved as shift
WARNING: shift/reduce conflict for AND in state 80 resolved as shift
WARNING: shift/reduce conflict for OR in state 80 resolved as shift
WARNING: shift/reduce conflict for POW in state 80 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 103 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 103 resolved as shift
WARNING: shift/reduce conflict for MULTIPLICATION in state 103 resolved as shift
WARNING: shift/reduce conflict for DIVISION in state 103 resolved as shift
WARNING: shift/reduce conflict for MODULO in state 103 resolved as shift
WARNING: shift/reduce conflict for GREATERTHAN in state 103 resolved as shift
WARNING: shift/reduce conflict for LESSTHAN in state 103 resolved as shift
WARNING: shift/reduce conflict for GREATERTHANOREQUALTO in state 103 resolved as shift
WARNING: shift/reduce conflict for LESSTHANOREQUALTO in state 103 resolved as shift
WARNING: shift/reduce conflict for EQUALTO in state 103 resolved as shift
WARNING: shift/reduce conflict for NOTEQUALTO in state 103 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 103 resolved as shift
WARNING: shift/reduce conflict for AND in state 103 resolved as shift
WARNING: shift/reduce conflict for OR in state 103 resolved as shift
WARNING: shift/reduce conflict for POW in state 103 resolved as shift
